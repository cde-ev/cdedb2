# Formating rules:
# - Comment lines beginning with a '#' character are ignored.
# - If a line begins with a single space, it is considered a continuation of the previous line (even if the previous line is a comment) and the single leading space is removed.
# - Entries are separated by blank lines.

# set log level to debug
dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1

# load sql-backend module
dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: back_sql

# load memberof-module
dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: memberof

# backend definition
# currently no options are implemented and therefore this shall not be used
# https://manpages.debian.org/buster/slapd/slapd-config.5.en.html#GENERAL_BACKEND_OPTIONS
#dn: olcBackend=sql,cn=config
#changetype: add
#objectClass: olcBackendConfig
#olcBackend: sql

# default mdb configuration, for reference
# dn: olcDatabase={1}mdb,cn=config
# objectClass: olcDatabaseConfig
# objectClass: olcMdbConfig
# olcDatabase: {1}mdb
# olcDbDirectory: /var/lib/ldap
# olcSuffix: dc=dummy-ev,dc=de
# olcAccess: {0}to attrs=userPassword by self write by anonymous auth by * none
# olcAccess: {1}to attrs=shadowLastChange by self write by * read
# olcAccess: {2}to * by * read
# olcLastMod: TRUE
# olcRootDN: cn=admin,dc=dummy-ev,dc=de
# olcRootPW: {SSHA}lphnDlepDQS6YE/4qSMP7B6CTfS/yXka
# olcDbCheckpoint: 512 30
# olcDbIndex: objectClass eq
# olcDbIndex: cn,uid eq
# olcDbIndex: uidNumber,gidNumber eq
# olcDbIndex: member,memberUid eq
# olcDbMaxSize: 1073741824

# database definitions
# see https://manpages.debian.org/buster/slapd/slapd-config.5.en.html#GENERAL_DATABASE_OPTIONS
dn: olcDatabase=sql,cn=config
changetype: add
objectClass: olcDatabaseConfig
objectClass: olcSqlConfig
olcSuffix: dc=cde-ev,dc=de
#
# for details see https://manpages.debian.org/buster/slapd/slapd.access.5.en.html
# protect passwords to be accessed only for authentication
olcAccess:
  to attrs=userPassword
  by * auth
# grant every authenticated client access to the structural nodes (base node,
# first sublevel of base) of the ldap tree
olcAccess:
  to dn.base="dc=cde-ev,dc=de"
  by users read
olcAccess:
  to dn.onelevel="dc=cde-ev,dc=de"
  by users read
# grant all authenticated clients access to groups, since the only personal data
# they contain is the user id
olcAccess:
  to dn.subtree="ou=groups,dc=cde-ev,dc=de"
  by users read
# grant users access to their own user data and dsas access to all user data
olcAccess:
  to dn.subtree="ou=users,dc=cde-ev,dc=de"
  by self read
  by dn.subtree="ou=dsa,dc=cde-ev,dc=de" read
#
# In theory, it should be possible to give more fine granular access to dsas.
# This would allow specific dsas access to only users which are members of
# specific groups, using the 'memberOf' attribute of users.
# To filter users by attribute should be possible by using the 'filter' <what>
# clause, providing a valid ldap search filter.
# A filter like 'filter=(objectClass=*)' or 'filter=(objectClass=inetOrgPerson)'
# works, but filtering after any other user attribute does not yield any hits...
# olcAccess:
#  to filter=(memberOf=cn=is_active,ou=status,ou=groups,dc=cde-ev,dc=de)
#  by dn.subtree="ou=dsa,dc=cde-ev,dc=de" read
#
# grant all dsas access to all dsas since why not
olcAccess:
  to dn.subtree="ou=dsa,dc=cde-ev,dc=de"
  by dn.subtree="ou=dsa,dc=cde-ev,dc=de" read
# prevent all other requests
olcAccess:
  to *
  by * none
# this user better exist or else there be dragons
#
olcRootDN: cn=admin,ou=dsa,dc=cde-ev,dc=de
olcRootPW: secret
olcDatabase: sql
olcDbHost: localhost
olcDbName: cdb
# the credentials are irrelevant as we use odbc,
# but the parameters mustn't be empty
olcDbUser: cdb_admin
olcDbPass: 9876543210abcdefghijklmnopqrst
# SQL-backend configuration options (unused commented out)
olcSqlConcatPattern: ?||?
# olcSqlSubtreeCond
# olcSqlChildrenCond
# olcSqlDnMatchCond
# olcSqlOcQuery
# olcSqlAtQuery
# olcSqlInsEntryStmt
# olcSqlCreateNeedsSelect
olcSqlUpperFunc: upper
# olcSqlUpperNeedsCast
olcSqlStrcastFunc: text
# olcSqlDelEntryStmt
# olcSqlRenEntryStmt
# olcSqlDelObjclassesStmt
olcSqlHasLDAPinfoDnRu: FALSE
# olcSqlFailIfNoMapping
# olcSqlAllowOrphans
# olcSqlBaseObject
# olcSqlLayer
# olcSqlUseSubtreeShortcut
# olcSqlFetchAllAttrs
# olcSqlFetchAttrs
# olcSqlCheckSchema
# olcSqlAliasingKeyword
# olcSqlAliasingQuote
# olcSqlAutocommit
# olcSqlIdQuery

# add memberOf attribute
# if we would work with a 'normal' ldap setup, we would like to construct those
# attributes dynamically from the group membership of each users. However, this
# would need writing access to the ldap database which we do not want to grant.
# Since we fetch all our information from PostgreSQL, we can simply fetch this
# reversed-group-membership from our database too, adding the values of this
# attributes manually.
#
# for reference, this is how this may look if we would not use our current backend.
# from https://tylersguides.com/guides/openldap-memberof-overlay/
#
# dn: olcOverlay=memberof,olcDatabase={1}sql,cn=config
# changetype: add
# objectClass: olcOverlayConfig
# objectClass: olcMemberOf
# olcOverlay: memberof
# olcMemberOfRefint: TRUE
# olcMemberOfGroupOC: groupOfNames
# olcMemberOfMemberAD: uniqueMember
