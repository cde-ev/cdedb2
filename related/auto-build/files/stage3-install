#!/bin/bash
set -e

echo ""
echo "cdedb - sandbox system: STAGE 3"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""
echo "Getting the system up to date..."
echo "--------------------------------------------"

cd /
sleep 3

apt-get -y update
apt-get -y upgrade
apt-get -y clean

echo ""
echo "Pacify git paranoia..."
echo "--------------------------------------------"

cp /media/cdrom0/gitconfig /etc/gitconfig

echo ""
echo "Getting a copy of the cdedb sources..."
echo "--------------------------------------------"

mkdir /cdedb2
chown cdedb:cdedb /cdedb2
# the following is a bit hacky, but for the actual autobuild we have to try
# another location
sudo -u cdedb git clone ssh://gitea@tracker.cde-ev.de:20009/cdedb/cdedb2.git /cdedb2 || sudo -u cdedb git clone ssh://gitea@10.9.0.2:63332/cdedb/cdedb2.git /cdedb2
cd /cdedb2
# correct upstream URL after auto-build
sudo -u cdedb git remote set-url origin ssh://gitea@tracker.cde-ev.de:20009/cdedb/cdedb2.git
# activate custom git hooks from the repo
sudo -u cdedb git config --local core.hooksPath .githooks
# insert po-git-handlers
sudo -u cdedb tee -a /cdedb2/.git/config <<EOF

[diff "podiff"]
        textconv = i18n/git-diff-filter-po.sh
[merge "pomerge"]
        name = Gettext merge driver
        driver = i18n/git-merge-po.sh %O %A %B
[pull]
        rebase = merges
EOF
# add cdedb to python path
mkdir -p /usr/local/lib/python3.11/dist-packages
sudo ln -s /cdedb2/cdedb/ /usr/local/lib/python3.11/dist-packages/cdedb

echo ""
echo "Create local config files..."
echo "--------------------------------------------"

# set the configpath to the default value
# we use the default configurationpath, so no need to set CDEDB_CONFIGPATH

# move the defaultconfig to the right place
install -D /media/cdrom0/localconfig.py "$(python3 -m cdedb config default-configpath)"
chown cdedb:cdedb "$(python3 -m cdedb config default-configpath)"
# make it world-readable, since it contains no secret data
chmod 644 "$(python3 -m cdedb config default-configpath)"

# create default (and public) secrets config
cat >"$(python3 -m cdedb config get SECRETS_CONFIGPATH)" <<EOF
#!/usr/bin/env python3
#
# This is the default file for the SecretsConfig. On development and offline instances,
# the config defaults are used so there is nothing to protect here and this file is
# world-readable.
#
# NEVER EVER USE THIS FILE WITH THE CURRENT PERMISSIONS IN PRODUCTION!!!
#
# Instead, create an own file, add the overwrites for your passwords (which should mean
# overwriting ALL options available) and add the following line to your config.py:
#
# SECRETS_CONFIGPATH = pathlib.Path("/path/to/your/secrets_config.py")
#
# Additionally, we recommend to shrink the permissions for that file:
#
# sudo chown www-cde:www-cde /path/to/your/secrets_config.py
# sudo chmod 640 /path/to/your/secrets_config.py
#
EOF
chown cdedb:cdedb "$(python3 -m cdedb config get SECRETS_CONFIGPATH)"
chmod 644 "$(python3 -m cdedb config get SECRETS_CONFIGPATH)"

# set the mailman htpasswd
cp /media/cdrom0/mailman-htpasswd /etc/cdedb-mailman-htpasswd
chown www-cde:www-cde /etc/cdedb-mailman-htpasswd
chmod 640 /etc/cdedb-mailman-htpasswd

echo ""
echo "Build documentation and translations..."
echo "--------------------------------------------"

# build the documentation
sudo -u cdedb make doc
# build the i18n files
sudo -u cdedb make i18n-compile

echo ""
echo "Creating storage directory for uploads..."
echo "--------------------------------------------"

# Create the storage dir itself. Ensure that www-cde owns everything.
python3 -m cdedb filesystem --owner www-cde storage create

echo ""
echo "Setting up dummy ldap because cyclic dependency..."
echo "--------------------------------------------"
# copy the systemd service file to the right place
cp /media/cdrom0/cde-ldap-dummy.service /etc/systemd/system/cde-ldap.service

echo ""
echo "Setting up the database..."
echo "--------------------------------------------"

# This is a bit heavy-handed on stopping/restarting stuff to debug some obscure hangs
systemctl stop pgbouncer
cp /media/cdrom0/postgresql.conf /etc/postgresql/15/main/
cp /media/cdrom0/pg_hba.conf /etc/postgresql/15/main/

systemctl restart postgresql
sleep 10

# First create the nobody account with its own database, but no other
# rights. This enables us to connect to postgres at any point. Take care to
# use the same database creation invocation as is used for the real dbs.
sudo -u postgres psql <<-EOSQL
    CREATE USER nobody PASSWORD 'nobody';
    CREATE DATABASE nobody WITH OWNER = nobody TEMPLATE = template0 ENCODING = 'UTF8';
    ALTER DATABASE nobody SET datestyle TO 'ISO, YMD';
EOSQL
python3 -m cdedb db create-users
python3 -m cdedb db create

systemctl stop pgbouncer

cp /media/cdrom0/pgbouncer.ini /etc/pgbouncer/
cp /media/cdrom0/pgbouncer_users.txt /etc/pgbouncer/userlist.txt
chmod 640 /etc/pgbouncer/userlist.txt
chown postgres:postgres /etc/pgbouncer/userlist.txt

cp /media/cdrom0/pgbouncer /etc/default/

systemctl start pgbouncer

# finally insert all the sample data
sudo -u cdedb make sample-data

echo ""
echo "Create central directory for log files..."
echo "--------------------------------------------"

# Create the log directory. Ensure that www-cde owns everything.
python3 -m cdedb filesystem --owner www-cde log create

echo ""
echo "Setting up ldap..."
echo "--------------------------------------------"
# copy the systemd service file to the right place
cp /media/cdrom0/cde-ldap.service /etc/systemd/system/
# create a separate service file for the test suite, with the right configpath
cp /media/cdrom0/cde-ldap.service /etc/systemd/system/cde-ldap-test.service
# ensure the tests is accessible via python path, since config.test_ldap.py performs imports
sed -i -r -e "s|Environment=CDEDB_CONFIGPATH=/etc/cdedb/config.py|Environment=CDEDB_CONFIGPATH=/cdedb2/tests/config/test_ldap.py\nEnvironment=PYTHONPATH=/cdedb2/|g" /etc/systemd/system/cde-ldap-test.service

# add the self-signed certificate to the trusted ldap certificates
# (note the previous step in stage2)
echo "TLS_CACERT    /etc/ldap/certs/ldap.pem" >> /etc/ldap/ldap.conf

systemctl restart cde-ldap

echo ""
echo "Set up the apache2..."
echo "--------------------------------------------"

for i in proxy_http ssl headers authnz_ldap; do
    a2enmod $i
done;

a2dissite 000-default

cp /media/cdrom0/cdedb-site.conf /etc/apache2/sites-available
cp /media/cdrom0/index.html /var/www/html/
chown www-data:www-data /var/www/html/index.html
ln -s ../mods-available/http2.conf
ln -s ../mods-available/http2.load
a2ensite cdedb-site

echo "" > /etc/apache2/ports.conf

systemctl restart apache2

echo ""
echo "Set up the gunicorn..."
echo "--------------------------------------------"

cp /media/cdrom0/cdedb-app.service /etc/systemd/system/
cp /media/cdrom0/cdedb-app.socket /etc/systemd/system/
systemctl enable --now cdedb-app.socket

echo ""
echo "Set up the fail2ban..."
echo "--------------------------------------------"

cp /media/cdrom0/fail2ban-filter-cdedb-login.conf \
   /etc/fail2ban/filter.d/cdedb-login.conf
cp /media/cdrom0/fail2ban-filter-cdedb-password-reset.conf \
   /etc/fail2ban/filter.d/cdedb-password-reset.conf
cp /media/cdrom0/fail2ban-filter-cdedb-sessionkey.conf \
   /etc/fail2ban/filter.d/cdedb-sessionkey.conf
cp /media/cdrom0/fail2ban-filter-cdedb-apitoken.conf \
   /etc/fail2ban/filter.d/cdedb-apitoken.conf
cp /media/cdrom0/jail.local /etc/fail2ban/

if [ -e /media/cdrom0/vdi ]; then

    echo ""
    echo "cdedb - sandbox system: STAGE VDI"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo ""
    echo "Adjusting grub.cfg..."
    echo "--------------------------------------------"

    sed -i -e 's=/dev/vda1=/dev/sda1=g' /boot/grub/grub.cfg

    echo ""
    echo "Adjusting /etc/network/interfaces..."
    echo "--------------------------------------------"

    sed -i -e 's=\bens3\b=enp0s3=g' /etc/network/interfaces

fi


echo ""
echo "Set up the template renderer..."
echo "--------------------------------------------"

cd /home/cdedb
sudo -u cdedb git clone ssh://gitea@tracker.cde-ev.de:20009/orgas/cde_template_renderer_v3.git \
    || sudo -u cdedb git clone ssh://gitea@10.9.0.2:63332//orgas/cde_template_renderer_v3.git
sudo -u cdedb cp /media/cdrom0/refresh_template_renderer_data.py .
chmod +x refresh_template_renderer_data.py

echo ""
echo "Disable auto-build init..."
echo "--------------------------------------------"

cat >/etc/rc.local <<EOF
#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
exit 0
EOF

echo ""
echo "Wait for stuff to settle..."
echo "--------------------------------------------"

sleep 5
sync

echo ""
echo "Shrink image size..."
echo "--------------------------------------------"

dd if=/dev/zero of=/tmp/ZERO || echo 'Error ignored'
sync
sleep 1
rm -f /tmp/ZERO

## Finally, use reboot (together with -no-reboot of qemu) to stop the machine
## with the finalised image

echo ""
echo ""
echo ""
echo "Done. Will reboot..."

( sleep 2; reboot ) &
