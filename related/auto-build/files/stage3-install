#!/bin/bash
set -e

echo ""
echo "cdedb - sandbox system: STAGE 3"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""
echo "Getting the system up to date..."
echo "--------------------------------------------"

cd /
sleep 3

apt-get -y update
apt-get -y upgrade
apt-get -y clean

echo ""
echo "Getting a copy of the cdedb sources..."
echo "--------------------------------------------"

mkdir /cdedb2
chown cdedb:cdedb /cdedb2
# the following is a bit hacky, but for the actual autobuild we have to try
# another location
sudo -u cdedb git clone ssh://gitea@tracker.cde-ev.de:20009/cdedb/cdedb2.git /cdedb2 || sudo -u cdedb git clone ssh://gitea@10.9.0.2:63332/cdedb/cdedb2.git /cdedb2
cd /cdedb2
# correct upstream URL after auto-build
sudo -u cdedb git remote set-url origin ssh://gitea@tracker.cde-ev.de:20009/cdedb/cdedb2.git
# insert po-git-handlers
sudo -u cdedb echo '' >> /cdedb2/.git/config
sudo -u cdedb echo '[diff "podiff"]' >> /cdedb2/.git/config
sudo -u cdedb echo '        textconv = i18n/git-diff-filter-po.sh' >> /cdedb2/.git/config
sudo -u cdedb echo '[merge "pomerge"]' >> /cdedb2/.git/config
sudo -u cdedb echo '        name = Gettext merge driver' >> /cdedb2/.git/config
sudo -u cdedb echo '        driver = i18n/git-merge-po.sh %O %A %B' >> /cdedb2/.git/config
sudo -u cdedb echo '[pull]' >> /cdedb2/.git/config
sudo -u cdedb echo '        rebase = merges' >> /cdedb2/.git/config
sudo -u cdedb echo '' >> /cdedb2/.git/info/attributes
sudo -u cdedb echo '*.po diff=podiff merge=pomerge' >> /cdedb2/.git/info/attributes
sudo -u cdedb echo '*.pot diff=podiff merge=pomerge' >> /cdedb2/.git/info/attributes
# build the documentation
sudo -u cdedb make doc
# build the i18n files
sudo -u cdedb make i18n-compile

echo ""
echo "Creating storage directory for uploads..."
echo "--------------------------------------------"

mkdir /var/lib/cdedb/
mkdir /var/lib/cdedb/foto/
mkdir /var/lib/cdedb/minor_form/
mkdir /var/lib/cdedb/ballot_result/
mkdir /var/lib/cdedb/assembly_attachment/
mkdir /var/lib/cdedb/mailman_templates/
chown --recursive www-data:www-data /var/lib/cdedb

echo ""
echo "Setting up the database..."
echo "--------------------------------------------"

# This is a bit heavy-handed on stopping/restarting stuff to debug some obscure hangs
systemctl stop pgbouncer
cp /cdedb2/related/auto-build/files/stage3/postgresql.conf /etc/postgresql/11/main/
cp /cdedb2/related/auto-build/files/stage3/pg_hba.conf /etc/postgresql/11/main/

systemctl restart postgresql
sleep 10

# First create the nobody account with its own database, but no other
# rights. This enables us to connect to postgres at any point. Take care to
# use the same database creation invocation as is used for the real dbs.
sudo -u postgres psql -U postgres -c \
     "CREATE USER nobody PASSWORD 'nobody'"
sudo -u postgres psql -U postgres -c \
     "CREATE DATABASE nobody WITH OWNER = nobody TEMPLATE = template0 ENCODING = 'UTF8'"
sudo -u postgres psql -U postgres -c \
     "ALTER DATABASE nobody SET datestyle TO 'ISO, YMD'"
make sql

systemctl stop pgbouncer

cp /cdedb2/related/auto-build/files/stage3/pgbouncer.ini /etc/pgbouncer/
cp /cdedb2/related/pgbouncer_users.txt /etc/pgbouncer/userlist.txt
chmod 640 /etc/pgbouncer/userlist.txt
chown postgres:postgres /etc/pgbouncer/userlist.txt

cp /cdedb2/related/auto-build/files/stage3/pgbouncer /etc/default/

systemctl start pgbouncer

echo ""
echo "Create local config files..."
echo "--------------------------------------------"

cp /cdedb2/related/auto-build/files/stage3/localconfig.py /cdedb2/cdedb/
chown cdedb:cdedb /cdedb2/cdedb/localconfig.py
chmod 644 /cdedb2/cdedb/localconfig.py
cp /cdedb2/related/auto-build/files/stage3/applicationconfig.py \
   /etc/cdedb-application-config.py
cp /cdedb2/related/auto-build/files/stage3/mailman-htpasswd \
   /etc/cdedb-mailman-htpasswd
chown www-data:www-data /etc/cdedb-application-config.py \
      /etc/cdedb-mailman-htpasswd
chmod 640 /etc/cdedb-application-config.py /etc/cdedb-mailman-htpasswd

echo ""
echo "Create central directory for log files..."
echo "--------------------------------------------"

mkdir -p /log
chown www-data:www-data /log

echo ""
echo "Set up the apache2..."
echo "--------------------------------------------"

for i in ssl wsgi headers; do
    a2enmod $i
done;

a2dissite 000-default

cp /cdedb2/related/auto-build/files/stage3/cdedb-site.conf /etc/apache2/sites-available
cp /cdedb2/related/auto-build/files/stage3/index.html /var/www/html/
chown www-data:www-data /var/www/html/index.html
a2ensite cdedb-site

echo "" > /etc/apache2/ports.conf

systemctl restart apache2

echo ""
echo "Set up the fail2ban..."
echo "--------------------------------------------"

cp /cdedb2/related/auto-build/files/stage3/fail2ban-filter-cdedb-login.conf \
   /etc/fail2ban/filter.d/cdedb-login.conf
cp /cdedb2/related/auto-build/files/stage3/fail2ban-filter-cdedb-sessionkey.conf \
   /etc/fail2ban/filter.d/cdedb-sessionkey.conf
cp /cdedb2/related/auto-build/files/stage3/fail2ban-filter-cdedb-apitoken.conf \
   /etc/fail2ban/filter.d/cdedb-apitoken.conf
cp /cdedb2/related/auto-build/files/stage3/jail.local /etc/fail2ban/

if [ -e /media/cdrom0/vdi ]; then

    echo ""
    echo "cdedb - sandbox system: STAGE VDI"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo ""
    echo "Adjusting grup.cfg..."
    echo "--------------------------------------------"

    sed -i -e 's=/dev/vda1=/dev/sda1=g' /boot/grub/grub.cfg

    echo ""
    echo "Adjusting /etc/network/interfaces..."
    echo "--------------------------------------------"

    sed -i -e 's=\bens3\b=enp0s3=g' /etc/network/interfaces

fi


echo ""
echo "Set up the template renderer..."
echo "--------------------------------------------"

cd /home/cdedb
sudo -u cdedb git clone ssh://gitea@tracker.cde-ev.de:20009/orgas/cde_template_renderer_v3.git \
    || sudo -u cdedb git clone ssh://gitea@10.9.0.2:63332//orgas/cde_template_renderer_v3.git
sudo -u cdedb cp /cdedb2/related/auto-build/files/stage3/refresh_template_renderer_data.py .
chmod +x refresh_template_renderer_data.py

echo ""
echo "Disable auto-build init..."
echo "--------------------------------------------"

cat >/etc/rc.local <<EOF
#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
exit 0
EOF

echo ""
echo "Wait for stuff to settle..."
echo "--------------------------------------------"

sleep 5
sync

echo ""
echo "Shrink image size..."
echo "--------------------------------------------"

dd if=/dev/zero of=/tmp/ZERO || echo 'Error ignored'
sync
sleep 1
rm -f /tmp/ZERO

## Finally, use reboot (together with -no-reboot of qemu) to stop the machine
## with the finalised image

echo ""
echo ""
echo ""
echo "Done. Will reboot..."

( sleep 2; reboot ) &
