{% set sidenav_active = "core_admins" %}
{% extends "web/core/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% block title %}
    {% trans %}
        Admin Overview
    {% endtrans %}
{% endblock %}
{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("core/view_admins"), gettext("Admin Overview"), active="True") }}
{% endblock %}
{% block content %}
    <p>
        {% trans %}
        	On this page you can see all admins who have access to your data.
        {% endtrans %}
    </p>

    {# Everyone can see meta admins #}
   {{ util.h(n_("Meta-Admins")) }}
    <div class="p">
        {% trans %}
            Meta-Admins may modify admin privileges of other users based on a
            four-eye principle. One Meta-Admin may initiate a change, another has to
            approve that change.
        {% endtrans %}
    </div>
    <div id="meta" class="row">
        {{ slice_admins(admins["meta"]) }}
    </div>

    {# Everyone can see coreadmins #}
   {{ util.h(n_("Core-Admins")) }}
    <div class="p">
        {% trans %}
            Core-Admins may view and edit any other user account.
            They may also approve account requests for all realms and they may
            approve pending changes of data fields needing review (address, birthday and name).
        {% endtrans %}
    </div>
    <div id="core" class="row">
        {{ slice_admins(admins["core"]) }}
    </div>

    {% if "cde" in user.roles %}
       {{ util.h(n_("CdE-Admins")) }}
        <div class="p">
            {% trans %}
                CdE-Admins may create, view and edit CdE-Users.
                They may also manage past events that are displayed on profiles.
            {% endtrans %}
        </div>
        <div id="cde" class="row">
            {{ slice_admins(admins["cde"]) }}
        </div>
    {% endif %}

    {% if "member" in user.roles %}
       {{ util.h(n_("Finance-Admins")) }}
        <div class="p">
            {% trans %}
                Finance-Admins may manage direct debit authorizations and membership fee transactions.
                They also handle semester management, i.e. the sending of payment notifications, as well
                as the removal of inactive members and the updating of balances.
            {% endtrans %}
        </div>
        <div id="finance" class="row">
            {{ slice_admins(admins["finance"]) }}
        </div>
    {% endif %}

    {% if "event" in user.roles %}
       {{ util.h(n_("Event-Admins")) }}
        <div class="p">
            {% trans %}
                Event-Admins may create DB-organized events and add and remove orgas to these events.
                They can also access the configuration as well as all registration data of these events.
                Event-Admins may create and manage Event-Users, i.e. users with access to the event realm but not the CdE realm.
                This includes the approval of account requests.
                They may manage and create event related mailinglists.
            {% endtrans %}
        </div>
        <div id="event" class="row">
            {{ slice_admins(admins["event"]) }}
        </div>
    {% endif %}

    {% if "ml" in user.roles %}
       {{ util.h(n_("Mailinglist-Admins")) }}
        <div class="p">
            {% trans %}
                Mailinglist-Admins may manage and create all types of mailinglists.
                They may create, manage and approve requests for Mailinglist-Users, i.e. users that may only access mailinglists.
            {% endtrans %}
        </div>
        <div id="ml" class="row">
            {{ slice_admins(admins["ml"]) }}
        </div>

       {{ util.h(n_("CdElokal-Admins")) }}
        <div class="p">
            {% trans %}
                CdElokal-Admins may manage and create CdElokal mailinglists.
                They do not automatically have access to any user management, like creating and managing accounts.
            {% endtrans %}
        </div>
        <div id="cdelokal" class="row">
            {{ slice_admins(admins["cdelokal"]) }}
        </div>
    {% endif %}

    {% if "assembly" in user.roles %}
       {{ util.h(n_("Assembly-Admins")) }}
        <div class="p">
            {% trans %}
                Assembly-Admins may create and manage assemblies and ballots.
                They may create and manage Assembly-Users, i.e. users with access to assemblies, that are not CdE members.
                They may also add these users as participants of assemblies.
            {% endtrans %}
        </div>
        <div id="assembly" class="row">
            {{ slice_admins(admins["assembly"]) }}
        </div>
    {% endif %}

    {% if "cde" in user.roles %}
       {{ util.h(n_("Auditors")) }}
        <div class="p">
            {% trans %}
                Auditors may view all logs, in particular those related to finance administration,
                i.e. the documentation of membership fees.
            {% endtrans %}
        </div>
        <div id="auditor" class="row">
            {{ slice_admins(admins["auditor"]) }}
        </div>
    {% endif %}

{% endblock %}

{% macro slice_admins(list) %}
    {% set col_width = 4 if list|length > 10 else (6 if list|length > 5 else 12) %}
    {% for sublist in list | slice(3 if list|length > 10 else (2 if list|length > 5 else 1)) %}
        <div class="col-sm-{{ col_width }}">
            <ul class="nosp slim">
                {% for admin in sublist %}
                    <li>{{ util.persona_anchor(personas[admin], given_and_display_names=True) }}</li>
                {% endfor %}
            </ul>
        </div>
    {% endfor %}
{% endmacro %}
