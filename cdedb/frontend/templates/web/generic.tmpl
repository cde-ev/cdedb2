{# This contains generic pages. Currently these are those for managing users. #}

{% import "web/util.tmpl" as util with context %}

{% macro create_user(realm) %}
    <form action="{{ cdedblink('{}/create_user'.format(realm))|e }}" method="POST" id="newuserform"
      class="form-horizontal">
        <h4 class="heading-underline">{{ gettext("Personal Information") }}</h4>
        {{ util.form_input_text(name="title", label=gettext("Title")) }}
        {{ util.form_input_text(name="given_names", label=gettext("Given Names")) }}
        {{ util.form_input_text(name="family_name", label=gettext("Family Name")) }}
        {% if realm == "cde" %}
            {{ util.form_input_text(name="birth_name", label=gettext("Birth Name")) }}
        {% endif %}
        {{ util.form_input_text(name="name_supplement", label=gettext("Name Affix")) }}
        {{ util.form_input_text(name="display_name", label=gettext("First Given Name")) }}
        {% if realm == "cde" %}
            {{ util.form_input_textarea(name="specialisation", label=gettext("Specialisation")) }}
            {{ util.form_input_textarea(name="affiliation", label=gettext("School, University, …")) }}
            {{ util.form_input_textarea(name="timeline", label=gettext("Year(s) of Graduation")) }}
            {{ util.form_input_textarea(name="interests", label=gettext("Interests")) }}
            {{ util.form_input_textarea(name="free_form", label=gettext("Miscellaneous"), rows="5") }}
        {% endif %}
        {% if realm in ("cde", "event") %}
            {{ util.form_input_select(name="gender", entries=enums['Genders']|enum_entries(processing=gettext),
                                      label=gettext("Gender"), defaultvalue=enums['Genders'].not_specified.value) }}
            {{ util.form_input_text(name="birthday", label=gettext("Birthday"), type="date", placeholder="YYYY-MM-DD") }}
        {% endif %}

        <h4 class="heading-underline">{{ gettext("Contact Information") }}</h4>
        {{ util.form_input_text(name="username", label=gettext("E-Mail")) }}
        {% if realm in ("cde", "event") %}
            {{ util.form_input_text(name="telephone", label=gettext("Phone")) }}
            {{ util.form_input_text(name="mobile", label=gettext("Mobilephone")) }}
        {% endif %}
        {% if realm == "cde" %}
            {{ util.form_input_text(name="weblink", label=gettext("WWW")) }}
        {% endif %}

        {% if realm in ("cde", "event") %}
            <h4 class="heading-underline">{% trans -%}Address{%- endtrans %}</h4>
            {{ util.form_input_text(name="address", label=gettext("Street")) }}
            {{ util.form_input_text(name="address_supplement", label=gettext("Address Supplement")) }}
            {{ util.form_input_text(name="postal_code", label=gettext("Zipcode")) }}
            {{ util.form_input_text(name="location", label=gettext("City")) }}
            {{ util.form_input_text(name="country", label=gettext("Country")) }}
        {% endif %}
        {% if realm == "cde" %}
            <h4 class="heading-underline">{% trans -%}Second Address{%- endtrans %}</h4>
            {{ util.form_input_text(name="address2", label=gettext("Street")) }}
            {{ util.form_input_text(name="address_supplement2", label=gettext("Address Supplement")) }}
            {{ util.form_input_text(name="postal_code2", label=gettext("Zipcode")) }}
            {{ util.form_input_text(name="location2", label=gettext("City")) }}
            {{ util.form_input_text(name="country2", label=gettext("Country")) }}
        {% endif %}

        <h4 class="heading-underline">{% trans -%}Account{%- endtrans %}</h4>
        {% if realm == "cde" %}
            {{ util.form_input_checkbox(name="is_member", label=gettext("CdE-Member"),
                                   anid="input_checkbox_is_member") }}
            {{ util.form_input_checkbox(name="is_searchable", label=gettext("Searchable"),
                                   anid="input_checkbox_is_searchable") }}
            {{ util.form_input_checkbox(name="trial_member", label=gettext("Trial Member"),
                                       anid="input_checkbox_trial_member") }}
            {{ util.form_input_checkbox(name="bub_search", label=gettext("Searchable for BuB"), anid="input_checkbox_bub_search") }}
        {% endif %}
        {{ util.form_input_textarea(name="notes", label=gettext("Notes"), rows="7",
                                    info=gettext("Supports reStructuredText")) }}


        {{ util.form_input_submit(value=gettext("Create User"), cancellink=cdedblink("{}/user_search".format(realm))) }}
    </form>
    <script type="text/javascript">
        $('#newuserform').cdedbProtectChanges();
    </script>
{% endmacro %}

{% macro genesis(realm) %}
    <p>{{ gettext("Hello %(given_names)s,")|
            format(given_names=case['given_names']) }},</p>

    <p>
        {% trans -%}
            To create Your CdE-Database Account, enter Your data into this form.
            Then You can set up Your password. Your Account will be activated shortly.
        {%- endtrans %}
    </p>

    <form action="{{ cdedblink('{}/genesis'.format(realm))|e }}" method="POST" id="newuserform" class="form-horizontal">
        {{ util.input_hidden(name="case_id") }}
        {{ util.input_hidden(name="secret") }}

        <h4 class="heading-underline">{% trans -%}Personal Information{%- endtrans %}</h4>
        {{ util.form_input_text(name="title", label=gettext("Title"), info=gettext("Prof., Dr., etc.")) }}
        {{ util.form_input_static(label=gettext("Given Names"), value=case['given_names']) }}
        {{ util.form_input_static(label=gettesxt("Family Name"), value=case['family_name']) }}
        {{ util.form_input_text(name="name_supplement", label=gettext("Name Affix")) }}
        {{ util.form_input_text(name="display_name", label=gettext("First Given Name"), info=gettext("What do people call you?")) }}
        {% if realm == "event" %}
            {{ util.form_input_text(name="birthday", label=gettext("Birthday"), type="date", placeholder="YYYY-MM-DD") }}
            {{ util.form_input_select(name="gender", entries=enums['Genders']|enum_entries(processing=gettext),
                                      label=gettext("Gender")) }}
        {% endif %}

        <h4 class="heading-underline">{% trans -%}Contact Information{%- endtrans %}</h4>
        {{ util.form_input_static(label=gettext("E-Mail"), value=case['username']) }}
        {% if realm == "event" %}
            {{ util.form_input_text(name="telephone", label=gettext("Phone"), placeholder="+49 (0000) 000000") }}
            {{ util.form_input_text(name="mobile", label=gettext("Mobilephone"), placeholder="+49 (000) 0000000") }}

            <h4 class="heading-underline">{% trans -%}Address{%- endtrans %}</h4>
            {{ util.form_input_text(name="address", label=gettext("Street")) }}
            {{ util.form_input_text(name="address_supplement", label=gettext("Address Supplement")) }}
            {{ util.form_input_text(name="postal_code", label=gettext("Zipcode")) }}
            {{ util.form_input_text(name="location", label=gettext("City")) }}
            {{ util.form_input_text(name="country", label=gettext("Country")) }}
        {% endif %}
        {{ util.form_input_submit(value=gettext("Create Account"), cancellink=cdedblink('core/index')) }}
    </form>
{% endmacro %}

{% macro user_search(realm, info="") %}
    <div class="row">
        <div class="col-md-4">
            <div class="p button-par">
                {{ util.href(cdedblink("{}/create_user".format(realm)), gettext("Create User"),
                        icon="plus", aclass="btn btn-success btn-sm") }}
            </div>
            {% if info %}
                <p class="text-muted">{{ util.make_icon('info-sign') }} {{ info|e }}</p>
            {% endif %}
        </div>
        <div class="col-md-8">
            {{ place_default_queries("{}/user_search".format(realm), default_queries) }}
        </div>
    </div>

    {{ user_search_mask(realm) }}

    {% if values['is_search'] %}
        <h3>{% trans -%}Result{%- endtrans %} [{{ result|length|e }}]</h3>
        {{ user_search_result(result, realm) }}
    {% endif %}
{% endmacro %}


{% macro user_search_mask(realm, selection_blacklist=[]) %}
    {% with TITLES = {
        "fulltext": gettext("Fulltext"),
        "personas.id": gettext("ID"),
        "username": gettext("E-Mail"),
        "is_active": gettext("Active Account"),
        "family_name": gettext("Family Name"),
        "birth_name": gettext("Birth Name"),
        "given_names": gettext("Given Names"),
        "display_name": gettext("First Given Name"),
        "title": gettext("Title"),
        "name_supplement": gettext("Name Affix"),
        "gender": gettext("Gender"),
        "birthday": gettext("Birthday"),
        "telephone": gettext("Phone"),
        "mobile": gettext("Mobilephone"),
        "address": gettext("Address"),
        "address_supplement": gettext("Address Supplement"),
        "postal_code": gettext("ZIP"),
        "location": gettext("City"),
        "country": gettext("Country"),
        "address2": gettext("Address (2)"),
        "address_supplement2": gettext("Address Supplement (2)"),
        "postal_code2": gettext("ZIP (2)"),
        "location2": gettext("City (2)"),
        "country2": gettext("Country (2)"),
        "weblink": gettext("WWW"),
        "specialisation": gettext("Specialisation"),
        "affiliation": gettext("School, University, …"),
        "timeline": gettext("Year(s) of Graduation"),
        "interests": gettext("Interests"),
        "free_form": gettext("Miscellaneous"),
        "pevent_id": gettext("Past Event"),
        "pcourse_id": gettext("Past Course"),
        "balance": gettext("Membership-Fee Balance"),
        "decided_search": gettext("Searchability Decided"),
        "trial_member": gettext("Trial Member"),
        "bub_search": gettext("Searchable for BuB"),
        "notes": gettext("Admin-Notes"),
        'is_member': gettext("CdE-Member"),
        'is_searchable': gettext("Searchable"),
        'is_ml_realm': gettext("Realm") + ": " + gettext("Mailinglists"),
        'is_event_realm': gettext("Realm") + ": " + gettext("Events"),
        'is_assembly_realm': gettext("Realm") + ": " + gettext("Assemblies"),
        'is_cde_realm': gettext("Realm") + ": " + gettext("cde_realm"),
        'is_ml_admin': gettext("Admin") + ": " + gettext("Mailinglists"),
        'is_event_admin': gettext("Admin") + ": " + gettext("Events"),
        'is_assembly_admin': gettext("Admin") + ": " + gettext("Assemblies"),
        'is_cde_admin': gettext("Admin") + ": " + gettext("cde_realm"),
        'is_core_admin': gettext("Admin") + ": " + gettext("Core"),
        'is_admin': gettext("Admin") + ": " + gettext("Super"),
    } %}

            {% if realm == "archived" %}
                {% set target=cdedblink('core/archived_user_search') %}
            {% else %}
                {% set target=cdedblink('{}/user_search'.format(realm)) %}
            {% endif %}
            {{ format_query(spec, TITLES, choices, target, selection_blacklist=selection_blacklist) }}

    {% endwith %}
{% endmacro %}

{% macro user_search_result(result, realm) %}
    {# warning: titles will not be escaped! #}
    {% with TITLES = {
        "fulltext": gettext("Fulltext"),
        "personas.id": gettext("ID"),
        "username": gettext("E-Mail"),
        "is_active": gettext("Active Account"),
        "family_name": gettext("Family Name"),
        "birth_name": gettext("Birth Name"),
        "given_names": gettext("Given Names"),
        "display_name": gettext("First Given Name"),
        "title": gettext("Title"),
        "name_supplement": gettext("Name Affix"),
        "gender": gettext("Gender"),
        "birthday": gettext("Birthday"),
        "telephone": gettext("Phone"),
        "mobile": gettext("Mobilephone"),
        "address": gettext("Address"),
        "address_supplement": gettext("Address Supplement"),
        "postal_code": gettext("ZIP"),
        "location": gettext("City"),
        "country": gettext("Country"),
        "address2": gettext("Address (2)"),
        "address_supplement2": gettext("Address Supplement (2)"),
        "postal_code2": gettext("ZIP (2)"),
        "location2": gettext("City (2)"),
        "country2": gettext("Country (2)"),
        "weblink": gettext("WWW"),
        "specialisation": gettext("Specialisation"),
        "affiliation": gettext("School, University, …"),
        "timeline": gettext("Year(s) of Graduation"),
        "interests": gettext("Interests"),
        "free_form": gettext("Miscellaneous"),
        "pevent_id": gettext("Past Event"),
        "pcourse_id": gettext("Past Course"),
        "balance": gettext("Membership-Fee Balance"),
        "decided_search": gettext("Searchability Decided"),
        "trial_member": gettext("Trial Member"),
        "bub_search": gettext("Searchable for BuB"),
        "notes": gettext("Admin-Notes"),
        'is_member': gettext("CdE-Member"),
        'is_searchable': gettext("Searchable"),
        'is_ml_realm': util.make_icon('envelope', title=gettext("Realm") + ": " + gettext("Mailinglists")),
        'is_event_realm': util.make_icon('blackboard', title=gettext("Realm") + ": " + gettext("Events")),
        'is_assembly_realm': util.make_icon('bullhorn', title=gettext("Realm") + ": " + gettext("Assemblies")),
        'is_cde_realm': util.make_icon('education', title=gettext("Realm") + ": " + gettext("cde_realm")),
        'is_ml_admin': "Admin " + util.make_icon('envelope', title=gettext("Admin") + ": " + gettext("Mailinglists")),
        'is_event_admin': "Admin " + util.make_icon('blackboard', title=gettext("Admin") + ": " + gettext("Events")),
        'is_assembly_admin': "Admin " + util.make_icon('bullhorn', title=gettext("Admin") + ": " + gettext("Assemblies")),
        'is_cde_admin': "Admin " + util.make_icon('education', title=gettext("Admin") + ": " + gettext("cde_realm")),
        'is_core_admin': "Admin " + util.make_icon('user', title=gettext("Admin") + ": " + gettext("Core")),
        'is_admin': "Admin " + util.make_icon('wrench', title=gettext("Admin") + ": " + gettext("Super")),
    } %}

        {{ display_query_result(result, query, TITLES, choices) }}
    {% endwith %}
{% endmacro %}




{% macro format_query(spec, titles, choices, target, output_selection=True, selection_blacklist=[]) %}
    <form action="{{ target|e }}" method="GET" id="queryform" aria-labelledby="qf_title">
        {{ util.input_hidden(name="is_search", value=True) }}
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title" id="qf_title">{{ util.make_icon('search') }} {% trans -%}Search Mask{%- endtrans %}</h3>

                <!-- Tabs to chose between NonJS- and JS-form -->
                <ul class="nav nav-tabs softhide" role="tablist" id="qf_tablist">
                    <li role="presentation" class="active">
                        <a href="#tab_qf_nojs" data-toggle="tab" aria-controls="tab_qf_nojs" role="tab">
                            {{ util.make_icon('list') }} {% trans -%}Tabular{%- endtrans %}
                        </a>
                    </li>
                    <li role="presentation">
                        <a href="#tab_qf_js" data-toggle="tab" aria-controls="tab_qf_js" role="tab" id="tab_link_qf_js">
                            {{ util.make_icon('flash') }} {% trans -%}Magic{%- endtrans %}
                        </a>
                    </li>
                </ul>
            </div>
            <div class="panel-body">
                <div class="tab-content" id="queryform_tabcontent">

                    <!-- Non-JS form -->
                    <div class="tab-pane active row" role="tabpanel" id="tab_qf_nojs">
                        <div class="col-lg-7">
                            <table class="query-form-cols table table-superdense">
                            <thead>
                                <tr>
                                    <th>{{ util.make_icon('eye-open', title=gettext("show field")) }}</th>
                                    <th>{% trans -%}Fields{%- endtrans %}</th>
                                    <th colspan="2">{% trans -%}Filter{%- endtrans %}</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for field in spec %}
                                    <tr class="query_field {% if field in errors %}errorInput{% endif %}
                                               {% if field == query_mod.QUERY_PRIMARIES[query.scope] %}id-field{% endif %}"
                                            data-type="{{ spec[field]|e }}" data-id="{{ field|e }}">
                                        <td>
                                            {# multi-fields are not reliably selectable, so we disable selection #}
                                            {% if ',' not in field and field not in selection_blacklist %}
                                                {% with name = "qsel_{}".format(field) %}
                                                    {% if output_selection %}
                                                        {{ util.input_checkbox(name, aclass='outputSelector',
                                                                value=True,
                                                                arialabel=gettext("show {}")
                                                                          .format(titles.get(field, field)|e)) }}
                                                    {% else %}
                                                        {{ util.input_hidden(name, value=True) }}
                                                    {% endif %}
                                                {% endwith %}
                                            {% endif %}
                                        </td>
                                        <td class="name">{{ titles.get(field, field)|e }}</td>
                                        <td>
                                            {% with name = "qop_{}".format(field) %}
                                                {% with theid = "qop_{}".format(field) %}
                                                    {#- jinja does not support list comprehension ... #}
                                                    {%- set myentries = [] %}
                                                    {%- for op in query_mod.VALID_QUERY_OPERATORS[spec[field]]
                                                            if field not in choices
                                                                or op in query_mod.SELECTION_VALUE_OPERATORS %}
                                                        {%- do myentries.append((op.value,
                                                            gettext(op.value|enum(enums.QueryOperators))))|e %}
                                                    {%- endfor %}
                                                    {{ util.input_select(name, entries=myentries, nulloption="",
                                                            aclass='form-control input-sm filter-op', anid=theid,
                                                            arialabel=gettext("filter operator for {}")
                                                                      .format(titles.get(field, field)|e)) }}
                                                {% endwith %}
                                            {% endwith %}
                                        </td>
                                        <td {% if field in errors %}class="has-error"{% endif %}>
                                            {% with name = "qval_{}".format(field) %}
                                                {% if spec[field] == 'bool' %}
                                                    {# Boolean fields are the only ones that don't need a text input field,
                                                       for none of their filter operators. So we can provide a select box
                                                       for none-javascript users. #}
                                                    {{ util.input_select(name, anid="qinput_{}".format(field),
                                                            aclass='form-control input-sm filter-value',
                                                            entries=(('',''),(True, gettext("Yes")),(False, gettext("No"))),
                                                            arialabel=gettext("compare value for {}")
                                                                      .format(titles.get(field, field)|e)) }}
                                                {% else %}
                                                    {{ util.input_text(name, anid="qinput_{}".format(field),
                                                            aclass='form-control input-sm filter-value',
                                                            arialabel=gettext("compare value for {}")
                                                                      .format(titles.get(field, field)|e)) }}
                                                {% endif %}
                                                {{ util.output_errors(field) }}
                                            {% endwith %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                            </table>
                        </div>
                        <div class="col-lg-5">
                            <table class="query-form-sort table table-superdense">
                            <thead>
                                <tr><th colspan="3">Sortierung</th></tr>
                            </thead>
                            <tbody>
                                {% for title, name in (("1.", "qord_primary"), ("2.", "qord_secondary"),
                                                       ("3.", "qord_tertiary"))%}
                                    <tr class="query_sort">
                                        <td> {{ title|e }} </td>
                                        <td>
                                            {#- jinja does not support list comprehension ... #}
                                            {%- set myentries = [] %}
                                            {%- for field in spec if ',' not in field %}
                                                {%- do myentries.append((field, titles.get(field,field)))|e %}
                                            {%- endfor %}
                                            {{ util.input_select(name, entries=myentries, nulloption="",
                                                                 aclass="form-control input-sm sort-field",
                                                                 arialabel=gettext("{} sort key").format(title)) }}
                                        </td>
                                        <td>
                                            {{ util.input_select(name + "_ascending", defaultvalue=True,
                                                                 aclass="form-control input-sm sort-order",
                                                                 entries=((True, "A→Z"), (False, "Z→A")),
                                                                 arialabel=gettext("{} sort order").format(title)) }}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                            </table>
                        </div>
                    </div>


                    <!-- JS Form -->
                    <div class="tab-pane" role="tabpanel" id="tab_qf_js">
                        <h4 class="filter-title nosp">{{ util.make_icon('filter') }} {% trans -%}Filter{%- endtrans %}</h4>
                        <ul class="list-group list-group-condensed list-group-hover filterfield-list"></ul>
                        <div class="input-group has-success queryform-add">
                            <span class="input-group-addon">{{ util.make_icon('plus', title=gettext("add filter")) }}</span>
                            <select class="form-control input-sm input-slim addfilter"
                                    aria-label="{% trans -%}field to filter on{%- endtrans %}"></select>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <h4 class="filter-title">
                                    {{ util.make_icon('eye-open') }} {% trans -%}Displayed Fields{%- endtrans %}</h4>
                                <p class="viewfield-list"></p>
                                <div class="input-group has-success">
                                    <span class="input-group-addon">
                                        {{ util.make_icon('plus', title=gettext("add displayed field")) }}
                                    </span>
                                    <select class="form-control input-sm addviewfield"
                                            aria-label="{% trans -%}field to add{%- endtrans %}"></select>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <h4 class="filter-title">
                                    {{ util.make_icon('sort-by-alphabet') }} {% trans -%}Sorting{%- endtrans %}</h4>
                                <ul class="list-group list-group-condensed list-group-hover sortfield-list"></ul>
                                <div class="input-group has-success queryform-add">
                                    <span class="input-group-addon">
                                        {{ util.make_icon('plus', title=gettext("add sort key")) }}
                                    </span>
                                    <select class="form-control input-sm addsortfield"
                                            aria-label="{% trans -%}sort key to add{%- endtrans %}"></select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <p class="pull-right nosp">
                    <button type="submit" class="btn btn-primary">
                        {{ util.make_icon('search') }} {% trans -%}Search{%- endtrans %}</button>
                    <span class="btn-group">
                        <button type="submit" class="btn btn-default" name="download" value="csv">
                            {{ util.make_icon('download') }} {% trans -%}CSV file{%- endtrans %}
                        </button>
                        <button type="submit" class="btn btn-default" name="download" value="json">
                            {{ util.make_icon('download') }} {% trans -%}JSON file{%- endtrans %}
                        </button>
                    </span>
                </p>
                {{ util.output_errors('query', wrapper=True) }}
                <script type="text/javascript">
                    {
                        $('#qf_tablist').css('display', 'block');
                        var $qf = $('#queryform');
                        $qf.cdedbQueryForm({"choices" : {{ choices_lists|json }},
                                            "labels": {{ {'add_field': gettext('– add displayed field –'),
                                                          'add_filter': gettext('– add filter –'),
                                                          'add_sort': gettext('– add sort key –'),
                                                          'del_filter': gettext("remove filter"),
                                                          'del_field': gettext("remove field"),
                                                          'del_sort': gettext("remove sort key"),
                                                          'filter_op': gettext("filter operation"),
                                                          'filter_val': gettext("compare value"),
                                                          'filter_range_start': gettext("range start"),
                                                          'filter_range_end': gettext("range end"),
                                                          'filter_range_through': gettext("&ensp;and&ensp;"),
                                                          'filter_vals': gettext("compare values"),
                                                          'sort_order': gettext("sort order"),
                                                          'range_values': gettext("<value>,<value>,…"),
                                                          'range_ids': gettext("<id>,<id>,…")}|json }}});
                        $('#tab_link_qf_js')
                            .on('show.bs.tab', function() {
                                $qf.data('cdedbQueryForm').initFromForm();
                            })
                            .tab('show');
                    }
                </script>
            </div>
        </div>
    </form>
{% endmacro %}

{% macro place_default_queries(target, queries) %}
    {% if queries %}
        {% call util.bootstrap_panel(title=gettext("Default Queries")) %}
            <div class="row">
                {% for list in queries | sort | slice(2) %}
                <div class="col-sm-6">
                    <ul>
                        {% for query in list %}
                            <li>
                                {{ util.href(cdedblink(target, queries[query]|querytoparams),
                                        gettext(query), aclass="default-query") }}
                            </li>
                        {% endfor %}
                    </ul>
                </div>
                {% endfor %}
            </div>
        {% endcall %}
        <script type="text/javascript">
            $('.default-query').each(function(){
                var url = $(this).attr('href');
                var $link = $('<a></a>', {'href':'#',
                                          'title':'{% trans -%}show in search mask{%- endtrans %}',
                                          'aria-label':'{% trans -%}show in search mask{%- endtrans %}',
                                          'class': 'btn btn-default btn-xs'})
                    .append($('<span></span>',{'class':'glyphicon glyphicon-eye-open', 'aria-hidden':'true'}))
                    .click(function(){
                        $('#queryform').data('cdedbQueryForm').queryFromURL(url);
                        return false;
                    });
                $(this).after($link).after(' ');
            });
        </script>
    {% endif %}
{% endmacro %}

{% macro display_query_result(result, query, titles, choices) %}
    {% if not result|length %}
        {% trans -%}No search results!{%- endtrans %}
    {% else %}
        <script type="text/javascript">
            $(function(){
                $('.ls-list').cdedbListSelect();
                $('#btn-select-all').click(function(){
                    $('#query-result').data('listSelect').selectAll();
                });
                $('#btn-select-none').click(function(){
                    $('#query-result').data('listSelect').selectNone();
                });
                $('#btn-select-swap').click(function(){
                    $('#query-result').data('listSelect').invertSelection();
                });
                $('#btn-select-filter').click(function(){
                    var list = [];
                    $('#query-result').find('.ls-selected').each(function(){
                        list.push($(this).attr('data-id'));
                    });
                    if (list.length == 0)
                        return;
                    $('#queryform').data('cdedbQueryForm').setIdFilter(list);
                    $('#queryform').submit();
                });
                $('#result-container').cdedbMoveToWidePage($('.btn-trigger-wide'));
                $('#js-button-group').css('display', 'block');
            });
        </script>
        <div class="p softhide" id="js-button-group">
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-info" title="{% trans -%}select all{%- endtrans %}" id="btn-select-all">
                    {{ util.make_icon('check') }} <span class="hidden-xs">{% trans -%}all{%- endtrans %}</span>
                </button>
                <button type="button" class="btn btn-sm btn-info" title="{% trans -%}select none{%- endtrans %}" id="btn-select-none">
                    {{ util.make_icon('unchecked') }} <span class="hidden-xs">{% trans -%}none{%- endtrans %}</span>
                </button>
                <button type="button" class="btn btn-sm btn-info" title="{% trans -%}invert selection{%- endtrans %}" id="btn-select-swap">
                    {{ util.make_icon('expand') }} <span class="hidden-xs">{% trans -%}invert{%- endtrans %}</span>
                </button>
            </div>
            <button type="button" class="btn btn-sm btn-info" title="{% trans -%}filter for selected rows{%- endtrans %}"
                    id="btn-select-filter">
                {{ util.make_icon('share') }} <span class="hidden-xs">{% trans -%}selected only{%- endtrans %}</span>
            </button>
            <button type="button" class="btn btn-sm btn-trigger-wide" title="{% trans -%}widen results table{%- endtrans %}">
                {{ util.make_icon('resize-horizontal', arialabel=gettext("widen results table")) }}
            </button>
        </div>
        <div class="table-container" id="result-container">
        <table class="table table-condensed table-hover ls-list" id="query-result">
            <thead>
                <tr>
                    <th></th>
                    <th></th>
                    {% for csvfield in query.fields_of_interest %}
                        {% for field in csvfield.split(',') %}
                            <th>
                                {{ titles.get(field, field) }}
                                {% if values.get("qop_{}".format(field)) %}
                                    <span class="label label-default" title="{% trans -%}filtered column{%- endtrans %}">
                                        {{ util.make_icon('filter') }}
                                    </span>
                                {% endif %}
                                {% if values.get("qord_primary") == field or
                                        values.get("qord_secondary") == field or
                                        values.get("qord_tertiary") == field %}
                                    <span class="label label-default" title="{% trans -%}sorted column{%- endtrans %}">
                                        {{ util.make_icon('sort-by-alphabet') }}
                                    </span>
                                {% endif %}
                            </th>
                        {% endfor %}
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
            {% set primary_field = query_mod.QUERY_PRIMARIES[query.scope].split('.')[-1] %}
            {% for row in result %}
                {% set outerloopindex = loop.index0 %}
                <tr class="ls-item" data-id="{{ row[primary_field]|e }}">
                    <td>
                        {{ util.input_checkbox("row_{}".format(outerloopindex), anid="row_{}".format(outerloopindex),
                                               aclass="rowSelector", arialabel=gettext("row {}").format(outerloopindex)) }}
                    </td>
                    <td>
                        {%- if query.scope == 'qview_registration' -%}
                            {{ util.href(cdedblink("event/show_registration", {'registration_id': row[primary_field]}),
                                         gettext('Details'), icon='user', aclass='btn btn-xs btn-info') }}
                        {%- else -%}
                            {{ util.href(show_user_link(row[primary_field]),
                                         gettext('Profile'), icon='user', aclass='btn btn-xs btn-info') }}
                        {%- endif -%}
                    </td>
                    {% for csvfield in query.fields_of_interest %}
                        {% for field in csvfield.split(',') %}
                            {# NOTE that we split off any possible schema specification since they're not preserved
                                    by the query #}
                            {% with afield = field.split('.')[-1] %}
                                <td data-col="{{ afield|e }}">  {# The data-col attribute is mainly used for testing #}
                                    {% if field in ("personas.id", "persona.id")
                                            or (query.scope == "qview_persona" and field == "id") %}
                                        <span class="nowrap">{{ row[afield]|cdedbid }}</span>
                                    {% elif query.spec[csvfield] == "date" %}
                                        {{ row.get(afield, None)|date(lang=lang) }}
                                    {% elif query.spec[csvfield] == "datetime" %}
                                        {{ row.get(afield, None)|datetime(lang=lang) }}
                                    {% elif query.spec[csvfield] == "bool" %}
                                        {{ util.deko_checkbox(row.get(afield, None), titles=(gettext('false'),
                                                                                             gettext('true'))) }}
                                    {% else %}
                                        {{ choices.get(csvfield, {}).get(row.get(afield),
                                                                         row.get(afield, "UNDEFINED"))|e }}
                                    {% endif %}
                                </td>
                            {% endwith %}
                        {% endfor %}
                    {% endfor %}
                </tr>
            {% endfor %}
            </tbody>
        </table>
        </div>
    {% endif %}
{% endmacro %}