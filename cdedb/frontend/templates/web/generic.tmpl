{# This contains generic pages. Currently these are those for managing users. #}

{% import "web/util.tmpl" as util with context %}

{% macro create_user(realm) %}
    <form action="{{ cdedblink('{}/create_user'.format(realm)) }}" method="POST" id="newuserform"
      class="form-horizontal">
        {{ util.anti_csrf_token('{}/create_user'.format(realm)) }}
        <h4 class="heading-underline">{{ gettext("Personal Information") }}</h4>
        {{ util.form_input_text(name="title", label=gettext("Title_[[of a persona]]")) }}
        {{ util.form_input_text(name="given_names", label=gettext("Given Names")) }}
        {{ util.form_input_text(name="family_name", label=gettext("Family Name")) }}
        {% if realm == "cde" %}
            {{ util.form_input_text(name="birth_name", label=gettext("Birth Name")) }}
        {% endif %}
        {{ util.form_input_text(name="name_supplement", label=gettext("Name Affix")) }}
        {{ util.form_input_text(name="display_name", label=gettext("Known as (Forename)")) }}
        {% if realm == "cde" %}
            {{ util.form_input_textarea(name="specialisation", label=gettext("Specialisation")) }}
            {{ util.form_input_textarea(name="affiliation", label=gettext("School, University, â€¦")) }}
            {{ util.form_input_textarea(name="timeline", label=gettext("Year(s) of Graduation")) }}
            {{ util.form_input_textarea(name="interests", label=gettext("Interests")) }}
            {{ util.form_input_textarea(name="free_form", label=gettext("Miscellaneous"), rows="5") }}
        {% endif %}
        {% if realm in ("cde", "event") %}
            {{ util.form_input_select(name="gender", entries=enums['Genders']|enum_entries(processing=gettext),
                                      label=gettext("Gender"), defaultvalue=enums['Genders'].not_specified.value) }}
            {{ util.form_input_text(name="birthday", label=gettext("Birthday"), type="date", placeholder="YYYY-MM-DD") }}
        {% endif %}

        <h4 class="heading-underline">{{ gettext("Contact Information") }}</h4>
        {{ util.form_input_text(name="username", label=gettext("E-Mail")) }}
        {% if realm in ("cde", "event") %}
            {{ util.form_input_text(name="telephone", label=gettext("Phone"), type="tel") }}
            {{ util.form_input_text(name="mobile", label=gettext("Mobile Phone"), type="tel") }}
        {% endif %}
        {% if realm == "cde" %}
            {{ util.form_input_text(name="weblink", label=gettext("WWW"), markdown=True) }}
        {% endif %}

        {% if realm in ("cde", "event") %}
            <h4 class="heading-underline">{% trans %}Address{% endtrans %}</h4>
            {{ util.form_input_text(name="address", label=gettext("Street, Nr.")) }}
            {{ util.form_input_text(name="address_supplement", label=gettext("Address Supplement")) }}
            {{ util.form_input_text(name="postal_code", label=gettext("Zipcode")) }}
            {{ util.form_input_text(name="location", label=gettext("City")) }}
            {{ util.form_input_select(name="country", label=gettext("Country"), entries=COUNTRY_CODES,
                                      defaultvalue=DEFAULT_COUNTRY) }}
        {% endif %}
        {% if realm == "cde" %}
            <h4 class="heading-underline">{% trans %}Second Address{% endtrans %}</h4>
            {{ util.form_input_text(name="address2", label=gettext("Street, Nr.")) }}
            {{ util.form_input_text(name="address_supplement2", label=gettext("Address Supplement")) }}
            {{ util.form_input_text(name="postal_code2", label=gettext("Zipcode")) }}
            {{ util.form_input_text(name="location2", label=gettext("City")) }}
            {{ util.form_input_select(name="country2", label=gettext("Country"), entries=COUNTRY_CODES,
                                      defaultvalue=DEFAULT_COUNTRY) }}
        {% endif %}

        <h4 class="heading-underline">{% trans %}Account & Membership{% endtrans %}</h4>
        {% if realm == "cde" %}
            {{ util.form_input_checkbox(name="is_member", label=gettext("CdE-Member"),
                                   anid="input_checkbox_is_member") }}
            {{ util.form_input_checkbox(name="trial_member", label=gettext("Trial Member"),
                                       anid="input_checkbox_trial_member") }}
            {{ util.form_input_checkbox(name="is_searchable", label=gettext("Searchable"),
                                   anid="input_checkbox_is_searchable") }}
            {{ util.form_input_checkbox(name="paper_expuls", label=gettext("Printed exPuls"),
                                   anid="input_checkbox_is_searchable") }}
        {% endif %}
        {{ util.form_input_textarea(name="notes", label=gettext("Notes"), rows="7", markdown=True) }}


        {{ util.form_input_submit(label=gettext("Create User"), cancellink=cdedblink("{}/user_search".format(realm))) }}
    </form>
    <script nonce="{{ csp_nonce }}">
        $('#newuserform').cdedbProtectChanges();
    </script>
{% endmacro %}

{% macro user_search(scope, result, query, info="") %}
    <div class="row">
        <div class="col-md-4">
            <div class="p button-par">
                {% if not scope.includes_archived() %}
                    {{ util.href(cdedblink("{}/create_user_form".format(scope.realm)), gettext("Create User"),
                            icon="plus", aclass="btn btn-success btn-sm") }}
                    {% if scope.realm == 'cde' %}
                        {{ util.href(cdedblink('cde/batch_admission'), gettext("Batch Admission"), icon="file-import",
                                 aclass="btn btn-default btn-sm") }}
                    {% endif %}
                {% endif %}
            </div>
            {% if info %}
                <p class="text-muted">{{ util.make_icon('info-circle') }} {{ info }}</p>
            {% endif %}
        </div>
        <div class="col-md-8">
            {{ place_default_queries(scope, default_queries) }}
        </div>
    </div>

    {{ user_search_mask(scope, selection_blacklist=("pevent_id", "pcourse_id")) }}

    {% if values['is_search'] %}
        <h3 id="query-results">{% trans %}Result{% endtrans %} [{{ result|length }}]</h3>
        {{ display_query_result(result, query) }}
    {% endif %}
{% endmacro %}


{% macro user_search_mask(scope, selection_blacklist=[]) %}
    {{ format_query(scope, spec, selection_blacklist=selection_blacklist,
                    selection_default=('personas.id', 'username', 'family_name', 'given_names')) }}
{% endmacro %}


{% macro format_query(scope, spec, output_selection=True, selection_blacklist=[], selection_default=[]) %}
    <form action="{{ cdedblink(scope.get_target()) }}#query-results" method="GET" id="queryform" aria-labelledby="qf_title">
        {{ util.input_hidden(name="is_search", value=True) }}
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title" id="qf_title">{{ util.make_icon('search') }} {% trans %}Search Mask{% endtrans %}</h3>

                <!-- Tabs to chose between NonJS- and JS-form -->
                <ul class="nav nav-tabs softhide" role="tablist" id="qf_tablist">
                    <li role="presentation" class="active">
                        <a href="#tab_qf_nojs" data-toggle="tab" aria-controls="tab_qf_nojs" role="tab" id="tab_link_qf_nojs">
                            {{ util.make_icon('list') }} {% trans %}Tabular{% endtrans %}
                        </a>
                    </li>
                    <li role="presentation">
                        <a href="#tab_qf_js" data-toggle="tab" aria-controls="tab_qf_js" role="tab" id="tab_link_qf_js">
                            {{ util.make_icon('magic') }} {% trans %}Magic{% endtrans %}
                        </a>
                    </li>
                </ul>
            </div>
            <div class="panel-body">
                <div class="tab-content" id="queryform_tabcontent">

                    <!-- Non-JS form -->
                    <div class="tab-pane active row" role="tabpanel" id="tab_qf_nojs">
                        <div class="col-lg-7">
                            <table class="query-form-cols table table-superdense">
                            <thead>
                                <tr>
                                    <th>{{ util.make_icon('eye', title=gettext("show field")) }}</th>
                                    <th>{% trans %}Fields{% endtrans %}</th>
                                    <th colspan="2">{% trans %}Filter{% endtrans %}</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for field in spec %}
                                    <tr class="query_field {% if field in errors %}errorInput{% endif %}
                                               {% if field == scope.get_primary_key() %}id-field{% endif %}"
                                            data-type="{{ spec[field].type }}" data-id="{{ field }}">
                                        <td>
                                            {# multi-fields are not reliably selectable, so we disable selection #}
                                            {% if ',' not in field and field not in selection_blacklist %}
                                                {% with name = "qsel_{}".format(field) %}
                                                    {% if output_selection %}
                                                        {{ util.input_checkbox(name, aclass='outputSelector',
                                                                value=True,
                                                                defaultvalue=('True' if field in selection_default
                                                                        and not values['is_search'] else ''),
                                                                arialabel=gettext("show %s")|format(spec[field].get_title(gettext))) }}
                                                    {% else %}
                                                        {{ util.input_hidden(name, value=True) }}
                                                    {% endif %}
                                                {% endwith %}
                                            {% endif %}
                                        </td>
                                        <td class="name">{{ spec[field].get_title(gettext) }}</td>
                                        <td>
                                            {% with name = "qop_{}".format(field) %}
                                                {% with theid = "qop_{}".format(field) %}
                                                    {#- jinja does not support list comprehension ... #}
                                                    {%- set myentries = [] %}
                                                    {%- for op in query_mod.VALID_QUERY_OPERATORS[spec[field].type]
                                                            if not choices or field not in choices
                                                                or op in query_mod.SELECTION_VALUE_OPERATORS %}
                                                        {%- do myentries.append((op.value,
                                                            gettext(op.value|enum(enums.QueryOperators)))) %}
                                                    {%- endfor %}
                                                    {{ util.input_select(name, entries=myentries, nulloption=nbsp,
                                                            aclass='form-control input-sm filter-op', anid=theid,
                                                            arialabel=(gettext("filter operator for %s")
                                                                       |format(spec[field].get_title(gettext)))) }}
                                                {% endwith %}
                                            {% endwith %}
                                        </td>
                                        <td {% if field in errors %}class="has-error"{% endif %}>
                                            {% with name = "qval_{}".format(field) %}
                                                {% if spec[field].type == 'bool' %}
                                                    {# Boolean fields are the only ones that don't need a text input field,
                                                       for none of their filter operators. So we can provide a select box
                                                       for non-javascript users. #}
                                                    {{ util.input_select(name, anid="qinput_{}".format(field),
                                                            aclass='form-control input-sm filter-value',
                                                            entries=(('',''),(True, gettext("Yes")),(False, gettext("No"))),
                                                            arialabel=(gettext("compare value for %s")
                                                                       |format(spec[field].get_title(gettext)))) }}
                                                {% else %}
                                                    {{ util.input_text(name, anid="qinput_{}".format(field),
                                                            aclass='form-control input-sm filter-value',
                                                            arialabel=(gettext("compare value for %s")
                                                                       |format(spec[field].get_title(gettext)))) }}
                                                {% endif %}
                                                {{ util.output_errors(field) }}
                                            {% endwith %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                            </table>
                        </div>
                        <div class="col-lg-5">
                            <table class="query-form-sort table table-superdense">
                            <thead>
                                <tr>
                                    <th>{{ util.make_icon('sort-alpha-down', title=gettext("Sorting")) }}</th>
                                    <th colspan="2">{% trans %}Sorting{% endtrans %}</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for title, name in (("1.", "qord_primary"), ("2.", "qord_secondary"),
                                                       ("3.", "qord_tertiary"))%}
                                    <tr class="query_sort">
                                        <td> {{ title }} </td>
                                        <td>
                                            {#- jinja does not support list comprehension ... #}
                                            {%- set myentries = [] %}
                                            {%- for field in spec if ',' not in field %}
                                                {%- do myentries.append((field, spec[field].get_title(gettext))) %}
                                            {%- endfor %}
                                            {{ util.input_select(name, entries=myentries, nulloption=nbsp,
                                                                 aclass="form-control input-sm sort-field",
                                                                 arialabel=gettext("%s sort key")|format(title)) }}
                                        </td>
                                        <td>
                                            {{ util.input_select(name + "_ascending", defaultvalue=True,
                                                                 aclass="form-control input-sm sort-order",
                                                                 entries=((True, "Aâ†’Z"), (False, "Zâ†’A")),
                                                                 arialabel=gettext("%s sort order")|format(title)) }}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                            </table>
                        </div>
                    </div>


                    <!-- JS Form -->
                    <div class="tab-pane" role="tabpanel" id="tab_qf_js">
                        <h4 class="filter-title nosp">{{ util.make_icon('filter') }} {% trans %}Filter{% endtrans %}</h4>
                        <ul class="list-group list-group-condensed list-group-hover filterfield-list"></ul>
                        <div class="input-group has-success queryform-add">
                            <span class="input-group-addon">{{ util.make_icon('plus', title=gettext("add filter")) }}</span>
                            <select class="form-control input-sm addfilter"
                                    aria-label="{% trans %}field to filter on{% endtrans %}"></select>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <h4 class="filter-title">
                                    {{ util.make_icon('eye') }} {% trans %}Displayed Fields{% endtrans %}</h4>
                                <p class="viewfield-list"></p>
                                <div class="input-group has-success">
                                    <span class="input-group-addon">
                                        {{ util.make_icon('plus', title=gettext("add displayed field")) }}
                                    </span>
                                    <select class="form-control input-sm addviewfield"
                                            aria-label="{% trans %}field to add{% endtrans %}"></select>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <h4 class="filter-title">
                                    {{ util.make_icon('sort-alpha-down') }} {% trans %}Sorting{% endtrans %}</h4>
                                <ul class="list-group list-group-condensed list-group-hover sortfield-list"></ul>
                                <div class="input-group has-success queryform-add">
                                    <span class="input-group-addon">
                                        {{ util.make_icon('plus', title=gettext("add sort key")) }}
                                    </span>
                                    <select class="form-control input-sm addsortfield"
                                            aria-label="{% trans %}sort key to add{% endtrans %}"></select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <h4 class="filter-title">
                            {{ util.make_icon('search') }} {% trans %}Search{% endtrans %}</h4>
                        <div class="">
                            {{ util.input_submit(label=gettext("Search"), icon="search") }}
                            <div class="btn-group">
                                {{ util.input_submit(label=gettext("CSV file"), value="csv", name="download", icon="download",
                                    aclass="btn btn-default") }}
                                {{ util.input_submit(label=gettext("JSON file"), value="json", name="download", icon="download",
                                    aclass="btn btn-default") }}
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        {% if scope.supports_storing() %}
                            <h4 class="filter-title">
                                {{ util.make_icon('far fa-bookmark') }} {% trans %}Store query{% endtrans %}</h4>
                            <div class="input-group">
                                {{ util.input_text("query_name", placeholder=gettext("query name")) }}
                                {{ util.input_hidden("query_scope", scope) }}
                                <div class="input-group-btn">
                                    {{ util.input_submit(gettext("Save"), name="store_query", formmethod="POST",
                                        value=encode_anti_csrf("event/store_event_query", "store_query",
                                                               persona_id=user.persona_id),
                                        formaction=cdedblink("event/store_event_query"),
                                        icon="far fa-bookmark", aclass="btn btn-primary") }}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
                {{ util.output_errors('query', wrapper=True) }}
                <script nonce="{{ csp_nonce }}">
                    {
                        $('#qf_tablist').css('display', 'block');
                        var $qf = $('#queryform');
                        $qf.cdedbQueryForm({"choices" : {{ choices_lists|tojson }},
                                            "labels": {{ {'add_field': gettext('â€“ add displayed field â€“'),
                                                          'add_filter': gettext('â€“ add filter â€“'),
                                                          'add_sort': gettext('â€“ add sort key â€“'),
                                                          'del_filter': gettext("remove filter"),
                                                          'del_field': gettext("remove field"),
                                                          'del_sort': gettext("remove sort key"),
                                                          'filter_op': gettext("filter operation"),
                                                          'filter_val': gettext("compare value"),
                                                          'filter_range_start': gettext("range start"),
                                                          'filter_range_end': gettext("range end"),
                                                          'filter_range_through': gettext("&ensp;and&ensp;"),
                                                          'filter_vals': gettext("compare values"),
                                                          'sort_order': gettext("sort order"),
                                                          'range_values': gettext("<value>,<value>,â€¦"),
                                                          'range_ids': gettext("<id>,<id>,â€¦"),
                                                          'true': gettext("true"),
                                                          'false': gettext("false"),
                                                         }|tojson }}});
                        $('#tab_link_qf_js')
                            .on('show.bs.tab', function() {
                                $qf.data('cdedbQueryForm').initFromForm();
                            })
                            .on('shown.bs.tab', function() {
                                eraseCookie('queryform_nojs');
                            });
                        $('#tab_link_qf_nojs')
                            .on('shown.bs.tab',
                                function(){createCookie('queryform_nojs','true',10*365);});
                        /* Show the tab */
                        if (!readCookie('queryform_nojs')) {
                            $('#tab_link_qf_js').tab('show');
                        }
                    }
                </script>
            </div>
        </div>
    </form>
{% endmacro %}

{% macro place_default_queries(scope, queries) %}
    {% if queries %}
        {% call util.bootstrap_panel(title=gettext("Default Queries"), anid="default_queries_container") %}
            <div class="row">
                {% for list in queries | sort | slice(2) %}
                <div class="col-sm-6">
                    <ul>
                        {% for query_name in list %}
                            {% with query = queries[query_name] -%}
                                <li>
                                    {{ util.href(cdedblink(scope.get_target(), query.serialize_to_url()) + '#query-results',
                                            query.name if query.name else gettext(query_name), aclass="default-query") }}
                                    {% if query.query_id %}
                                        <form action="{{ cdedblink('event/delete_event_query') }}" method="post" class="display-inline" id="deletequeryform{{ query.query_id }}">
                                            {{ util.anti_csrf_token('event/delete_event_query') }}
                                            {{ util.input_hidden("query_id", value=query.query_id) }}
                                            {{ util.input_hidden("query_scope", value=query.scope) }}
                                            {{ util.input_submit(label="", aclass='btn btn-xs btn-danger', icon="trash-alt", title=gettext('Delete query')) }}
                                        </form>
                                    {% endif %}
                                </li>
                            {%- endwith %}
                        {% endfor %}
                    </ul>
                </div>
                {% endfor %}
            </div>
        {% endcall %}
        <script nonce="{{ csp_nonce }}">
            $('.default-query').each(function(){
                var url = $(this).attr('href');
                var $link = $('<a></a>', {'href':'#',
                                          'title':'{% trans %}show in search mask{% endtrans %}',
                                          'aria-label':'{% trans %}show in search mask{% endtrans %}',
                                          'class': 'btn btn-default btn-xs'})
                    .append($('<span></span>',{'class':'fas fa-eye', 'aria-hidden':'true'}))
                    .click(function(){
                        $('#queryform').data('cdedbQueryForm').queryFromURL(url);
                        return false;
                    });
                $(this).after($link).after(' ');
            });
        </script>
    {% endif %}
{% endmacro %}

{% macro display_query_result(result, query) %}
    {% if not result|length %}
        {% trans %}No search results!{% endtrans %}
    {% else %}
        <script nonce="{{ csp_nonce }}">
            $(function(){
                $('.ls-list').cdedbListSelect({
                    'callback': function () {
                        $('#label-select-num').text($(this).find('.ls-selected').length.toString());
                    }
                });
                $('#btn-select-all').click(function(){
                    $('#query-result').data('listSelect').selectAll();
                });
                $('#btn-select-none').click(function(){
                    $('#query-result').data('listSelect').selectNone();
                });
                $('#btn-select-swap').click(function(){
                    $('#query-result').data('listSelect').invertSelection();
                });
                $('#btn-select-filter').click(function(){
                    var list = [];
                    $('#query-result').find('.ls-selected').each(function(){
                        list.push($(this).attr('data-id'));
                    });
                    if (list.length == 0)
                        return;
                    $('#queryform').data('cdedbQueryForm').setIdFilter(list);
                    $('#queryform').submit();
                });
                $('#result-container').cdedbMoveToWidePage($('.btn-trigger-wide'));
                $('#js-button-group').css('display', 'block');
                $('#js-select-num').css('display', 'inline-block');
            });
        </script>
        <div class="p softhide" id="js-button-group">
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-info" title="{% trans %}select all{% endtrans %}" id="btn-select-all">
                    {{ util.make_icon('check-square') }} <span class="hidden-xs">{% trans %}all{% endtrans %}</span>
                </button>
                <button type="button" class="btn btn-sm btn-info" title="{% trans %}select none{% endtrans %}" id="btn-select-none">
                    {{ util.make_icon('square') }} <span class="hidden-xs">{% trans %}none{% endtrans %}</span>
                </button>
                <button type="button" class="btn btn-sm btn-info" title="{% trans %}invert selection{% endtrans %}" id="btn-select-swap">
                    {{ util.make_icon('caret-square-right') }} <span class="hidden-xs">{% trans %}invert{% endtrans %}</span>
                </button>
            </div>
            <button type="button" class="btn btn-sm btn-info" title="{% trans %}filter for selected rows{% endtrans %}"
                    id="btn-select-filter">
                {{ util.make_icon('share-square') }} <span class="hidden-xs">{% trans %}selected only{% endtrans %}</span>
            </button>
            <button type="button" class="btn btn-sm btn-trigger-wide" title="{% trans %}widen results table{% endtrans %}">
                {{ util.make_icon('arrows-alt-h', arialabel=gettext("widen results table")) }}
            </button>
        </div>
        <div class="table-container" id="result-container">
        <table class="table table-condensed table-hover ls-list" id="query-result">
            <thead>
                <tr>
                    <th><span class="softhide" id="js-select-num">(<span id="label-select-num">0</span>)</span></th>
                    <th></th>
                    {% for csvfield in query.fields_of_interest %}
                        {% for field in csvfield.split(',') %}
                            <th>
                                {{ query.spec[field].get_title(gettext) }}
                                {% if values.get("qop_{}".format(field)) %}
                                    <span class="label label-default" title="{% trans %}filtered column{% endtrans %}">
                                        {{ util.make_icon('filter') }}
                                    </span>
                                {% endif %}
                                {% if values.get("qord_primary") == field or
                                        values.get("qord_secondary") == field or
                                        values.get("qord_tertiary") == field %}
                                    <span class="label label-default" title="{% trans %}sorted column{% endtrans %}">
                                        {{ util.make_icon('sort-alpha-down') }}
                                    </span>
                                {% endif %}
                            </th>
                        {% endfor %}
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
            {% set primary_field = query.scope.get_primary_key(short=True) %}
            {% set QueryScope = enums['QueryScope'] %}
            {% set ResultFormat = query_mod.QueryResultEntryFormat %}
            {% for row in result %}
                {% set outerloopindex = loop.index0 %}
                <tr class="ls-item" data-id="{{ row[primary_field] }}">
                    <td>
                        {{ util.input_checkbox("row_{}".format(outerloopindex), anid="row_{}".format(outerloopindex),
                                               aclass="rowSelector", arialabel=gettext("row %s")|format(outerloopindex)) }}
                    </td>
                    <td>
                        {%- if query.scope == QueryScope.registration -%}
                            {{ util.href(cdedblink("event/show_registration", {'registration_id': row[primary_field]}),
                                         gettext('Details'), icon='user', aclass='btn btn-xs btn-info', rel='noreferrer') }}
                        {%- elif query.scope == QueryScope.event_course -%}
                            {{ util.href(cdedblink("event/show_course", {'course_id': row[primary_field]}),
                                         gettext('Details'), icon='book', aclass='btn btn-xs btn-info', rel='noreferrer') }}
                        {%- elif query.scope == QueryScope.lodgement -%}
                            {{ util.href(cdedblink("event/show_lodgement", {'lodgement_id': row[primary_field]}),
                                         gettext('Details'), icon='home', aclass='btn btn-xs btn-info', rel='noreferrer') }}
                        {%- else -%}
                            {{ util.href(show_user_link(user, row[primary_field]),
                                         gettext('Profile'), icon='user', aclass='btn btn-xs btn-info') }}
                        {%- endif -%}
                    </td>
                    {% for csvfield in query.fields_of_interest %}
                        {% for field in csvfield.split(',') %}
                            {# NOTE that we split off any possible schema specification since they're not preserved
                                    by the query #}
                                <td data-col="{{ field }}">  {# The data-col attribute is mainly used for testing #}
                                    {% set format_spec = query.get_field_format_spec(field) %}
                                    {% set text = query.spec[field].choices.get(row.get(field), row.get(field, "UNDEFINED")) %}
                                    {% if format_spec == ResultFormat.persona %}
                                        <span class="nowrap">
                                            {% if primary_field == "personas.id" %}
                                                {{ row[field]|cdedbid }}
                                            {% else %}
                                                {{ util.href(show_user_link(user, row[field]), row[field]|cdedbid) }}
                                            {% endif %}
                                        </span>
                                    {% elif format_spec == ResultFormat.username %}
                                        {{ util.username_mailto(row) }}
                                    {% elif format_spec == ResultFormat.date %}
                                        {{ row.get(field, None)|date(lang=lang) }}
                                    {% elif format_spec == ResultFormat.datetime %}
                                        {{ row.get(field, None)|datetime(lang=lang) }}
                                    {% elif format_spec == ResultFormat.bool %}
                                        {{ util.deko_checkbox(row.get(field, None), titles=(gettext('false'),
                                                                                            gettext('true'))) }}
                                    {% elif format_spec == ResultFormat.event_course and row[field] %}
                                        {{ util.href(cdedblink("event/show_course", {'course_id': row[field]}), text) }}
                                    {% elif format_spec == ResultFormat.event_lodgement and row[field] %}
                                        {{ util.href(cdedblink("event/show_lodgement", {'lodgement_id': row[field]}), text) }}
                                    {% else %}
                                        {{ text }}
                                    {% endif %}
                                </td>
                        {% endfor %}
                    {% endfor %}
                </tr>
            {% endfor %}
            </tbody>
        </table>
        </div>
    {% endif %}
{% endmacro %}

{% macro query_button_field_set(field_association) %}
    <button type="button" class="btn btn-warning btn-sm" id="btn-set-field">
        {{ util.make_icon('edit') }} {% trans %}Set Field{% endtrans %}
    </button>
    <script nonce="{{ csp_nonce }}">
        $('#btn-set-field').click(function(){
            var list = [];
            $('#query-result').find('.ls-selected').each(function(){
                list.push($(this).attr('data-id'));
            });
            if (list.length === 0)
                return;
            location.href =
                "{{ cdedblink("event/field_set_select", {'kind': field_association.value}, magic_placeholders=['ids'])|safe }}"
                    .replace('_CDEDB_MAGIC_URL_PLACEHOLDER_0_', list.join(','));
        });
    </script>
{% endmacro %}
