{% set sidenav_active='event_registration' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% block scripts %}{{ util.cdedb_script('helper') }}{% endblock %}
{% set jshint='weak' %}
{% block title %}
    {% trans title=ambience['event']['title'] -%}
        Edit Registrations ({{ title }})
    {%- endtrans %}
{% endblock %}
{% block breadcrumb %}
{{ super() }}
{{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="blackboard") }}
{{ util.breadcrumb_link(cdedblink("event/registration_query"), gettext("Registrations")) }}
{{ util.breadcrumb_link(cdedblink("event/change_registrations_form"), gettext("Edit"), active=True) }}
{% endblock %}
{% block heading %}
    <h1 class="title">
        {% trans -%}Edit Registrations{%- endtrans %}
        <small>{{ util.make_icon('blackboard') }} {{ ambience['event']['title'] }}</small>
    </h1>
{% endblock %}

{% macro output_name(persona) %}
    {{ persona['title'] }}
    {{ persona['given_names'] }}
    {{ persona['family_name'] }}
    {{ persona['name_supplement'] }}
{% endmacro %}
{% macro form_input_optional(name='', label='', anid='', info='') %}
    <div class="form-group {% if name in errors %}has-error{% endif %}">
        {% if label %}
            <label{% if anid %} for="{{ anid }}"{% endif %} class="col-sm-4 control-label">
                {{ label }}
            </label>
        {% endif %}
        <div class="col-sm-1 text-center {% if not label %}col-sm-offset-4{% endif %}">
            <div class="checkbox" title="
                {% if label %}
                    {% trans label=label -%}
                        Overwrite '{{ label }}'
                    {%- endtrans %}
                {% else %}
                    {% trans -%}
                        Overwrite this field
                    {%- endtrans %}
                {% endif %}
            ">
                <label>
                    <input type="checkbox" name="enable_{{ name }}" value="True" class="enable-input"
                           {% if anid %}id="enable_{{ anid }}" data-input="{{ anid }}"{% endif %}
                           {% if values.get("enable_{}".format(name), False) %}checked="checked"{% endif %} />
                    <span class="sr-only">
                        {% if label %}
                            {% trans label=label -%}
                                Overwrite '{{ label }}'
                            {%- endtrans %}
                        {% else %}
                            {% trans -%}
                                Overwrite this field
                            {%- endtrans %}
                        {% endif %}
                    </span>
                </label>
            </div>
        </div>
        <div class="col-sm-7">
            {{ caller() }}
            {{ util.output_errors(name) }}
            {{ util.output_info(info) }}
        </div>
    </div>
{% endmacro %}

{% block content %}
    {{ util.output_info(gettext("All checked fields will be overwritten with the specified value in all "
                                "registrations. Fields that are equal in all registrations are already "
                                "selected.")) }}

    <form action="{{ cdedblink('event/change_registrations') }}" method="POST" id="changeregistrationform"
          class="form-horizontal">
        {{ util.anti_csrf_token('event/change_registrations') }}
        {{ util.input_hidden("reg_ids", value=registrations.keys()|join(',')) }}
        <h3 class="heading-underline">{% trans -%}Registrations{%- endtrans %}</h3>
        {% call util.form_input_general(label=gettext("Full Name"), displayerrors=False) %}
            {% for reg_id, reg in registrations|dictsort %}
                {{ util.input_static(value=output_name(personas[reg['persona_id']])) }}
            {% endfor %}
        {% endcall %}

        {% if values['enable_reg.gender'] %}
            {{ util.form_input_static(label=gettext("Gender"), value=gettext(enums['Genders'](values['reg.gender'])|string)) }}
        {% else %}
            {{ util.form_input_static(label=gettext("Gender"), value="unterschiedlich") }}
        {% endif %}

        <h3 class="heading-underline">{% trans -%}Status{%- endtrans %}</h3>
        {% call form_input_optional('reg.payment', label=gettext("Fee paid"), anid="input_reg_payment") %}
            {{ util.input_text(name="reg.payment", type="date", placeholder="YYYY-MM-DD", anid="input_reg_payment") }}
        {% endcall %}
        {% call form_input_optional('reg.parental_agreement', anid="input_reg_parental_agreement") %}
            <div class="checkbox">
                {{ util.input_checkbox(name="reg.parental_agreement", label=gettext("Parental Consent"),
                                       anid="input_reg_parental_agreement") }}
            </div>
        {% endcall %}

        {% call form_input_optional('reg.checkin', label=gettext("Checked-In"), anid="input_reg_checkin") %}
            {{ util.input_text(name="reg.checkin", type="datetime-local", placeholder="YYYY-MM-DDThh:ii",
                               anid="input_reg_checkin") }}
        {% endcall %}

        {% for part_id, part in ambience['event']['parts']|dictsort %}
            {% if ambience['event']['parts']|length > 1 %}
                <h4>{{ part['title'] }}</h4>
            {% endif %}
            {% call form_input_optional("part{}.status".format(part_id), label=gettext("Status"),
                                        anid="part{}_status".format(part_id)) %}
                {{ util.input_select(name="part{}.status".format(part_id),
                                     entries=enums['RegistrationPartStati']|enum_entries(processing=gettext),
                                     anid="part{}_status".format(part_id)) }}
            {% endcall %}

            {% call form_input_optional("part{}.lodgement_id".format(part_id), label=gettext("Lodgement"),
                                        anid="part{}_lodgement_id".format(part_id)) %}
                {{ util.input_select(name="part{}.lodgement_id".format(part_id),
                                     entries=lodgements|xdictsort('moniker')|dict_entries('id', 'moniker'), nulloption="",
                                     anid="part{}_lodgement_id".format(part_id)) }}
            {% endcall %}
            {% call form_input_optional("part{}.is_reserve".format(part_id),
                                        anid="part{}_is_reserve".format(part_id)) %}
                <div class="checkbox">
                    {{ util.input_checkbox(name="part{}.is_reserve".format(part_id), label=gettext("Uses Camping Mat"),
                                           anid="part{}_is_reserve".format(part_id)) }}
                </div>
            {% endcall %}

            {% for track_id, track in ambience['event']['tracks']|xdictsort('sortkey') if track['part_id'] == part_id %}
                {% set course_entries = courses|xdictsort('nr', pad=True)
                                        |xdict_entries('{id}', '{nr}. {shortname}', include=course_choices[track_id]) %}
                {% call form_input_optional("track{}.course_id".format(track_id),
                                            label=gettext("Course {}").format(track['title'])
                                                  if ambience['event']['tracks']|length > 1  else gettext("Course"),
                                            anid="track{}_course_id".format(track_id)) %}
                    {{ util.input_select(name="track{}.course_id".format(track_id), entries=course_entries,
                                         nulloption="", anid="track{}_course_id".format(track_id)) }}
                {% endcall %}
            {% endfor %}
        {% endfor %}

        <h3 class="heading-underline">{% trans -%}Registration Data{%- endtrans %}</h3>
        {% call form_input_optional("reg.mixed_lodging", anid="input_reg_mixed_lodging") %}
            <div class="checkbox">
                {{ util.input_checkbox(name="reg.mixed_lodging", label=gettext("Mixed Lodging"),
                                       anid="input_reg_mixed_lodging") }}
            </div>
        {% endcall %}
        {% call form_input_optional("reg.list_consent", anid="input_reg_list_consent") %}
            <div class="checkbox">
                {{ util.input_checkbox(name="reg.list_consent", anid="input_reg_list_consent",
                                       label=gettext("Participant List Consent")) }}
            </div>
        {% endcall %}
        {% for track_id, track in ambience['event']['tracks']|xdictsort('sortkey') %}
            {% set course_entries = courses|xdictsort('nr', pad=True)
                                    |xdict_entries('{id}', '{nr}. {shortname}', include=course_choices[track_id]) %}
            {% call form_input_optional("track{}.course_instructor".format(track_id),
                                        label=gettext("{}: Instructor of").format(track['title'])
                                              if ambience['event']['tracks']|length > 1  else gettext("Instructor of"),
                                        anid="input_track{}_course_instructor".format(track_id)) %}
                {{ util.input_select(name="track{}.course_instructor".format(track_id),
                                     entries=course_entries, nulloption="",
                                     anid="input_track{}_course_instructor".format(track_id)) }}
            {% endcall %}
        {% endfor %}

        {% if ambience['event']['fields']|length > 0 %}
            <h3 class="heading-underline">{% trans -%}Custom Fields{%- endtrans %}</h3>
            {% for field_id, field in ambience['event']['fields']|dictsort
                   if field['association'] == enums['FieldAssociations'].registration %}
                {% call form_input_optional("fields.{}".format(field['field_name']),
                                            anid="input_fields_{}".format(field['field_name']),
                                            label=field['field_name'] if field['kind'] != enums['FieldDatatypes'].bool else '') %}
                    {{ util.event_field_input(field, anid="input_fields_{}".format(field['field_name'])) }}
                {% endcall %}
            {% endfor %}
        {% endif %}

        {{ util.form_input_submit(value=gettext("Save"), cancellink=cdedblink("event/registration_query")) }}
    </form>
    <script type="text/javascript">
        /**
         * Update disabled state of an input field based on the value of the associated enable-checkbox.
         *
         * This must be called on the enable-checkbox at updates of its state.
         */
        var update_state = function() {
            $(this).data('controlled-input').prop('disabled', !this.checked);
        };
        /**
         * Update style classes of a form-group, to show if the field will be overwritten.
         *
         * This function should be called on the dom object of a input field (text, select, checkbox, radio button) on
         * change of the disabled state or value. It adds the classes '.has-success' and '.bg-success' to the parent
         * '.form-group' container, if the field is enabled and the value differs from the original value.
         */
        var update_style = function() {
            /* check if changed */
            var changed = false;
            if (this.checked !== undefined) {
                changed = this.checked !== this.defaultChecked;
            } else if (this.options !== undefined) {
                for (var i=0; i < this.options.length; i++) {
                    if (this.options[i].selected) {
                        changed = !this.options[i].defaultSelected;
                        break;
                    }
                }
            } else {
                changed = this.value !== this.defaultValue;
            }

            var $row = $(this).closest('.form-group');
            if (!this.disabled && (changed || $(this).data('default-empty')))
                $row.addClass('has-success bg-success');
            else
                $row.removeClass('has-success bg-success');
        };

        $('.enable-input').each(function() {
            /* get reference to controlled input DOM object */
            var $input = $('#'+$(this).attr('data-input'));
            $(this).data('controlled-input', $input);
            $input.data('default-empty', !this.defaultChecked);

            /* add event listeners */
            $input.change(update_style);
            $(this).click(update_state);
            $(this).click(function(){update_style.call($input[0])});
            update_state.call(this);
        });

        $('#changeregistrationform').cdedbProtectChanges();
    </script>
{% endblock %}
