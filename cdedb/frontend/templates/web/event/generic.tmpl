{% import "web/util.tmpl" as util with context %}
{# A macro to generate the form select fields for all course choices of a given track.

    track               The track dict of the requested track.
    all_courses         A dict containing all courses of the current event.
    course_choices      A dict containing a mapping from track to a list of ids of all choosable courses.
    show_track_titles   A bool deciding whether to print or omit the title of the track.
    track_group         Optionally the track group for which to print course choices.
#}
{% macro select_course_choice(track, all_courses, course_choices, show_track_title, track_group=none) %}

    <div id="course-choice-container-{{ track['id'] if not track_group else "group-{}".format(track_group['id'])  }}"
         class="course_choice_container">
        <h4>
            {% trans %}Course Choices{% endtrans %}
            {% if show_track_title %}
                {% trans track=(track_group or track)['title'] %}
                    for {{ track }}
                {% endtrans %}
            {% endif %}
        </h4>

        {% set course_entries = all_courses|keydictsort(EntitySorter.course)
                                           |xdict_entries('{id}', '{nr}. {title}', include=course_choices) %}
        {% if track_group %}
            {% set choice_name = "group{}.course_choice".format(track_group['id']) + "_{}" %}
            {% set instructor_name = "group{}.course_instructor".format(track_group['id']) %}
        {% else %}
            {% set choice_name = "track{}.course_choice".format(track['id']) + "_{}" %}
            {% set instructor_name = "track{}.course_instructor".format(track['id']) %}
        {% endif %}
        {% set num_choices = track['num_choices'] %}
        {% set min_choices = track['min_choices'] %}

        {% for i in range(num_choices) %}
            {{ util.form_input_select(name=choice_name.format(i), nulloption=nbsp,
                                      label=gettext("%s. Choice")|format(i + 1), entries=course_entries,
                                      info=(gettext("Optional choice") if i >= min_choices else "")) }}
        {% endfor %}

        {{ util.form_input_select(name=instructor_name, entries=course_entries,
                                  nulloption=gettext("– I am not an Instructor –"), label=gettext("Instructor"),
                                  info=gettext("If you are instructing a course, please specify which one.")) }}
    </div>
{% endmacro %}

{% macro select_all_course_choices(involved_tracks=None) %}
    {% for cco in choice_objects %}
        {% if 'constraint_type' in cco %}
            {% if cco['track_ids'] and reference_tracks[cco['id']]['num_choices'] and (
                    involved_tracks is none or involved_tracks.intersection(cco['track_ids'])) %}
                {{ select_course_choice(
                        reference_tracks[cco['id']], courses, courses_per_track_group[cco['id']],
                        show_track_title=choice_objects|length > 1, track_group=cco) }}
            {% endif %}
        {% elif cco['num_choices'] and (involved_tracks is none or cco['id'] in involved_tracks) %}
            {{ select_course_choice(
                    cco, courses, courses_per_track[cco['id']],
                    show_track_title=choice_objects|length > 1) }}
        {% endif %}
    {% endfor %}
{% endmacro %}

{# Insert general and additional fields in the registration form, including
    * lodging preference
    * Photo consent
    * Agreement to be visible in online participant list
    * custom orga fields
    * general notes field

    age                 An age class object, determining the restrictions of lodging preferences.
    reg_questionnaire   The registration questionnaire object of the current event
#}
{% macro additional_registration_choices(age, reg_questionnaire) %}

    {{ util.form_input_checkbox(name="reg.list_consent", defaultvalue='True', label=gettext("Privacy consent"), info=gettext(
            "I agree that my data, including my name, address and my email, may be sent "
            "to other participants of this event beforehand.")) }}

    {% if not age.may_mix() %}
        {{ util.input_hidden(name="reg.mixed_lodging", value=False) }}
        {{ util.form_input_static(label=gettext("Mixed Lodging"), value=gettext("Mixed Lodging not possible.")) }}
    {% else %}
        {% if age.is_minor() %}
            {% set mix_info = gettext("The selection must be compatible with the parental consent form.") %}
        {% else %}
            {% set mix_info = "" %}
        {% endif %}
        {{ util.form_input_select(name="reg.mixed_lodging", entries=(
            (True, gettext("I agree to mixed lodging.")),
            (False, gettext("I want to be lodged separated by gender."))),
            label=gettext("Mixed Lodging"), info=mix_info) }}
    {% endif %}

    {% call util.form_input_general(label=gettext("Photo consent"), displayerrors=False) %}
        <p class="nosp">
            {% trans %}
                In the context of this event, photos and recordings will be made to be used for the
                event-documentation and a CdE-internal, password protected media collection. Individual photos and
                recordings can be excluded from this by request.
            {% endtrans %}
        </p>
    {% endcall %}

    {% if reg_questionnaire %}
        <div id="registrationquestionnaire">
            {% for entry in reg_questionnaire %}
                {{ print_questionnaire_entry(entry) }}
            {% endfor %}
        </div>
    {% endif %}

    {%- if ambience["event"]["tracks"] %}
        {%- set noteslabel = gettext("Notes for Orgas and Instructors") %}
    {%- else %}
        {%- set noteslabel = gettext("Notes for Orgas") %}
    {%- endif %}
    {{ util.form_input_textarea(name="reg.notes", label=noteslabel, rows="5") }}
{% endmacro %}

{# Display the value of a custom event field.
   This is the counterpart of (form_)field_input.

    field       A dict containing all information of a custom event field.
    entry       The value of the field of the current entity.
    otherwise   Display this string if the field has no value set.
#}
{% macro display_field(field, entry, otherwise='—') %}
    {% if field['entries'] %}
        {% set hit = [] %}
        {% for value, description in field['entries'] %}
            {% if value == entry|string %}
                {% do hit.append(description) %}
            {% endif %}
        {% endfor %}
        {% if hit %}
            {{ hit[0] }}
        {% else %}
            {{ otherwise }}
        {% endif %}
    {% else %}
        {% if field['kind'] == enums['FieldDatatypes'].bool %}
            {{ util.deko_checkbox(checked=entry) }}
        {% elif field['kind'] == enums['FieldDatatypes'].date %}
            {{ entry|date(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].datetime %}
            {{ entry|datetime(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].float %}
            {{ entry|decimal(lang=lang) }}
        {% else %}
            {{ entry|linebreaks or otherwise }}
        {% endif %}
    {% endif %}
{% endmacro %}

{# Set the value of a custom event field.
   This is the counterpart of display_field.

    field       A dict containing all information of a custom event field.
    name        The name of the field, defaults to 'fields.field_name'
    text_rows   Passed to the 'rows' attribute of input_textarea
    bool_label  Special label for the field_input (not the form*!) if the field is of type bool
#}
{% macro field_input(field, name=none, readonly=False, defaultvalue='', anid=none, text_rows=3, bool_label=none) %}
    {%- set name = name or "fields.{}".format(field['field_name']) %}
    {%- set bool_label = bool_label or field['title'] %}
    {%- if field['entries'] %}
        {{- util.input_select(name=name, entries=field['entries'], nulloption=nbsp,
                              readonly=readonly, defaultvalue=defaultvalue, anid=anid, sort=False) }}
    {%- else %}
        {% set datatypes = enums['FieldDatatypes'] %}
        {%- if field['kind'] == datatypes.bool %}
            <div class="checkbox">
                {{- util.input_checkbox(name=name, readonly=readonly, defaultvalue=defaultvalue,
                                        anid=anid, label=bool_label) -}}
            </div>
        {%- elif field['kind'] == datatypes.str %}
            {% if text_rows %}
                {{- util.input_textarea(name=name, readonly=readonly, defaultvalue=defaultvalue,
                                        anid=anid, rows=text_rows) }}
            {% else %}
                {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid)  }}
            {% endif %}
        {%- elif field['kind'] == datatypes.int %}
            {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid,
                                type="number", placeholder="0") }}
        {%- elif field['kind'] == datatypes.float %}
            {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid,
                                placeholder="0.0") }}
        {%- elif field['kind'] == datatypes.date %}
            {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid,
                                type="date", placeholder="YYYY-MM-DD") }}
        {%- elif field['kind'] == datatypes.datetime %}
            {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid,
                                type="datetime-local") }}
        {%- else %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
        {%- endif %}
    {%- endif %}
{%- endmacro %}


{# Set the value of a custom event field inside a form.
   This is the counterpart of display_field.

    field       A dict containing all information of a custom event field.
    name        The name of the field, defaults to 'fields.field_name'
    force_label Enforce the presentation of the label in the surrounding form_* even if the field is of type bool
#}
{% macro form_field_input(field, name=none, label=none, info='', displayerrors=True, readonly=False,
                          defaultvalue='', anid=none, force_label=False, text_rows=3, bool_label=none) %}
    {%- set name = name or "fields.{}".format(field['field_name']) %}
    {%- set label = (none if (field['kind'] == enums['FieldDatatypes'].bool
                              and not force_label and not field['entries'])
                     else label or field['title']) %}
    {%- set anid = anid or "event-input-{}".format(name) %}
    {%- call util.form_input_general(name=name, label=label, anid=anid, small=False, info=info,
                                     displayerrors=displayerrors, horizontal=True) %}
        {{- field_input(field, name, readonly, defaultvalue, anid, text_rows, bool_label) }}
    {%- endcall %}
{%- endmacro %}


{% macro print_field_inputs(association) %}
    {% if ambience['event']['fields']|length > 0 %}
        <h3 class="heading-underline">{% trans %}Custom Fields{% endtrans %}</h3>
        {% for field_id, field in ambience['event']['fields']|keydictsort(EntitySorter.event_field)
                if field['association'] == association %}
            {{ form_field_input(field) }}
        {% else %}
            <p class="text-muted">
                {% if association == enums['FieldAssociations'].lodgement %}
                    {% trans %}No custom fields for lodgements available.{% endtrans %}
                {% elif association == enums['FieldAssociations'].course %}
                    {% trans %}No custom fields for courses available.{% endtrans %}
                {% else %}
                    {% trans %}No custom fields for registrations available.{% endtrans %}
                {% endif %}
            </p>
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro print_questionnaire_entry(entry) %}
    {# Field entry #}
    {% if entry['field_id'] %}
        {% with FIELD = ambience['event']['fields'][entry['field_id']],
                readonly = entry['readonly'] or is_locked or ambience['event']['is_archived'] %}
            <div id="questionnaire_field_entry_{{ FIELD['field_name'] }}">
                {{ form_field_input(
                        FIELD, name="fields." + FIELD['field_name'], label=entry['title'], info=entry['info'],
                        readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "",
                        text_rows=2*(entry['input_size'] or 0), bool_label=entry['title']) }}
            </div>
        {% endwith %}
    {# Text-only entry #}
    {% else %}
        {% if entry['title'] %}
            {% if entry['kind'] == enums['QuestionnaireUsages'].additional %}
                <h3 class="heading-underline">{{ entry['title'] }}</h3>
            {% else %}
                <h4 class="heading-underline">{{ entry['title'] }}</h4>
            {% endif %}
        {% endif %}
        {{ entry.get('info', '')|md }}
    {% endif %}
{% endmacro %}


{# Macro for a general questionnaire part, that can have each role in the DynamicRow workflow.
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_questionnaire_config(part_id, kind, aclass="", newrow=False) %}
    <div class="panel panel-default {{ aclass }}">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    {{ util.form_input_text(name="title_{}".format(part_id), label=gettext("Title_[[name of an entity]]"),
                                            attributes=('data-basename="title_"'|s if newrow else ''),
                                            aclass='input-title drow-input', horizontal=false) }}
                    {% set textarea_id = "input-textarea-info_{}".format(part_id) %}
                    {# This can not use form_input_textarea, since we support markdown just for text-only fields. #}
                    {%- call util.form_input_general(name="info_{}".format(part_id), label=gettext("Text"),
                                                     horizontal=false, anid=textarea_id)  %}
                        {{ util.input_textarea(name="info_{}".format(part_id), anid=textarea_id,
                                               attributes=('data-basename="info_"'|s if newrow else ''),
                                               aclass='form-control input-info drow-input') }}
                        {{ util.markdown_preview(textarea_id, "Supports Markdown for “Text-Only” fields.") }}
                    {%- endcall %}
                </div>
                <div class="col-md-6">
                    {{ util.form_input_select("field_id_{}".format(part_id), label=gettext("Query"),
                                              entries=registration_fields|keydictsort(EntitySorter.event_field)|dict_entries('id', 'field_name'),
                                              nulloption=gettext("— Only Text —"),
                                              attributes=('data-basename="field_id_"'|s if newrow else ''),
                                              aclass='input-field drow-input', horizontal=False) }}
                    {{ util.form_input_select(
                        "input_size_{}".format(part_id), label=gettext("Input Size"), entries=(
                            (0, gettext("singleline")), (1, gettext("multiline")),
                            (2, gettext("multiline") + "+"), (3, gettext("multiline") + "++")),
                        attributes=('data-basename="input_size_"'|s if newrow else ''),
                        aclass='input-inputsize drow-input', horizontal=False) }}
                    {{ util.form_input_textarea(
                        "default_value_{}".format(part_id), label=gettext("Default Value"), rows=2,
                        attributes=('data-basename="default_value_"'|s if newrow else ''),
                        aclass='input-defaultvalue drow-input', horizontal=False) }}
                    <div class="form-group row">
                        <div class="col-sm-8">
                            <div class="checkbox">
                                {{ util.input_checkbox("readonly_{}".format(part_id), label=gettext("read-only"),
                                                       attributes=('data-basename="readonly_"'|s if newrow else ''),
                                                       aclass='input-readonly drow-input',
                                                       readonly=(not values["readonly_{}".format(part_id)]
                                                                 and (kind and not kind.allow_readonly()))) }}
                                {{ util.output_errors("readonly_{}".format(part_id), wrapper=True) }}
                            </div>
                        </div>
                        <div class="col-sm-4 text-right">
                            <span class="drow-buttonspace">
                                {% if newrow %}
                                    {{ util.input_checkbox("create_{}".format(part_id), label=gettext("Add"),
                                                           attributes='data-basename="create_"'|s,
                                                           aclass='drow-indicator') }}
                                {% else %}
                                    {{ util.input_checkbox("delete_{}".format(part_id), label=gettext("Remove"),
                                                           aclass='drow-indicator') }}
                                {% endif %}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro constraint_violations_panel(severity, title=gettext("Constraint Violations"), icon='exclamation-circle', anid="constraint-violations", link_title=False) %}
    {% set caller_content = caller() %}
    {% if link_title %}
        {% set title = util.href(cdedblink("event/constraint_violations"), title, icon=icon) %}
        {% set icon = none %}
    {% endif %}
    {% call util.bootstrap_panel(
            title=title, icon=icon, anid=anid,
            aclass="panel-default" if severity <= 0 else ("panel-danger" if severity > 1 else "panel-warning")) %}
        {{ caller_content }}
    {% endcall %}
{% endmacro %}


{% macro list_mep_violations(violations, personas, link_registration=False) %}
    <ul id="mep-violations-list">
        {% for violation in violations %}
            {% set persona_name = util.persona_name(personas[violation.persona_id]) %}
            {% if link_registration %}
                {% set reg_link = util.href(cdedblink("event/show_registration", {'registration_id': violation.registration_id}), persona_name) %}
            {% else %}
                {% set reg_link = persona_name %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans reg_link=reg_link, constraint_shortname=ambience['event']['part_groups'][violation.part_group_id]['shortname'] %}
                    {{ reg_link }} is in violation of the {{ constraint_shortname }} mutually exclusive participation constraint.
                {% endtrans -%}
                {# These are presorted. #}
                {% trans parts = violation.parts_str %}
                    (Present in {{ parts }}).
                {% endtrans %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro list_mec_violations(violations, courses, link_course=False) %}
    <ul id="mec-violations-list">
        {% for violation in violations %}
            {% set course_identifier = courses[violation.course_id]['nr'] + ". " + courses[violation.course_id]['shortname'] %}
            {% if link_course %}
                {% set course_link = util.href(cdedblink("event/show_course", {'course_id': violation.course_id}), course_identifier) %}
            {% else %}
                {% set course_link = course_identifier %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans course_link=course_link, constraint_shortname=ambience['event']['part_groups'][violation.part_group_id]['shortname'] %}
                    {{ course_link }} is in violation of the {{ constraint_shortname }} mutually exclusive course constraint.
                {% endtrans -%}
                {# These are presorted. #}
                {% trans tracks = violation.tracks_str %}
                    (Taking place in {{ tracks }}).
                {% endtrans %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro list_ccs_violations(violations, personas, link_registration=False) %}
    <ul id="ccs-violations-list">
        {% for violation in violations %}
            {% set persona_name = util.persona_name(personas[violation.persona_id]) %}
            {% if link_registration %}
                {% set reg_link = util.href(cdedblink("event/show_registration", {'registration_id': violation.registration_id}), persona_name) %}
            {% else %}
                {% set reg_link = persona_name %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans reg_link=reg_link, constraint_shortname=ambience['event']['track_groups'][violation.track_group_id]['shortname'] %}
                    {{ reg_link }} is in violation of the {{ constraint_shortname }} course choice sync.
                {% endtrans -%}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}
