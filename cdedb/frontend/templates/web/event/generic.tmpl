{% import "web/util.tmpl" as util with context %}
{# A macro to generate the form select fields for all course choices of a given track.

    track           The track dict of the requested track.
    all_courses     A dict containing all courses of the current event.
    course_choices  A dict containing a mapping from track to a list of ids of all choosable courses.
#}
{% macro select_course_choice(track, all_courses, course_choices) %}

    <div id="course_choice_container-{{ track['id'] }}" class="course_choice_container" data-part="{{ track['part_id'] }}">
        <h4>
            {% trans %}Course Choices{% endtrans %}
            {% if course_choices|length > 1 %}
                {% trans track=track['title'] %}
                    for {{ track }}
                {% endtrans %}
            {% endif %}
        </h4>

        {% set course_entries = all_courses|keydictsort(EntitySorter.course)
                                           |xdict_entries('{id}', '{nr}. {title}', include=course_choices[track['id']]) %}
        {% for i in range(track['num_choices']) %}
            {{ util.form_input_select(name="course_choice{}_{}".format(track['id'], i), nulloption=nbsp,
                                      label=gettext("%s. Choice")|format(i + 1), entries=course_entries,
                                      info=(gettext("Optional choice") if i >= track['min_choices'] else "")) }}
        {% endfor %}
        {{ util.form_input_select(name="course_instructor{}".format(track['id']), entries=course_entries,
                                  nulloption=gettext("– I am not an Instructor –"), label=gettext("Instructor"),
                                  info=gettext("If you are instructing a course, please specify which one.")) }}
    </div>
{% endmacro %}


{# Insert general and additional fields in the registration form, including
    * lodging preference
    * Photo consent
    * Agreement to be visible in online participant list
    * custom orga fields
    * general notes field

    age                 An age class object, determining the restrictions of lodging preferences.
    reg_questionnaire   The registration questionnaire object of the current event
#}
{% macro additional_registration_choices(age, reg_questionnaire) %}

    {{ util.form_input_checkbox(name="list_consent", defaultvalue='True', label=gettext("Privacy consent"), info=gettext(
            "I agree that my data, including my name, address and my email, may be sent "
            "to other participants of this event beforehand.")) }}

    {% if not age.may_mix() %}
        {{ util.input_hidden(name="mixed_lodging", value=False) }}
        {{ util.form_input_static(label=gettext("Mixed Lodging"), value=gettext("Mixed Lodging not possible.")) }}
    {% else %}
        {% if age.is_minor() %}
            {% set mix_info = gettext("The selection must be compatible with the parental consent form.") %}
        {% else %}
            {% set mix_info = "" %}
        {% endif %}
        {{ util.form_input_select(name="mixed_lodging", entries=(
            (True, gettext("I agree to mixed lodging.")),
            (False, gettext("I want to be lodged separated by gender."))),
            label=gettext("Mixed Lodging"), info=mix_info) }}
    {% endif %}

    {% call util.form_input_general(label=gettext("Photo consent"), displayerrors=False) %}
        <p class="nosp">
            {% trans %}
                In the context of this event, photos and recordings will be made to be used for the
                event-documentation and a CdE-internal, password protected media collection. Individual photos and
                recordings can be excluded from this by request.
            {% endtrans %}
        </p>
    {% endcall %}

    {% if reg_questionnaire %}
        <div id="registrationquestionnaire">
            {% for entry in reg_questionnaire %}
                {{ util.print_questionnaire_entry(entry) }}
            {% endfor %}
        </div>
    {% endif %}

    {%- if ambience["event"]["tracks"] %}
        {%- set noteslabel = gettext("Notes for Orgas and Instructors") %}
    {%- else %}
        {%- set noteslabel = gettext("Notes for Orgas") %}
    {%- endif %}
    {{ util.form_input_textarea(name="notes", label=noteslabel, rows="5") }}
{% endmacro %}

{# Display the value of a custom event field.

    field       A dict containing all information of a custom event field.
    entry       The value of the field of the current entity.
#}
{% macro display_field(field, entry) %}
    {% if field['entries'] %}
        {% for value, description in field['entries'] %}
            {% if value == entry|string %}
                {{ description }}
            {% endif %}
        {% endfor %}
    {% else %}
        {% if field['kind'] == enums['FieldDatatypes'].bool %}
            {{ util.deko_checkbox(checked=entry) }}
        {% elif field['kind'] == enums['FieldDatatypes'].date %}
            {{ entry|date(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].datetime %}
            {{ entry|datetime(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].float %}
            {{ entry|decimal(lang=lang) }}
        {% else %}
            {{ entry|linebreaks }}
        {% endif %}
    {% endif %}
{% endmacro %}
