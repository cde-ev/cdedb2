{% import "web/util.tmpl" as util with context %}
{# A macro to generate the form select fields for all course choices of a given track.

    cco                 The course choice object.
    all_courses         A dict containing all courses of the current event.
    course_choices      A dict containing a mapping from track to a list of ids of all choosable courses.
                        Choosable courses can differ depending on event state and orga privileges.
    all_course_choices  A dict containing a mapping from track to a list of ids of all offered courses.
    show_track_titles   A bool deciding whether to print or omit the title of the track.
#}
{% macro select_course_choice(cco, all_courses, course_choices, all_course_choices, show_track_title) %}
    {% set track = cco.reference_track %}
    <div id="course-choice-container-{{ track['id'] if not cco.is_complex() else "group-{}".format(cco['id'])  }}"
         class="course_choice_container">
        <h4>
            {% trans %}Course Choices{% endtrans %}
            {% if show_track_title %}
                {% trans track=cco['title'] %}
                    for {{ track }}
                {% endtrans %}
            {% endif %}
        </h4>

        {% set course_entries = all_courses|keydictsort(EntitySorter.course)
                                           |xdict_entries('{id}', '{nr}. {title}', include=course_choices) %}
        {% set all_course_entries = all_courses|keydictsort(EntitySorter.course)
                                               |xdict_entries('{id}', '{nr}. {title}', include=all_course_choices) %}
        {% if cco.is_complex() %}
            {% set choice_name = "group{}.course_choice".format(cco['id']) + "_{}" %}
            {% set instructor_name = "group{}.course_instructor".format(cco['id']) %}
        {% else %}
            {% set choice_name = "track{}.course_choice".format(track['id']) + "_{}" %}
            {% set instructor_name = "track{}.course_instructor".format(track['id']) %}
        {% endif %}
        {% set num_choices = track['num_choices'] %}
        {% set min_choices = track['min_choices'] %}

        {% for i in range(num_choices) %}
            {{ util.form_input_select(name=choice_name.format(i), nulloption=nbsp,
                                      aclass="choice_group_select" if cco.is_complex() else "",
                                      attributes="track_group_id={}".format(cco['id']) if cco.is_complex() else "",
                                      label=gettext("%s. Choice")|format(i + 1), entries=course_entries,
                                      info=(gettext("Optional choice") if i >= min_choices else "")) }}
        {% endfor %}

        {{ util.form_input_select(name=instructor_name, entries=all_course_entries,
                                  nulloption=gettext("– I am not an Instructor –"), label=gettext("Instructor"),
                                  info=gettext("If you are instructing a course, please specify which one.")) }}
    </div>
{% endmacro %}

{% macro select_all_course_choices(involved_tracks=None) %}
    {% for cco in choice_objects %}
        {% if cco.num_choices and (involved_tracks is none or involved_tracks.intersection(cco.tracks)) %}
            {% if cco.is_complex() %}
                {% set course_choices = courses_per_track_group[cco.id] %}
                {% set all_course_choices = all_courses_per_track_group[cco.id] %}
            {% else %}
                {% set course_choices = courses_per_track[cco.id] %}
                {% set all_course_choices = all_courses_per_track[cco.id] %}
            {% endif %}
            {{ select_course_choice(cco, courses, course_choices, all_course_choices,
                                    show_track_title=choice_objects|length > 1) }}
        {% endif %}
    {% endfor %}
{% endmacro %}

{# Insert general and additional fields in the registration form, including
    * lodging preference
    * Photo consent
    * Agreement to be visible in online participant list
    * custom orga fields
    * general notes field

    age                 An age class object, determining the restrictions of lodging preferences.
    reg_questionnaire   The registration questionnaire object of the current event
#}
{% macro additional_registration_choices(age, reg_questionnaire) %}

    {{ util.form_input_checkbox(name="reg.list_consent", defaultvalue='True', label=gettext("Privacy consent"), info=gettext(
            "I agree that my data, including my name, address and my email, may be sent "
            "to other participants of this event beforehand.")) }}

    {% if not age.may_mix() %}
        {{ util.input_hidden(name="reg.mixed_lodging", value=False) }}
        {{ util.form_input_static(label=gettext("Mixed Lodging"), value=gettext("Mixed Lodging not possible.")) }}
    {% else %}
        {% if age.is_minor() %}
            {% set mix_info = gettext("The selection must be compatible with the parental consent form.") %}
        {% else %}
            {% set mix_info = "" %}
        {% endif %}
        {{ util.form_input_select(name="reg.mixed_lodging", entries=(
            (True, gettext("I agree to mixed lodging.")),
            (False, gettext("I want to be lodged separated by gender."))),
            label=gettext("Mixed Lodging"), info=mix_info) }}
    {% endif %}

    {% call util.form_input_general(label=gettext("Photo consent"), displayerrors=False) %}
        <p class="nosp">
            {% trans %}
                In the context of this event, photos and recordings will be made to be used for the
                event-documentation and a CdE-internal, password protected media collection. Individual photos and
                recordings can be excluded from this by request.
            {% endtrans %}
        </p>
    {% endcall %}

    {% if reg_questionnaire %}
        <div id="registrationquestionnaire">
            {% for entry in reg_questionnaire %}
                {{ print_questionnaire_entry(entry) }}
            {% endfor %}
        </div>
    {% endif %}

    {%- if ambience["event"]["tracks"] %}
        {%- set noteslabel = gettext("Notes for Orgas and Instructors") %}
    {%- else %}
        {%- set noteslabel = gettext("Notes for Orgas") %}
    {%- endif %}
    {{ util.form_input_textarea(name="reg.notes", label=noteslabel, rows="5") }}
{% endmacro %}

{# Display the value of a custom event field.
   This is the counterpart of (form_)field_input.

    field       A dict containing all information of a custom event field.
    entry       The value of the field of the current entity.
    otherwise   Display this string if the field has no value set.
#}
{% macro display_field(field, entry, otherwise='—') %}
    {% if field['entries'] %}
        {% set hit = [] %}
        {% for value, description in field['entries'].items() %}
            {% if value == entry|string %}
                {% do hit.append(description) %}
            {% endif %}
        {% endfor %}
        {% if hit %}
            {{ hit[0] }}
        {% else %}
            {{ otherwise }}
        {% endif %}
    {% else %}
        {% if field['kind'] == enums['FieldDatatypes'].bool %}
            {{ util.deko_checkbox(checked=entry) }}
        {% elif field['kind'] == enums['FieldDatatypes'].date %}
            {{ entry|date(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].datetime %}
            {{ entry|datetime(lang=lang, passthrough=True) }}
        {% elif field['kind'] == enums['FieldDatatypes'].float %}
            {{ entry|decimal(lang=lang) }}
        {% else %}
            {{ entry|linebreaks or otherwise }}
        {% endif %}
    {% endif %}
{% endmacro %}

{# Set the value of a custom event field.
   This is the counterpart of display_field.

    field       A dict containing all information of a custom event field.
    name        The name of the field, defaults to 'fields.field_name'
    text_rows   Passed to the 'rows' attribute of input_textarea
    bool_label  Special label for the field_input (not the form*!) if the field is of type bool
#}
{% macro field_input(field, name=none, readonly=False, defaultvalue='', anid=none, text_rows=3, bool_label=none) %}
    {%- set name = name or "fields." + field['field_name'] %}
    {%- set bool_label = bool_label or field['title'] %}
    {# Wrapping is necessary to identify the data field for the fee preview. #}
    <div id="field.{{ field['field_name'] }}" data-field_id="{{ field['id'] }}">
    {%- if field['entries'] %}
        {{- util.input_select(name=name, entries=field['entries'].items(), nulloption=nbsp,
                              readonly=readonly, defaultvalue=defaultvalue, anid=anid, sort=False) }}
    {%- else %}
        {% set datatypes = enums['FieldDatatypes'] %}
        {% set to_input_type = {
            datatypes.str: 'text',
            datatypes.int: 'number',
            datatypes.float: 'number',
            datatypes.date: 'date',
            datatypes.datetime: 'datetime-local',
        } %}
        {%- if field['kind'] == datatypes.bool %}
            <div class="checkbox{% if readonly %} disabled{% endif %}">
                {{- util.input_checkbox(name=name, readonly=readonly, defaultvalue=defaultvalue,
                                        anid=anid, label=bool_label) -}}
            </div>
        {%- elif field['kind'] == datatypes.str and text_rows %}
            {{- util.input_textarea(name=name, readonly=readonly, defaultvalue=defaultvalue,
                                    anid=anid, rows=text_rows) }}
        {%- else %}
            {% set type = to_input_type.get(field['kind'], 'text') %}
            {{- util.input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type=type,
                attributes='placeholder=0.00' if type in (datatypes.float, datatypes.non_negative_float) else '') }}
        {%- endif %}
    {%- endif %}
    </div>
{%- endmacro %}


{# Set the value of a custom event field inside a form.
   This is the counterpart of display_field.

    field       A dict containing all information of a custom event field.
    name        The name of the field, defaults to 'fields.field_name'
    force_label Enforce the presentation of the label in the surrounding form_* even if the field is of type bool
#}
{% macro form_field_input(field, name=none, label=none, info='', displayerrors=True, readonly=False,
                          defaultvalue='', anid=none, force_label=False, text_rows=3, bool_label=none) %}
    {%- set name = name or "fields." + field['field_name'] %}
    {%- set label = (none if (field['kind'] == enums['FieldDatatypes'].bool
                              and not force_label and not field['entries'])
                     else label or field['title']) %}
    {%- set anid = anid or "event-input-{}".format(name) %}
    {%- call util.form_input_general(name=name, label=label, anid=anid, small=False, info=info,
                                     displayerrors=displayerrors, horizontal=True) %}
        {{- field_input(field, name, readonly, defaultvalue, anid, text_rows, bool_label) }}
    {%- endcall %}
{%- endmacro %}


{% macro print_field_inputs(association) %}
    {% if ambience['event']['fields']|length > 0 %}
        <h3 class="heading-underline">{% trans %}Custom Fields{% endtrans %}</h3>
        {% for field in ambience['event']['fields'].values()|sort
                if field['association'] == association %}
            {{ form_field_input(field) }}
        {% else %}
            <p class="text-muted">
                {% if association == enums['FieldAssociations'].lodgement %}
                    {% trans %}No custom fields for lodgements available.{% endtrans %}
                {% elif association == enums['FieldAssociations'].course %}
                    {% trans %}No custom fields for courses available.{% endtrans %}
                {% else %}
                    {% trans %}No custom fields for registrations available.{% endtrans %}
                {% endif %}
            </p>
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro print_questionnaire_entry(entry) %}
    {# Field entry #}
    {% if entry['field_id'] %}
        {% with FIELD = ambience['event']['fields'][entry['field_id']],
                readonly = entry['readonly'] or is_locked or ambience['event']['is_archived'] %}
            {{ form_field_input(
                    FIELD, label=entry['title'], info=entry['info'],
                    readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "",
                    text_rows=2*(entry['input_size'] or 0), bool_label=entry['title']) }}
        {% endwith %}
    {# Text-only entry #}
    {% else %}
        {% if entry['title'] %}
            {{ util.h(entry['title'], level=(3 if entry['kind'] == enums['QuestionnaireUsages'].additional else 4),
                            underline=True, translate=False) }}
        {% endif %}
        {{ entry.get('info', '')|md }}
    {% endif %}
{% endmacro %}


{# Macro for a general questionnaire part, that can have each role in the DynamicRow workflow.
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_questionnaire_config(part_id, kind, aclass="", newrow=False) %}
    <div class="panel panel-default {{ aclass }}">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    {{ util.form_input_text(name="title_{}".format(part_id), label=gettext("Title_[[name of an entity]]"),
                                            attributes=('data-basename="title_"'|s if newrow else ''),
                                            aclass='input-title drow-input', horizontal=false) }}
                    {% set textarea_id = "input-textarea-info_{}".format(part_id) %}
                    {# This can not use form_input_textarea, since we support markdown just for text-only fields. #}
                    {%- call util.form_input_general(name="info_{}".format(part_id), label=gettext("Text"),
                                                     horizontal=false, anid=textarea_id)  %}
                        {{ util.input_textarea(name="info_{}".format(part_id), anid=textarea_id,
                                               attributes=('data-basename="info_"'|s if newrow else ''),
                                               aclass='form-control input-info drow-input') }}
                        {{ util.markdown_preview(textarea_id, gettext("Supports Markdown for “Only Text” fields.")) }}
                    {%- endcall %}
                </div>
                <div class="col-md-6">
                    {{ util.form_input_select("field_id_{}".format(part_id), label=gettext("Query"),
                                              entries=registration_fields.values()|sort|entries('id', 'field_name'),
                                              nulloption=gettext("— Only Text —"),
                                              attributes=('data-basename="field_id_"'|s if newrow else ''),
                                              aclass='input-field drow-input', horizontal=False) }}
                    {{ util.form_input_select(
                        "input_size_{}".format(part_id), label=gettext("Input Size"), entries=(
                            (0, gettext("singleline")), (1, gettext("multiline")),
                            (2, gettext("multiline") + "+"), (3, gettext("multiline") + "++")),
                        attributes=('data-basename="input_size_"'|s if newrow else ''),
                        aclass='input-inputsize drow-input', horizontal=False) }}
                    {{ util.form_input_textarea(
                        "default_value_{}".format(part_id), label=gettext("Default Value"), rows=2,
                        attributes=('data-basename="default_value_"'|s if newrow else ''),
                        aclass='input-defaultvalue drow-input', horizontal=False) }}
                    <div class="form-group row">
                        <div class="col-sm-8">
                            <div class="checkbox">
                                {{ util.input_checkbox("readonly_{}".format(part_id), label=gettext("read-only"),
                                                       attributes=('data-basename="readonly_"'|s if newrow else ''),
                                                       aclass='input-readonly drow-input',
                                                       readonly=(not values["readonly_{}".format(part_id)]
                                                                 and (kind and not kind.allow_readonly()))) }}
                                {{ util.output_errors("readonly_{}".format(part_id), wrapper=True) }}
                            </div>
                        </div>
                        <div class="col-sm-4 text-right">
                            <span class="drow-buttonspace">
                                {% if newrow %}
                                    {{ util.input_checkbox("create_{}".format(part_id), label=gettext("Add"),
                                                           attributes='data-basename="create_"'|s,
                                                           aclass='drow-indicator') }}
                                {% else %}
                                    {{ util.input_checkbox("delete_{}".format(part_id), label=gettext("Remove"),
                                                           aclass='drow-indicator') }}
                                {% endif %}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro constraint_violations_panel(severity, title=gettext("Constraint Violations"), icon='exclamation-circle', anid="constraint-violations", link_title=False) %}
    {% set caller_content = caller() %}
    {% if link_title %}
        {% set title = util.href(cdedblink("event/constraint_violations"), title, icon=icon) %}
        {% set icon = none %}
    {% endif %}
    {% call util.bootstrap_panel(
            title=title, icon=icon, anid=anid,
            aclass="panel-default" if severity <= 0 else ("panel-danger" if severity > 1 else "panel-warning")) %}
        {{ caller_content }}
    {% endcall %}
{% endmacro %}


{% macro list_mep_violations(violations, personas, link_registration=False) %}
    <ul id="mep-violations-list">
        {% for violation in violations %}
            {% set persona_name = util.persona_name(personas[violation.persona_id]) %}
            {% if link_registration %}
                {% set reg_link = util.href(cdedblink("event/show_registration", {'registration_id': violation.registration_id}), persona_name) %}
            {% else %}
                {% set reg_link = persona_name %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans reg_link=reg_link, constraint_shortname=ambience['event']['part_groups'][violation.part_group_id]['shortname'] %}
                    {{ reg_link }} is in violation of the {{ constraint_shortname }} mutually exclusive participation constraint.
                {% endtrans -%}
                {# These are presorted. #}
                {% trans parts = violation.parts_str %}
                    (Present in {{ parts }}).
                {% endtrans %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro list_mec_violations(violations, courses, link_course=False) %}
    <ul id="mec-violations-list">
        {% for violation in violations %}
            {% set course_identifier = courses[violation.course_id]['nr'] + ". " + courses[violation.course_id]['shortname'] %}
            {% if link_course %}
                {% set course_link = util.href(cdedblink("event/show_course", {'course_id': violation.course_id}), course_identifier) %}
            {% else %}
                {% set course_link = course_identifier %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans course_link=course_link, constraint_shortname=ambience['event']['part_groups'][violation.part_group_id]['shortname'] %}
                    {{ course_link }} is in violation of the {{ constraint_shortname }} mutually exclusive course constraint.
                {% endtrans -%}
                {# These are presorted. #}
                {% trans tracks = violation.tracks_str %}
                    (Taking place in {{ tracks }}).
                {% endtrans %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro list_ccs_violations(violations, personas, link_registration=False) %}
    <ul id="ccs-violations-list">
        {% for violation in violations %}
            {% set persona_name = util.persona_name(personas[violation.persona_id]) %}
            {% if link_registration %}
                {% set reg_link = util.href(cdedblink("event/show_registration", {'registration_id': violation.registration_id}), persona_name) %}
            {% else %}
                {% set reg_link = persona_name %}
            {% endif %}

            <li {% if violation.severity == 1 %} class="text-warning" {% elif violation.severity > 1 %} class="text-danger" {% endif %}>
                {% trans reg_link=reg_link, constraint_shortname=ambience['event']['track_groups'][violation.track_group_id]['shortname'] %}
                    {{ reg_link }} is in violation of the {{ constraint_shortname }} course choice sync.
                {% endtrans -%}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% macro camping_mat_icon(is_camping_mat, may_camping_mat) %}
    {% if is_camping_mat and may_camping_mat  %}
        <span title="{{ gettext("Assigned to sleep on a camping mat.") }}">
            {{- util.make_icon('campground') -}}
            {{- util.make_icon('arrow-left') -}}
        </span>
    {% elif may_camping_mat %}
        {{ util.make_icon('campground', aclass='fag', title=gettext("May sleep on a camping mat.")) }}
    {% elif is_camping_mat %}
        <span title="{{ gettext("Assigned to, but may not sleep on a camping mat.") }}">
            {{- util.make_icon('campground', aclass='text-warning') -}}
            {{- util.make_icon('exclamation', aclass='text-warning') -}}
        </span>
    {% endif %}
{% endmacro %}

{% macro active_fee_registration_query_link(registration_ids, label=None, anid="", query=None, fee_id=None) %}
    {% with query = query or get_query(registration_ids, fee_id) %}
        {{ util.href(cdedblink(query.scope.get_target(redirect=True), query.serialize_to_url()),
                     registration_ids|length|string + (" " + label if label else ""), icon='list',
                     title=gettext("View Registrations"), anid=anid) }}
    {% endwith %}
{% endmacro %}

{% macro _fee_amount_td(amount, fee_id) %}
    <td class="text-right" id="eventfee_amount_{{ fee_id }}">
        {{ _print_fee_amount(amount) }}
    </td>
{% endmacro %}

{% macro _print_fee_amount(amount) -%}
    <strong class="{{ "money-negative" if (amount or 0) < 0 else "money-positive" }}">
        {%- if amount is not none -%}
            {{- amount|money(lang=lang) -}}
        {%- else -%}
            –
        {%- endif -%}
    </strong>
{%- endmacro %}

{% macro _fee_amount_range_td(fee) %}
    <td class="text-right" id="eventfee_amount_{{ fee.id }}">
        <strong>
            {{ _print_fee_amount_range(fee) }}
        </strong>
    </td>
{% endmacro %}

{% macro _print_fee_amount_range(fee) -%}
    {%- if fee.amount_min is none or fee.amount_max is none -%}
        –
    {%- elif fee.amount_min == fee.amount_max -%}
        {{ _print_fee_amount(fee.amount_min) }}
    {%- else -%}
        {{ _print_fee_amount(fee.amount_min) }}
        –
        {{ _print_fee_amount(fee.amount_max) }}
    {%- endif -%}
{%- endmacro %}

{#  Print a summary of all relevant fees.
    Has esssentially three different usage modes:

    js_preview = True:
        Used on the `registration_preview` page. Uses js and the `precompute_fee`
        endpoint to display the correct checkboxes and add css classes to active fees.
    js_preview = False and complex_fee is None:
        Used on the global fee summary. Display the fee notes on this page, but don't
        show checkboxes or add classes to active fees (since there is no registration
        to decide whether they are active).
    js_preview = False and complex_fee is not None:
        Used on the registration fee summary. Do not display notes, but mark active
        fees statically without js.
#}
{% macro fee_composition_table(js_preview=False) %}
    <table id="fee-summary" class="table" {% if js_preview %}style="display: none"{% endif %}>
        <thead>
            <tr>
                <th>{% trans %}Type{% endtrans %}</th>
                <th>{% trans %}Title{% endtrans %}</th>
                <th class="text-right">{% trans %}Amount{% endtrans %}</th>
                {% if not js_preview and complex_fee %}<th></th>{% endif %}
                {% if not js_preview and not complex_fee %}<th>{% trans %}Registrations{% endtrans %}</th>{% endif %}
                <th>{% trans %}Condition{% endtrans %}</th>
                {% if not js_preview %}<th></th>{% endif %}
            </tr>
        </thead>
        <tbody>
        {% for fee in ambience['event'].fees.values()|sort %}
            <tr id="eventfee_{{ fee.id }}" data-fee_id="{{ fee.id }}" class="eventfee">
                <td>
                    {{ util.make_icon(fee.kind.get_icon(), title=gettext(fee.kind|string)) }}
                </td>
                <td id="eventfee-title-{{ fee.id }}" {% if fee.notes %}title="{{ fee.notes }}"{% endif %}
                        class="active-fee-title {% if not js_preview and complex_fee %}
                            {{ "alert-success" if fee.id in complex_fee.active_fees else "alert-danger" }}
                        {% endif %}">
                    {% if js_preview %}
                        {{ util.deko_checkbox(True, titles=[gettext("Active"), gettext("Inactive")], anid="checkbox-active") }}
                        {{ util.deko_checkbox(False, titles=[gettext("Active"), gettext("Inactive")], anid="checkbox-inactive") }}
                    {% elif complex_fee %}
                        {{ util.deko_checkbox(fee.id in complex_fee.active_fees, titles=[gettext("Active"), gettext("Inactive")]) }}
                    {% endif %}
                    {% if not js_preview and not complex_fee %}
                        <strong>
                            {{ fee.title }}
                        </strong>
                        {%- if fee.notes %}
                            <br />
                            {{ fee.notes }}
                        {% endif %}
                    {% else %}
                        {{ fee.title }}
                    {% endif %}
                </td>
                {% if fee.amount %}
                    {{ _fee_amount_td(fee.amount, fee.id) }}
                    {% if complex_fee %}
                        <td></td>
                    {% endif %}
                {% elif js_preview %}
                    {% if ambience['registration'] and fee.id in ambience['registration']['personalized_fees'] %}
                        {{ _fee_amount_td(ambience['registration']['personalized_fees'][fee.id], fee.id) }}
                    {% else %}
                        {{ _fee_amount_td(None, fee.id) }}
                    {% endif %}
                {% elif complex_fee %}
                    {% if fee.id in ambience['registration']['personalized_fees'] %}
                        {{ _fee_amount_td(ambience['registration']['personalized_fees'][fee.id], fee.id) }}
                        <td>
                            <form action="{{ cdedblink("event/delete_personalized_fee", {'fee_id': fee.id}) }}"
                                  method="POST" id="deletepersonalizedfeeform{{ fee.id }}">
                                {{ util.anti_csrf_token("event/delete_personalized_fee") }}
                                {{ util.input_submit(icon='minus', label=None, aclass="btn btn-xs btn-danger") }}
                            </form>
                        </td>
                    {% else %}
                        <form action="{{ cdedblink("event/add_personalized_fee", {'fee_id': fee.id}) }}"
                              method="POST" id="addpersonalizedfeeform{{ fee.id }}">
                            {{ util.anti_csrf_token("event/add_personalized_fee") }}
                            <td class="text-right">
                                {{ util.input_text("amount", attributes='style="float:right;width:5em"'|safe) }}
                            </td>
                            <td>
                                {{ util.input_submit(icon='plus', label=None, aclass="btn btn-xs btn-success") }}
                            </td>
                        </form>
                    {% endif %}
                {% else %}
                    {{ _fee_amount_range_td(fee) }}
                {% endif %}
                {% if not js_preview and not complex_fee %}
                    <td class="nowrap">
                        {{ active_fee_registration_query_link(fee_stats[fee.kind][fee.id].registrations_owed, gettext("Owed"), fee_id=fee.id, anid="eventfee_owed_" + fee.id|string) }}
                        <br />
                        {{ active_fee_registration_query_link(fee_stats[fee.kind][fee.id].registrations_paid, gettext("Paid"), fee_id=fee.id, anid="eventfee_paid_" + fee.id|string) }}
                    </td>
                {% endif %}
                <td class="active-fee-condition nowrap {{ "alert-info" if not fee.condition else "" }}" id="eventfee_condition_{{ fee.id }}">
                    {% if not fee.condition %}
                        <i>
                            {% trans %}Personalized Fee{% endtrans %}
                        </i>
                        {% if fee.amount_min is not none and (js_preview or complex_fee) %}
                            ({{ _print_fee_amount_range(fee) }})
                        {% endif %}
                    {% elif complex_fee %}
                        {{ complex_fee.visual_debug[fee.id]|safe }}
                    {% else %}
                        {{ fee.visual_debug|safe }}
                    {% endif %}
                </td>
                {% if not js_preview %}
                    <td class="nowrap b-left">
                        {% if complex_fee %}
                            {{ util.href(cdedblink("event/fee_summary") + "#eventfee_{}".format(fee.id), label=None,
                                         title=gettext("Go to event fee summary"), icon="chevron-right",
                                         aclass="btn btn-xs btn-info") }}
                        {% else %}
                            {{ util.href(
                                cdedblink("event/configure_fee_form", {'fee_id': fee.id}), label=util.make_icon("pen"),
                                title=gettext("Change fee %(fee_title)s")|format(fee_title=fee['title']),
                                anid="eventfee{}_change".format(fee.id), aclass="btn btn-sm btn-warning") }}
                            <form action="{{ cdedblink("event/delete_fee", {'fee_id': fee.id}) }}"
                                  method="POST" id="deleteeventfeeform{{ fee.id }}" class="display-inline">
                                {{ util.anti_csrf_token("event/delete_fee") }}
                                {{ util.input_submit(
                                    title=gettext("Delete fee %(fee_title)s")|format(fee_title=fee['title']),
                                    icon='trash-alt' if fee.amount else 'dumpster-fire',
                                    label=None, aclass="btn btn-sm btn-danger") }}
                            </form>
                        {% endif %}
                    </td>
                {% endif %}
            </tr>
        {% endfor %}
        </tbody>
    </table>
{% endmacro %}

{% macro fee_preview_panel(show_composition=False, hideable=False) %}
    <div class="panel panel-primary">
        <div class="panel-body">
            <noscript>
                {% trans %}
                    Activate JavaScript for automatic fee preview.
                {% endtrans %}
            </noscript>
            {% if hideable %}
                <details>
                    <summary>
                        <strong>
                            {% trans %}Fee Preview{% endtrans %}
                        </strong>
                    </summary>
            {% endif %}
            <div id="fee-preview" style="display: none">
                {% if caller %}
                    {{ caller() }}
                {% endif %}
                {{ util.form_input_static(label=gettext("Fee"), anid="fee-amount", value="…") }}
            </div>
            {% if show_composition %}
                {{ fee_composition_table(js_preview=True) }}
            {% endif %}
            {% if hideable %}
                </details>
            {% endif %}
        </div>
    </div>
{% endmacro %}


{#  Print a breakdown of the fee composition for registration status and preview during registration.

    Skip fee kinds that sum to zero, unless `show_all=True`.
#}
{% macro fee_breakdown_by_kind(show_all=False) -%}
    <table class="table-slim table-condensed bg-info" style="color: #333">
        <tbody>
            {% for kind, amount in complex_fee.by_kind.items()|sort if amount or show_all %}
                <tr>
                    <td style="padding-right: 1em">
                        {{ gettext(kind|string) }}
                    </td>
                    <td class="text-right">
                        {{ amount|money(lang=lang) }}
                    </td>
                </tr>
            {% endfor %}
        </tbody>
        <tfoot>
            <tr class="summary">
                <td>
                    {% trans %}Total{% endtrans %}
                </td>
                <td class="text-right">
                    {{ complex_fee.amount|money(lang=lang) }}
                </td>
            </tr>
        </tfoot>
    </table>
{%- endmacro %}
