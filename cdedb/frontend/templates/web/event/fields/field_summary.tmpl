{% set sidenav_active='event_field_summary' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% set jshint='strong' %}
{% block scripts %}{{ util.cdedb_script('cdedb_helper.js') }}{{ util.cdedb_script('cdedb_dynamicrow.js') }}{% endblock %}
{% block title %}
    {% trans title=ambience['event']['title'] %}
    	Configure Custom Fields ({{ title }})
    {% endtrans %}
{% endblock %}
{% block breadcrumb %}
{{ super() }}
{{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
{{ util.breadcrumb_link(cdedblink("event/field_summary"), gettext("Configure Custom Fields"), active=True) }}
{% endblock %}
{% block heading %}
    {{ util.doclink_('Handbuch_Orga') }}
    {{ util.context_heading(gettext("Configure Custom Fields"), ambience['event']['title'],
                            'chalkboard-teacher', gettext("Event")) }}
{% endblock %}

{# Macro for a general field, that can have each role in the DynamicRow workflow.
   non-deletable rows have a disabled 'delete'-checkbox,
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_field(field_id, association, deletable, changeable, aclass="", newrow=False) %}
    <div class="col-md-6 {{ aclass }}" role="group">
        <div class="panel panel-default panel-condensed">
            <div class="panel-heading {{ util.has_errors(drow_name('title', field_id)) }}">
                {{ util.input_text(name=drow_name('title', field_id),
                                   placeholder=gettext("Title of the Custom Field"),
                                   aclass='drow-input form-control',
                                   arialabel=gettext("Title of the Custom Field"),
                                   attributes=util.drow_basename('title')|s if newrow else '') }}
                {{ util.output_errors(drow_name('title', field_id)) }}
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="{{ drow_name('input-text-field_name', field_id) }}">
                        {% trans %}Field Name{% endtrans %}
                    </label>
                    <div class="col-sm-8 {{ util.has_errors(drow_name('field_name', field_id)) }}">
                        {{ util.input_text(name=drow_name('field_name', field_id), aclass='drow-input form-control',
                                           actualreadonly=not newrow, anid=drow_name('input-text-field_name', field_id),
                                           attributes=util.drow_basename('field_name')|s if newrow else '') }}
                        {{ util.output_errors(drow_name('field_name', field_id)) }}
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="{{ drow_name('input-text-sortkey', field_id) }}">
                        {% trans %}Sortkey{% endtrans %}
                    </label>
                    <div class="col-sm-8 {{ util.has_errors(drow_name('sortkey', field_id)) }}">
                        {{ util.input_text(name=drow_name('sortkey', field_id), aclass='drow-input form-control',
                                           type='number', attributes=util.drow_basename('sortkey')|s if newrow else '',
                                           anid=drow_name('input-text-sortkey', field_id), defaultvalue=0) }}
                        {{ util.output_errors(drow_name('sortkey', field_id)) }}
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="{{ drow_name('input-select-kind', field_id) }}">
                        {% trans %}Datatype{% endtrans %}
                    </label>
                    <div class="col-sm-8 {{ util.has_errors(drow_name('kind', field_id)) }}">
                        {{ util.input_select(name=drow_name('kind', field_id),
                                             entries=enums['FieldDatatypes']|enum_entries(processing=gettext),
                                             attributes=util.drow_basename('kind')|s if newrow else '',
                                             aclass='drow-input form-control', actualreadonly=not changeable,
                                             anid=drow_name('input-select-kind', field_id)) }}
                        {{ util.output_errors(drow_name('kind', field_id)) }}
                    </div>
                </div>
                {% if drow_name('association', field_id) not in values %}
                    <div class="association-input-container">
                        {{ util.form_input_select(label=gettext("Category"), name=drow_name('association', field_id),
                                                  entries=enums['FieldAssociations']|enum_entries(processing=gettext),
                                                  attributes=util.drow_basename('association')|s if newrow else '',
                                                  actualreadonly=not changeable,
                                                  aclass='drow-input form-control association-input') }}
                    </div>
                {% else %}
                    {{ util.input_hidden(name=drow_name('association', field_id), value=association) }}
                {% endif %}
                {{ util.form_input_textarea(name=drow_name('entries', field_id), label=gettext("Options"),
                                            aclass='drow-input',
                                            attributes=util.drow_basename('entries')|s if newrow else '') }}
                {% if association == enums['FieldAssociations'].registration %}
                    {{ util.form_input_checkbox(label=gettext("Display at Checkin"), name=drow_name('checkin', field_id),
                                                attributes=util.drow_basename('checkin')|s if newrow else '') }}
                {% endif %}
                <div class="drow-buttonspace">
                    {% if newrow %}
                        {{ util.form_input_checkbox(drow_create(field_id), label=gettext("Add"),
                                                    attributes=util.drow_basename('create')|s,
                                                    aclass='drow-indicator') }}
                    {% else %}
                        {{ util.form_input_checkbox(drow_delete(field_id), label=gettext("Remove"),
                                                    readonly=not deletable, aclass='drow-indicator') }}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endmacro %}


{% block content %}
    <div class="p button-par">
        {{ util.href(cdedblink('event/questionnaire_import_form'), gettext("Questionnaire Import"), readonly=is_locked,
                     aclass="btn btn-warning btn-sm", icon='file-upload') }}
    </div>
    {% if ambience['event']['field_definition_notes'] %}
        {% call util.bootstrap_panel(title=gettext("Custom Fields Notes"), icon="tag",
                                     aclass="panel-default panel-condensed") %}
            <div id="field-definition-notes">{{ ambience['event']['field_definition_notes']|md }}</div>
        {% endcall %}
    {% endif %}
    <form action="{{ cdedblink('event/field_summary') }}" method="POST" id="fieldsummaryform" class="form-horizontal">
        {{ util.anti_csrf_token('event/field_summary') }}
        <ul class="nav nav-tabs mosp softhide" role="tablist" id="associations_tablist">
            {% for association in enums['FieldAssociations'] -%}
                <li role="presentation"{% if loop.first %} class="active"{% endif %}>
                    <a href="#tab_{{ association.name }}" data-toggle="tab" aria-controls="tab_{{ association.name }}"
                            role="tab">{{ util.make_icon(association.get_icon()) }} {{ gettext(association|string) }}</a>
                </li>
            {%- endfor %}
        </ul>
        <div class="tab-content" id="associations_tabcontent">
            {% for association in enums['FieldAssociations'] %}
                <div class="tab-pane active" role="tabpanel" id="tab_{{ association.name }}"
                        data-association-id="{{ association }}">
                    <h3 class="heading-underline">{{ util.make_icon(association.get_icon()) }} {{ gettext(association|string) }}</h3>
                    {% set relevant_fields = [] %}
                    {# Old items, already stored in the database #}
                    {% for entry in ambience['event']['fields'].values()|sort
                            if entry['association'] == association %}
                        {% do relevant_fields.append((entry.id, entry)) %}
                    {% endfor %}

                    {# Items that were added by the user but failed validation. They are still new and have no official id. #}
                    {% for i in range(1, values.get(drow_last_index(), 0) + 1)
                            if values.get(drow_name('association', -i), '') == association|string %}
                        {% do relevant_fields.append((-i, None)) %}
                    {% endfor %}

                    {% for batch in relevant_fields|batch(2) %}
                        <div class="row">
                        {% for field_id, entry in batch %}
                            {% if field_id > 0 %}
                                {{ print_field(field_id, association, field_id not in referenced, field_id not in locked, 'drow-row') }}
                            {% else %}
                                {{ print_field(field_id, association, False, True, 'drow-new', newrow=True) }}
                            {% endif %}
                        {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            {% endfor %}
        </div>

        <h3 class="heading-underline">{% trans %}New Field{% endtrans %}</h3>
        {# Prototype row. For non-JS users: an empty row with 'create'-checkbox, for JS: prototype for new rows. #}
        <div class="row">
            {{ print_field(-values.get('create_last_index', 0) - 1, None, False, True, 'drow-prototype', newrow=True) }}
        </div>

        {{ util.input_hidden("active_tab", anid="input_active_tab") }}
        <p>
            <button type="button" class="btn btn-success softhide pull-right" id="drow-addbutton">
                {{ util.make_icon('plus') }} {% trans %}Add Field{% endtrans %}
            </button>
            {{ util.input_submit(label=gettext("Save"), readonly=is_locked) }}
        </p>
    </form>
    <script nonce="{{ csp_nonce }}">
        /* Hide tabs except first one and headings and enable tab switching */
        $('#associations_tabcontent').children('.tab-pane').not(':eq(0)').removeClass('active');
        $('#fieldsummaryform').find('h3').hide();
        $('#associations_tablist').css('display', 'block').tab();
        var $input_active_tab = $('#input_active_tab');
        $('#associations_tablist a')
            /* Handler to update 'active_tab' hidden input for returning to current tab after submitting */
            .on('show.bs.tab', function() {
                $input_active_tab.val($(this).attr('href').substr(1));
            })
            /* Restore tab from anchor link or 'active_tab' hidden input */
            .each(function() {
                if (window.location.hash === $(this).attr('href')
                        || window.location.hash ===
                            ($(this).attr('href').slice(0, 1) + "tab:" + $(this).attr('href').substr(1))
                        || $input_active_tab.val() === $(this).attr('href').substr(1)) {
                    $(this).tab('show');
                    return false;
                }
            })
            /* Show warning signs for validation errors in tabs */
            .each(function() {
                if ($($(this).attr('href')).find('.has-error').length > 0) {
                    $(this)
                        .append("&emsp;")
                        .append($('<span class="text-danger">' +
                            '<span class="fas fa-exclamation-triangle"></span></span>'));
                }
            });

        /* Enable DynamicRow Javascript */
        $('#fieldsummaryform').cdedbDynamicRow({
            addButton: $('#drow-addbutton'),
            delButtonTitle: "{{ gettext("Remove Field") }}",
            callback: function() {
                var container = $('#associations_tabcontent').children('.tab-pane.active');
                /* Move new row to currently active tab */
                $(this).appendTo(container.children('.row').last());
                /* Select association according to active tab and hide select box */
                $(this).find('.association-input').val(container.attr('data-association-id'));
                $(this).find('.association-input-container').hide();
                /* Refocus first field. Focus set by cdedbDynamicRow get's lost by moving to container. */
                $(this).find('.drow-input').first().focus();
             }});
        $('#fieldsummaryform').cdedbProtectChanges();
    </script>

    <hr />
    <p class="text-warning">{{ util.make_icon('exclamation-triangle') }}
        {% trans %}
            Deleting a field includes deletion of all data, which is stored
            in this field in any registration/course/lodgement. Changing
            the datatype of a field deletes all data that cannot be casted
            to the new type, upon saving.
        {% endtrans %}</p>
    <p class="help-block">
        {{ util.make_icon('info-circle') }}
        {% trans format="<br /><code style='padding: 2px 0;'>%(value_one)s1;%(desc_one)s<br />%(value_two)s2;%(desc_two)s<br />…</code><br />"|s|format(
                value_one=gettext("Value"), desc_one=gettext("Description Text"), value_two=gettext("Value"), desc_two=gettext("Description Text")) -%}
        	Enter Options in the following format:
            {{ format }}
            Setting Options will create a selection box when using this field.
            The description text will be displayed in the selection box,
            the value will be saved to the database upon selection.
            The value must be compatible to the selected datatype.
            Empty Options will be displayed as a free text/number/date field.
        {% endtrans %}
    </p>
{% endblock %}
