{% if kind == enums['FieldAssociations'].registration.value %}
    {% set sidenav_active='event_registration' %}
{% elif kind == enums['FieldAssociations'].course.value %}
    {% set sidenav_active='event_course_stats' %}
{% elif kind == enums['FieldAssociations'].lodgement.value %}
    {% set sidenav_active='event_lodgements' %}
{% endif %}
{% set field_name=ambience['event']['fields'][values['field_id']|int]['field_name'] %}

{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% import "web/event/generic.tmpl" as generic_event with context %}
{% block scripts %}
    {{ util.cdedb_script('cdedb_helper.js') }}
    {{ util.cdedb_script('cdedb_multiset.js') }}
{% endblock %}
{% set jshint='weak' %}

{% block title %}
    {% trans field=field_name, title=ambience['event']['title'] -%}
        Set Field {{ field }} ({{ title }})
    {% endtrans %}
{% endblock %}

{% block heading %}
    {{ util.context_heading(gettext("Set %(field)s")|format(field="<em>%s</em>"|s|format(field_name|e)|s)|s,
                            ambience['event']['title'], 'chalkboard-teacher', gettext("Event")) }}
{% endblock %}

{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
    {% if kind == enums['FieldAssociations'].registration.value %}
        {{ util.breadcrumb_link(cdedblink("event/registration_query"), gettext("Registrations")) }}
    {% elif kind == enums['FieldAssociations'].course.value %}
        {{ util.breadcrumb_link(cdedblink("event/course_stats"), gettext("Courses")) }}
        {{ util.breadcrumb_link(cdedblink("event/course_query"), gettext("Course Query")) }}
    {% elif kind == enums['FieldAssociations'].lodgement.value %}
        {{ util.breadcrumb_link(cdedblink("event/lodgements"), gettext("Lodgements")) }}
        {{ util.breadcrumb_link(cdedblink("event/lodgement_query"), gettext("Lodgement Query")) }}
    {% endif %}
    {{ util.breadcrumb_link(cdedblink("event/field_set_select", {'kind': kind}), gettext("Set Field")) }}
    {{ util.breadcrumb_link(cdedblink("event/field_set_form", {'kind': kind}), field_name, active=True, icon="tag") }}
{% endblock %}

{% block content %}
    {% if ordered %}
        <form action="{{ cdedblink('event/field_set') }}" method="POST" id="fieldform" class="form-horizontal">
            {{ util.anti_csrf_token('event/field_set') }}
            {% for anid in ordered %}
                {{ generic_event.form_field_input(
                    ambience['event']['fields'][values['field_id']|int], name="input{}".format(anid),
                    label=labels[anid], force_label=True, outerclass='multiset-input') }}
            {% endfor %}
            {{ util.input_hidden(name="field_id") }}
            {{ util.input_hidden(name="ids") }}
            {{ util.input_hidden(name="kind") }}

            {% if kind == enums['FieldAssociations'].registration.value %}
            <div class="panel panel-primary">
                <div class="panel-body">
                    {{ util.form_input_textarea(name="change_note", label=gettext("Changenotes"), anid="changenotes",
                        info=gettext("Summary to be added to the log entries. This is prefixed with \"%s gesetzt: \"")|format(field_name)) }}
                </div>
            </div>
            {% endif %}

            {{ util.form_input_submit(label=gettext("Save"), cancellink=cdedblink(cancellink)) }}

            <p class="text-info">
                {{ util.make_icon("info-circle") }}
                This form can be used to set the individual value of the chosen custom data field for multiple registrations at once.
            </p>
            <p class="multiset-explanation text-info" style="display: none;">
                {{ util.make_icon("info-circle") }}
                {% trans %}
                    Changed entries are highlighted in red.
                    Newly added entries are shown in green.
                    Deleted entries are shown in red.
                    You can use the "Restore"-button to restore a changed or deleted entry to its original value.
                    You can use the "Delete"-button to set an entry to empty, which will delete it.
                {% endtrans %}
            </p>
        </form>
    {% else %}
        <p>
            {% trans %}No registrations found.{% endtrans %}
        </p>
    {% endif %}
    <script nonce="{{ csp_nonce }}">
        $('#fieldform').cdedbProtectChanges().multiset(
            '{{ util.make_icon("trash-alt") }}', '{{ gettext("Delete") }}',
            '{{ util.make_icon("redo") }}', '{{ gettext("Restore") }}',
        );
    </script>
{% endblock %}
