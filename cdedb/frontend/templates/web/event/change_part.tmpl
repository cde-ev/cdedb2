{% set sidenav_active='event_parts' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% set jshint='strong' %}
{% block scripts %}
    {{ util.cdedb_script('cdedb_helper.js') }}
    {{ util.cdedb_script('cdedb_dynamicrow.js') }}
{% endblock %}
{% block title %}
    {% trans part_title=ambience['event']['parts'][part_id]['title'], event_title=ambience['event']['title'] %}
    	Change {{ part_title }} ({{ event_title }})
    {% endtrans %}
{% endblock %}
{% block heading %}
    <h1 class="title">
        {% trans %}
        	Configure Event-Parts
        {% endtrans %}
        <small>{{ util.make_icon('chalkboard-teacher') }} {{ ambience['event']['title'] }}</small>
    </h1>
{% endblock %}
{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
    {{ util.breadcrumb_link(cdedblink("event/part_summary"), gettext("Event-Parts"), active=True) }}
{% endblock %}

{% block content %}
    {% set tracks = ambience['event']['parts'][part_id]['tracks'] %}

    <p class="text-warning">{{ util.make_icon('exclamation-triangle') }}
        {% trans %}
            Event parts and course tracks can only be created or deleted if no
            registrations are present yet. Course tracks can only be deleted, if
            there are no courses associated with them.
        {% endtrans %}
    </p>

<form action="{{ cdedblink('event/change_part') }}" method="POST" id="partsummaryform" class="form-horizontal">
    {{ util.anti_csrf_token('event/change_part') }}
    {{ util.form_input_text(name="title", label=gettext("Title")) }}
    {{ util.form_input_text(name="shortname", label=gettext("Shortname"), aclass='drow-input') }}
    {{ util.form_input_text(name="part_begin", label=gettext("Begin"), type='date',
                            aclass='drow-input', placeholder="YYYY-MM-DD") }}
    {{ util.form_input_text(name="part_end", label=gettext("End"), type='date',
                            aclass='drow-input', placeholder="YYYY-MM-DD") }}
    {{ util.form_input_text(name="fee", label=gettext("Event-Part Fee"), aclass='drow-input form-control',
                            anid="input-text-fee", addon='â‚¬') }}
    {{ util.form_input_select(name="waitlist_field", entries=waitlist_fields,
                              label=gettext("Field for Waitlist"),nulloption=nbsp,
                              info=gettext("Field to store the %(link)s ranking of this part."
                                           " Fieldtype: Integer")|format(
                                           link=util.href(docurl("Handbuch_Orga_Warteliste"),
                                                          gettext("Waitlist")))|s
                              ) }}

    <h3 class="mosp">{% trans %}Fee Modifiers{% endtrans %}</h3>
    {% set fee_columns = [dict(name="modifier_name", label=gettext("Fee Modifier"), func=util.input_text),
                          dict(name="amount", label=gettext("Amount"), func=util.input_text),
                          dict(name="field_id", label=gettext("Linked Field"), func=util.input_select, func_additional_input = {'entries': fee_modifier_fields})] %}
    {% set locked_fee_modifiers = fee_modifiers.values() if has_registrations else [] %}
    {{ util.dynamic_row_table("Fee Modifier", fee_columns, fee_modifiers, locked=locked_fee_modifiers, readonly=has_registrations, sortkey=EntitySorter.fee_modifiers, prefix="fee_modifier") }}

    <h3 class="mosp">{% trans %}Coursetracks{% endtrans %}</h3>
    {% set track_columns = [dict(name="title", label=gettext("Coursetrack"), func=util.input_text),
                            dict(name="shortname", label=gettext("Shortname"), func=util.input_text),
                            dict(name="num_choices", label=gettext("Course Choices"), func=util.input_text, func_additional_input = {'defaultvalue': DEFAULT_NUM_COURSE_CHOICES}),
                            dict(name="min_choices", label=gettext("Req. Choices"), func=util.input_text, func_additional_input = {'defaultvalue': DEFAULT_NUM_COURSE_CHOICES}),
                            dict(name="sortkey", label=gettext("Sortkey"), func=util.input_text)] %}
    {% set tracks = ambience['event']['parts'][part_id]['tracks'] %}
    {{ util.dynamic_row_table("Fee Modifier", track_columns, tracks, locked=referenced_tracks, sortkey=EntitySorter.event_tracks, prefix="track") }}

    {{ util.input_submit(label=gettext("Save")) }}
</form>
{% endblock %}
