{% set sidenav_active='event_parts' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% set jshint='strong' %}
{% block scripts %}
    {{ util.cdedb_script('cdedb_helper.js') }}
    {{ util.cdedb_script('cdedb_dynamicrow.js') }}
{% endblock %}

{% block title %}
    {% trans part_title=ambience['event']['parts'][part_id]['title'], event_title=ambience['event']['title'] %}
        Edit part {{ part_title }} ({{ event_title }})
    {% endtrans %}
{% endblock %}

{% block heading %}
    {{ util.context_heading(gettext("Edit part %(part_title)s")|format(part_title=ambience['event']['parts'][part_id]['title']),
                            ambience['event']['title'], 'chalkboard-teacher', gettext("Event")) }}
{% endblock %}

{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
    {{ util.breadcrumb_link(cdedblink("event/part_summary"), gettext("Event-Parts")) }}
    {{ util.breadcrumb_link("", ambience['event']['parts'][part_id]['title'], icon="clock", active=True) }}
    {{ util.breadcrumb_link(cdedblink("event/change_part"), gettext("Change"), active=True) }}
{% endblock %}

{% block content %}
    <p class="text-warning">{{ util.make_icon('exclamation-triangle') }}
        {% trans %}
            Event parts and course tracks can only be created or deleted if no
            registrations are present yet. Course tracks can only be deleted, if
            there are no courses associated with them.
        {% endtrans %}
    </p>

    <form action="{{ cdedblink('event/change_part') }}" method="POST" id="changepartform" class="form-horizontal">
        {{ util.anti_csrf_token('event/change_part') }}
        {{ util.form_input_text(name="title", label=gettext("Title")) }}
        {{ util.form_input_text(name="shortname", label=gettext("Shortname")) }}
        {{ util.form_input_text(name="part_begin", label=gettext("Begin"), type='date', placeholder="YYYY-MM-DD") }}
        {{ util.form_input_text(name="part_end", label=gettext("End"), type='date', placeholder="YYYY-MM-DD") }}
        {{ util.form_input_text(name="fee", label=gettext("Event-Part Fee"), anid="input-text-fee", addon='â‚¬') }}
        {{ util.form_input_select(name="waitlist_field", entries=waitlist_fields,
                                  label=gettext("Field for Waitlist"), nulloption=nbsp,
                                  info=gettext("Field to store the %(link)s ranking of this part."
                                               " Fieldtype: Integer")|format(
                                               link=util.href(docurl("Handbuch_Orga_Warteliste"),
                                                              gettext("Waitlist")))|s
                                  ) }}

        <h3 class="mosp heading-underline">{% trans %}Fee Modifiers{% endtrans %}</h3>
        {% set fee_columns = [dict(name="modifier_name", label=gettext("Fee Modifier"), func=util.input_text),
                              dict(name="amount", label=gettext("Amount"), func=util.input_text),
                              dict(name="field_id", label=gettext("Linked Field"), func=util.input_select, func_additional_input = {'entries': fee_modifier_fields})] %}
        {% set locked_fee_modifiers = fee_modifiers.values() if has_registrations else [] %}
        {{ util.dynamic_row_table(gettext("Fee Modifier"), fee_columns, fee_modifiers, locked=locked_fee_modifiers, readonly=has_registrations, sortkey=EntitySorter.fee_modifiers, prefix="fee_modifier") }}

        <h3 class="mosp heading-underline clear-both">{% trans %}Coursetracks{% endtrans %}</h3>
        {% set track_columns = [dict(name="title", label=gettext("Coursetrack"), func=util.input_text),
                                dict(name="shortname", label=gettext("Shortname"), func=util.input_text),
                                dict(name="num_choices", label=gettext("Course Choices"), aclass='input-num-choices', func=util.input_text, func_additional_input = {'defaultvalue': DEFAULT_NUM_COURSE_CHOICES}),
                                dict(name="min_choices", label=gettext("Req. Choices"), aclass='input-min-choices', func=util.input_text, func_additional_input = {'defaultvalue': DEFAULT_NUM_COURSE_CHOICES}),
                                dict(name="sortkey", label=gettext("Sortkey"), func=util.input_text)] %}
        {% set tracks = ambience['event']['parts'][part_id]['tracks'] %}
        {{ util.dynamic_row_table(gettext("Coursetrack"), track_columns, tracks, locked=referenced_tracks, modification_only=has_registrations, sortkey=EntitySorter.event_tracks, prefix="track") }}

        {{ util.input_submit(label=gettext("Save")) }}
    </form>

    <script nonce="{{ csp_nonce }}">
        $(function() {
            $('#fee_modifier_drow-table').cdedbDynamicRow({
                addButton: $('#fee_modifier_drow-addbutton'),
                delButtonTitle: "{{ gettext("Delete line") }}"});
            $('#track_drow-table').cdedbDynamicRow({
                addButton: $('#track_drow-addbutton'),
                delButtonTitle: "{{ gettext("Delete line") }}"});
            $('#changepartform').cdedbProtectChanges();
        });
        /* Update maximum number of required choices with total number of choices */
        function update_min_choices_max() {
            var $input_min_choices = $(this).closest('tr').find('.input-min-choices');
            $input_min_choices.attr('max', $(this).val());
            if (parseInt($(this).val()) < parseInt($input_min_choices.val())) {
                $input_min_choices.val($(this).val());
            }
        }
        $('.input-num-choices')
            .change(update_min_choices_max)
            .each(update_min_choices_max);
    </script>
{% endblock %}
