{% set sidenav_active='event_parts' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% set jshint='strong' %}
{% block scripts %}
    {{ util.cdedb_script('cdedb_helper.js') }}
    {{ util.cdedb_script('cdedb_dynamicrow.js') }}
{% endblock %}
{% block title %}
    {% trans title=ambience['event']['title'] %}
    	Configure Event-Parts ({{ title }})
    {% endtrans %}
{% endblock %}
{% block heading %}
    <h1 class="title">
        {% trans %}
        	Configure Event-Parts
        {% endtrans %}
        <small>{{ util.make_icon('chalkboard-teacher') }} {{ ambience['event']['title'] }}</small>
    </h1>
{% endblock %}
{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
    {{ util.breadcrumb_link(cdedblink("event/part_summary"), gettext("Event-Parts"), active=True) }}
{% endblock %}


{% block content %}
    <p class="text-warning">{{ util.make_icon('exclamation-triangle') }}
        {% trans %}
            Event parts and course tracks can only be created or deleted if no
            registrations are present yet. Course tracks can only be deleted, if
            there are no courses associated with them.
        {% endtrans %}
    </p>

    {% for part_id, part in ambience['event']['parts']|keydictsort(EntitySorter.event_part) %}
        <div class="panel panel-info {{ aclass }}">
            <div class="panel-heading">
                {{ part['title'] }}
                {{ util.href(cdedblink('event/change_part_form', {'part_id' : part_id}), gettext("Change Part"),
                                         icon='pen', aclass='btn btn-xs btn-warning pull-right') }}
            </div>

            <div class="panel-body">
                <div class="row">
                    <dl class="dl-horizontal col-md-6">
                        <dt>{% trans %}Shortname{% endtrans %}</dt>
                        <dd>{{ part['shortname'] }}</dd>

                        <dt>{% trans %}Begin{% endtrans %}</dt>
                        <dd>{{ part['part_begin'] }}</dd>

                        <dt>{% trans %}End{% endtrans %}</dt>
                        <dd>{{ part['part_end'] }}</dd>
                    </dl>

                    <dl class="dl-horizontal col-md-6">
                        <dt>{% trans %}Event-Part Fee{% endtrans %}</dt>
                        <dd>{{ part['fee']|money }}</dd>

                        <dt>{% trans %}Field for Waitlist{% endtrans %}</dt>
                        <dd>{{ part['waitlist_field'] }}</dd>
                    </dl>
                </div>

                <hr />

                <table class="table table-condensed">
                    <thead>
                        <tr>
                            <th>{% trans %}Fee Modifier{% endtrans %}</th>
                            <th>{% trans %}Amount{% endtrans %}</th>
                            <th>{% trans %}Linked Field{% endtrans %}</th>
                        </tr>
                    </thead>
                    <tbody class="drow-container1 fee-modifiers-container" data-outerid0="{{ part_id }}">
                        {% for fee_modifier in fee_modifiers_by_part[part_id].values() %}
                            <tr id="feemodifierrow_{{ part_id }}_{{ fee_modifier['id'] }}">
                                <td>{{ fee_modifier['modifier_name'] }}</td>
                                <td>{{ fee_modifier['amount']|money }}</td>
                                <td>{{ fee_modifier['field_id'] }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>

                <hr />

                <table class="table table-condensed">
                    <thead>
                        <tr>
                            <th>{% trans %}Coursetrack{% endtrans %}</th>
                            <th>{% trans %}Shortname{% endtrans %}</th>
                            <th>{% trans %}Course Choices{% endtrans %}</th>
                            <th>{% trans %}Req. Choices{% endtrans %}</th>
                            <th>{% trans %}Sortkey{% endtrans %}</th>
                        </tr>
                    </thead>
                    <tbody class="drow-container1 course-tracks-container" data-outerid0="{{ part_id }}">
                        {% for track_id, track in part['tracks']|keydictsort(EntitySorter.course_track) %}
                            <tr>
                                <td>{{ track['title'] }}</td>
                                <td>{{ track['shortname'] }}</td>
                                <td>{{ track['num_choices'] }}</td>
                                <td>{{ track['min_choices'] }}</td>
                                <td>{{ track['sortkey'] }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>

            </div>
        </div>
    {% endfor %}

    <script nonce="{{ csp_nonce }}">
        function initialize_track_dynrow() {
            $(this).cdedbDynamicRow({
                addButton: $(this).closest('.panel-body').find('.add-track-button'),
                delButtonTitle: "{{ gettext("Remove Coursetrack") }}",
                nestingLevel: 1
            });
        }
        function initialize_fee_modifier_dynrow() {
            $(this).cdedbDynamicRow({
                addButton: $(this).closest('.panel-body').find('.add-fee-modifier-button'),
                delButtonTitle: "{{ gettext("Remove Fee Modifier") }}",
                nestingLevel: 1
            });
        }
        /* Initialize DynamicRow for parts */
        $('#drow-container').cdedbDynamicRow({
            addButton: $('#drow-addbutton'),
            delButtonTitle: "{{ gettext("Remove Event-Part") }}",
            callback: function() {
                $(this).find('.course-tracks-container').each(initialize_track_dynrow);
                $(this).find('.fee-modifiers-container').each(initialize_fee_modifier_dynrow);
            }
        });
        /* Initialize DynamicRow for course-tracks-containers and initialize_fee_modifier_dynrow of existing parts */
        $('.course-tracks-container').each(initialize_track_dynrow);
        $('.fee-modifiers-container').each(initialize_fee_modifier_dynrow);
        /* Update maximum number of required choices with total number of choices */
        function update_min_choices_max() {
            var $input_min_choices = $(this).closest('tr').find('.input-min-choices');
            $input_min_choices.attr('max', $(this).val());
            if (parseInt($(this).val()) < parseInt($input_min_choices.val())) {
                $input_min_choices.val($(this).val());
            }
        }
        $('.input-num-choices')
            .change(update_min_choices_max)
            .each(update_min_choices_max);
        $('#partsummaryform').cdedbProtectChanges();
    </script>
{% endblock %}
