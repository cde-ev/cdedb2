{% set sidenav_active='event_parts' %}
{% extends "web/event/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% set jshint='strong' %}
{% block scripts %}{{ util.cdedb_script('cdedb_helper.js') }}{{ util.cdedb_script('cdedb_dynamicrow.js') }}{% endblock %}
{% block title %}
    {% trans title=ambience['event']['title'] %}
    	Configure Event-Parts ({{ title }})
    {% endtrans %}
{% endblock %}
{% block heading %}
    <h1 class="title">
        {% trans %}
        	Configure Event-Parts
        {% endtrans %}
        <small>{{ util.make_icon('chalkboard-teacher') }} {{ ambience['event']['title'] }}</small>
    </h1>
{% endblock %}
{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("event/show_event"), ambience['event']['title'], icon="chalkboard-teacher") }}
    {{ util.breadcrumb_link(cdedblink("event/part_summary"), gettext("Event-Parts"), active=True) }}
{% endblock %}

{% macro print_fee_modifier(part_id, fee_modifier_id, aclass="", newrow=False) %}
    <tr class="{{ aclass }}">
        <td {% if "fee_modifier_modifier_name_{}_{}".format(part_id, fee_modifier_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="fee_modifier_modifier_name_{}_{}".format(part_id, fee_modifier_id), aclass='drow-input1 form-control',
                               attributes=('data-basename="fee_modifier_modifier_name_" data-basename1="_"'|s if newrow else ''),
                               arialabel=gettext("Name of Fee Modifier"), placeholder=gettext("Modifier Name")) }}
            {{ util.output_errors("fee_modifier_modifier_name_{}_{}".format(part_id, fee_modifier_id)) }}
        </td>
        <td {% if "fee_modifier_amount_{}_{}".format(part_id, fee_modifier_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="fee_modifier_amount_{}_{}".format(part_id, fee_modifier_id), aclass='drow-input1 form-control',
                               attributes=('data-basename="fee_modifier_amount_" data-basename1="_"'|s if newrow else ''),
                               arialabel=gettext("Fee Modifier Amount"), type="number") }}
            {{ util.output_errors("fee_modifier_amount_{}_{}".format(part_id, fee_modifier_id)) }}
        </td>
        <td {% if "fee_modifier_field_id_{}_{}".format(part_id, fee_modifier_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_select(name="fee_modifier_field_id_{}_{}".format(part_id, fee_modifier_id), aclass='drow-input1 form-control',
                                 attributes=('data-basename="fee_modifier_field_id_" data-basename1=" "'|s if newrow else ''),
                                 arialabel=gettext("Linked Field for Fee Modifier"), nulloption="", entries=fee_modifier_fields) }}
            {{ util.output_errors("fee_modifier_field_id_{}_{}".format(part_id, fee_modifier_id)) }}
        </td>
        <td>
            <div class="drow-buttonspace1">
                {% if newrow %}
                    {{ util.input_checkbox("fee_modifier_create_{}_{}".format(part_id, fee_modifier_id), label=gettext("Add"),
                                           attributes='data-basename="fee_modifier_create_"'|s, aclass='drow-indicator1') }}
                {% else %}
                    {{ util.input_checkbox("fee_modifier_delete_{}_{}".format(part_id, fee_modifier_id), label=gettext("Remove"),
                                           readonly=has_registrations, aclass='drow-indicator1') }}
                {% endif %}
            </div>
        </td>
    </tr>
{% endmacro %}

{# Macro for a general course track, that can have each role in the (inner) DynamicRow workflow.
   aclass is used to pass classes to the row, such as drow-row1, drow-prototype1, drow-new1
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_track(part_id, track_id, aclass="", newrow=False) %}
    <tr class="{{ aclass }}">
        <td style="width: 40%;"
            {% if "track_title_{}_{}".format(part_id, track_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="track_title_{}_{}".format(part_id, track_id), aclass='drow-input1 form-control',
                               attributes=('data-basename="track_title_" data-basename1="_"'|s if newrow else ''),
                               arialabel=gettext("Name of Coursetrack"), placeholder=gettext("Title")) }}
            {{ util.output_errors("track_title_{}_{}".format(part_id, track_id)) }}
        </td>
        <td {% if "track_shortname_{}_{}".format(part_id, track_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="track_shortname_{}_{}".format(part_id, track_id), aclass='drow-input1 form-control',
                               attributes=('data-basename="track_shortname_" data-basename1="_"'|s if newrow else ''),
                               arialabel=gettext("Shortname of Coursetrack"), placeholder=gettext("Shortname")) }}
            {{ util.output_errors("track_shortname_{}_{}".format(part_id, track_id)) }}
        </td>
        <td {% if "track_num_choices_{}_{}".format(part_id, track_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="track_num_choices_{}_{}".format(part_id, track_id),
                               aclass='drow-input1 form-control input-num-choices',
                               attributes=('data-basename="track_num_choices_" data-basename1="_"'|s if newrow else '')
                                    + ' min="0"'|s,
                               arialabel=gettext("Number of Course Choices"), type="number",
                               defaultvalue=DEFAULT_NUM_COURSE_CHOICES) }}
            {{ util.output_errors("track_num_choices_{}_{}".format(part_id, track_id)) }}
        </td>
        <td {% if "track_min_choices_{}_{}".format(part_id, track_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="track_min_choices_{}_{}".format(part_id, track_id),
                               aclass='drow-input1 form-control input-min-choices',
                               attributes=('data-basename="track_min_choices_" data-basename1="_"'|s if newrow else '')
                                    + ' min="0"'|s,
                               arialabel=gettext("Number of Course Choices"), type="number",
                               defaultvalue=DEFAULT_NUM_COURSE_CHOICES) }}
            {{ util.output_errors("track_min_choices_{}_{}".format(part_id, track_id)) }}
        </td>
        <td {% if "track_sortkey_{}_{}".format(part_id, track_id) in errors %}class="has-error"{% endif %}>
            {{ util.input_text(name="track_sortkey_{}_{}".format(part_id, track_id), aclass='drow-input1 form-control',
                               attributes=('data-basename="track_sortkey_" data-basename1="_"'|s if newrow else ''),
                               arialabel=gettext("Sortkey of Coursetrack"), type="number", defaultvalue="1") }}
            {{ util.output_errors("track_sortkey_{}_{}".format(part_id, track_id)) }}
        </td>
        <td>
            <div class="drow-buttonspace1">
                {% if newrow %}
                    {{ util.input_checkbox("track_create_{}_{}".format(part_id, track_id), label=gettext("Add"),
                                           attributes='data-basename="track_create_"'|s, aclass='drow-indicator1') }}
                {% else %}
                    {{ util.input_checkbox("track_delete_{}_{}".format(part_id, track_id), label=gettext("Remove"),
                                           readonly=(has_registrations or track_id in referenced_tracks),
                                           aclass='drow-indicator1') }}
                {% endif %}
            </div>
        </td>
    </tr>
{% endmacro %}

{# Macro for a general part, that can have each role in the DynamicRow workflow.
   non-deletable rows have a disabled 'delete'-checkbox,
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_part(part_id, deletable, tracks={}, aclass="", newrow=False) %}
    <div class="panel panel-default {{ aclass }}">
        <div class="panel-heading {% if "title_{}".format(part_id) in errors %}has-error{% endif %}">
            {{ util.input_text(name="title_{}".format(part_id), placeholder=gettext("Name of Event-Part"),
                               attributes=('data-basename="title_"'|s if newrow else ''),
                               aclass='drow-input form-control', arialabel=gettext("Name of Event-Part")) }}
            {{ util.output_errors("title_{}".format(part_id)) }}
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    {{ util.form_input_text(name="shortname_{}".format(part_id), label=gettext("Shortname"),
                                            attributes=('data-basename="part_shortname_"'|s if newrow else ''),
                                            aclass='drow-input') }}
                    {{ util.form_input_text(name="part_begin_{}".format(part_id), label=gettext("Begin"), type='date',
                                            attributes=('data-basename="part_begin_"'|s if newrow else ''),
                                            aclass='drow-input', placeholder="YYYY-MM-DD") }}
                    {{ util.form_input_text(name="part_end_{}".format(part_id), label=gettext("End"), type='date',
                                            attributes=('data-basename="part_end_"'|s if newrow else ''),
                                            aclass='drow-input', placeholder="YYYY-MM-DD") }}
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="text-right col-sm-12">
                            <span class="drow-buttonspace">
                                {% if newrow %}
                                    {{ util.input_checkbox("create_{}".format(part_id), label=gettext("Add"),
                                                           attributes='data-basename="create_"'|s, aclass='drow-indicator') }}
                                {% else %}
                                    {{ util.input_checkbox("delete_{}".format(part_id), label=gettext("Remove"),
                                                           readonly=not deletable, aclass='drow-indicator') }}
                                {% endif %}
                            </span>
                        </div>
                    </div>
                    {{ util.form_input_text(name="fee_{}".format(part_id), label=gettext("Event-Part Fee"),
                                            attributes=('data-basename="fee_"'|s if newrow else ''),
                                            aclass='drow-input form-control', anid="input-text-fee_{}".format(part_id),
                                            addon='€') }}

                </div>
            </div>
                <hr />
            {% if not newrow %}
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>{% trans %}Fee Modifier{% endtrans %}</th>
                        <th>{% trans %}Amount{% endtrans %}</th>
                        <th>{% trans %}Linked Field{% endtrans %}</th>
                    </tr>
                </thead>
                <tbody class="drow-container1 fee-modifiers-container" data-outerid0="{{ part_id }}">
                    {% for fee_modifier in fee_modifiers_by_part[part_id].values() %}
                        {{ print_fee_modifier(fee_modifier['part_id'], fee_modifier['id'], aclass='drow-row1') }}
                    {% endfor %}
                     {# Items that were added by the user but failed validation. They are still new and have no official id. #}
                    {% for i in range(1, values.get('fee_modifier_create_last_index', {}).get(part_id, 0) + 1) %}
                        {{ print_fee_modifier(part_id, -i, aclass='drow-new1', newrow=True) }}
                    {% endfor %}
                    {% if not has_registrations %}
                        {{ print_fee_modifier(part_id, -values.get('fee_modifier_create_last_index', {}).get(part_id, 0) - 1,
                                              aclass='drow-prototype1', newrow=True) }}
                    {% endif %}
                </tbody>
            </table>
            {% if not has_registrations %}
                <div class="pull-right p">
                    <button type="button" class="btn btn-success btn-xs add-fee-modifier-button softhide">
                        {{ util.make_icon('plus') }} {% trans %}Add Fee Modifier{% endtrans %}</button>
                </div>
            {% endif %}
            {% endif %}
                <hr />
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>{% trans %}Coursetrack{% endtrans %}</th>
                        <th>{% trans %}Shortname{% endtrans %}</th>
                        <th>{% trans %}Course Choices{% endtrans %}</th>
                        <th>{% trans %}Req. Choices{% endtrans %}</th>
                        <th>{% trans %}Sortkey{% endtrans %}</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody class="drow-container1 course-tracks-container" data-outerid0="{{ part_id }}">
                    {% for track_id, title in tracks|keydictsort(EntitySorter.course_track) %}
                        {{ print_track(part_id, track_id, aclass='drow-row1') }}
                    {% endfor%}
                    {# Items that were added by the user but failed validation. They are still new and have no official id. #}
                    {% for i in range(1, values.get('track_create_last_index', {}).get(part_id, 0) + 1) %}
                        {{ print_track(part_id, -i, aclass='drow-new1', newrow=True) }}
                    {% endfor %}
                    {% if not has_registrations %}
                        {{ print_track(part_id, values.get('track_create_last_index', {}).get(part_id, 0) - 1,
                                       aclass='drow-prototype1', newrow=True) }}
                    {% endif %}
                </tbody>
            </table>
            {% if not has_registrations %}
                <div class="pull-right p">
                    <button type="button" class="btn btn-success btn-xs add-track-button softhide">
                        {{ util.make_icon('plus') }} {% trans %}Add Coursetrack{% endtrans %}</button>
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{% block content %}
    <p class="text-warning">{{ util.make_icon('exclamation-triangle') }}
        {% trans %}
            Event parts and course tracks can only be created or deleted if no
            registrations are present yet. Course tracks can only be deleted, if
            there are no courses associated with them.
        {% endtrans %}
    </p>
    <form action="{{ cdedblink('event/part_summary') }}" method="POST" id="partsummaryform" class="form-horizontal">
        {{ util.anti_csrf_token('event/part_summary') }}
        <div id="drow-container">
            {# Old items, already stored in the database #}
            {% for part_id, part in ambience['event']['parts']|keydictsort(EntitySorter.event_part) %}
                {{ print_part(part_id, part_id not in referenced_parts and not has_registrations,
                              tracks=part['tracks'], aclass='drow-row') }}
            {% endfor %}
            {# Items that were added by the user but failed validation. They are still new and have no official id. #}
            {% for i in range(1, values.get('create_last_index', 0) + 1) %}
                {{ print_part(-i, False, aclass='drow-new', newrow=True) }}
            {% endfor %}
            {% if not has_registrations %}
                {# Prototype row. For non-JS users: an empty row with 'create'-checkbox, for JS: prototype for new rows. #}
                {{ print_part(-values.get('create_last_index', 0) - 1, False, aclass='drow-prototype', newrow=True) }}
            {% endif %}
        </div>
        {% if not has_registrations %}
            <p>
                <button type="button" class="btn btn-success softhide pull-right" id="drow-addbutton">
                    {{ util.make_icon('plus') }} {% trans %}Add Event-Part{% endtrans %}
                </button>
            </p>
        {% endif %}
        {{ util.input_submit(value=gettext("Save"), readonly=is_locked) }}
    </form>
    <script nonce="{{ csp_nonce }}">
        function initialize_track_dynrow() {
            $(this).cdedbDynamicRow({
                addButton: $(this).closest('.panel-body').find('.add-track-button'),
                delButtonTitle: "{{ gettext("Remove Coursetrack") }}",
                nestingLevel: 1
            });
        };
        function initialize_fee_modifier_dynrow() {
            $(this).cdedbDynamicRow({
                addButton: $(this).closest('.panel-body').find('.add-fee-modifier-button'),
                delButtonTitle: "{{ gettext("Remove Fee Modifier") }}",
                nestingLevel: 1
            });
        };
        /* Initialize DynamicRow for parts */
        $('#drow-container').cdedbDynamicRow({
            addButton: $('#drow-addbutton'),
            delButtonTitle: "{{ gettext("Remove Event-Part") }}",
            callback: function() {
                $(this).find('.course-tracks-container').each(initialize_track_dynrow);
                $(this).find('.fee-modifiers-container').each(initialize_fee_modifier_dynrow);
            }
        });
        /* Initialize DynamicRow for course-tracks-containers and initialize_fee_modifier_dynrow of existing parts */
        $('.course-tracks-container').each(initialize_track_dynrow);
        $('.fee-modifiers-container').each(initialize_fee_modifier_dynrow);
        /* Update maximum number of required choices with total number of choices */
        function update_min_choices_max() {
            var $input_min_choices = $(this).closest('tr').find('.input-min-choices');
            $input_min_choices.attr('max', $(this).val());
            if (parseInt($(this).val()) < parseInt($input_min_choices.val())) {
                $input_min_choices.val($(this).val());
            }
        }
        $('.input-num-choices')
            .change(update_min_choices_max)
            .each(update_min_choices_max);
        $('#partsummaryform').cdedbProtectChanges();
    </script>
{% endblock %}
