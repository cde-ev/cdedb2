{# This template provides a set of standard macros which should be used to certain create html-elements. #}

{# Macro to load JavaScript files on a per-template basis. This macro should be used the following way in templates, to
   add the correct <script src="..."> tags to the HTML header:

       {% block scripts %}{{ util.cdedb_script('SCRIPTNAME') }}{% endblock %}

   This Macro takes care of including the correct dependencies (other script files (or CSS stylesheets) required for the
   target script) and including each script only once. For the possible values of SCRIPTNAME, take a glance at the
   if-else-ladder down below. #}
{% set script_files = [] %}
{% macro cdedb_script(script) %}
    {%- if not script in script_files %}
        {%- if script == 'queryform' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_queryform.js") }}"></script>
            {{ cdedb_script('selectize') }}
        {%- elif script == 'dynamicrow' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_dynamicrow.js") }}"></script>
        {%- elif script == 'historycollapse' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_historycollapse.js") }}"></script>
        {%- elif script == 'helper' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_helper.js") }}"></script>
        {%- elif script == 'selectize' %}
            <script type="text/javascript" src="{{ staticurl("selectize/selectize.min.js") }}"></script>
            <link rel="stylesheet" type="text/css" href="{{ staticurl("selectize/selectize.bootstrap3.css") }}" />
        {%- elif script == 'csv-tools' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_csv_tools.js") }}"></script>
        {%- elif script == 'search-persona' %}
            {{- cdedb_script('selectize') }}
            <script type="text/javascript" src="{{ staticurl("cdedb_searchpersona.js") }}"></script>
        {%- elif script == 'change-mailinglist' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_change_mailinglist.js") }}"></script>
        {%- elif script == 'voting' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_voting.js") }}"></script>
        {%- elif script == 'questionnaire_config' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_questionnaire_config.js") }}"></script>
        {%- elif script == 'manage_participants' %}
            {{- cdedb_script('selectize') }}
            <script type="text/javascript" src="{{ staticurl("cdedb_manage_participants.js") }}"></script>
        {%- elif script == 'orderrow' %}
            <script type="text/javascript" src="{{ staticurl("cdedb_orderrow.js") }}"></script>
        {%- endif %}
        {%- do script_files.append(script) %}
    {%- endif %}
{%- endmacro %}


{# ############################################ #
 # General helper macros for links, icons, etc. #
 # ############################################ #}

{# A really generic macro to generate <a href=""></a> tags.

   ref        The full URL to reference to
   label      The Link text. (Please consider to add some sr-only text, if this is empty, to maintain a11y.
   readonly   If True, a simple text instead of a link is added
   icon       If set, the icon is prepended to the link text. Must be the short icon name, as passed to make_icon()
   aclass     Additional HTML/CSS classes to be added to the link tag
   active     If this link is part of a navigation menu, the current active page/tag can be highlighted by setting this
              to True
   title      A HTML `title` attribute (hover text) to add to the link #}
{% macro href(ref, label, readonly=False, icon="", aclass='', active=False, title='') -%}
{% if readonly %}<span {% else -%}<a href="{{ ref }}"{% endif %}
{%- if aclass or active or readonly -%}
    class="{{ aclass }}{% if active %} active{% endif -%}
           {% if readonly %} {% if not 'btn' in aclass %}link-{% endif%}disabled{% endif %}"
{%- endif %}
{%- if active %} aria-current="page" {% endif %}{# We use the `active` attribute for navigation only #}
{%- if title %} title="{{ title }}"{% endif %}>
{%- if icon %}{{ make_icon(icon) }}&nbsp;{% endif %}{{ label }}
{%- if readonly %}</span>{%- else -%}</a>{% endif %}
{%- endmacro %}

{# Macro to place a Bootstrap/Glyphicon icon

   icon       The icon's name. See https://getbootstrap.com/docs/3.3/components/#glyphicons for a list of available
              icons. Only the distinguishing part of the icon's CSS class is required. E.g. "ok" instead of
              "glyphicon glyphicon-ok"
   aclass     An additonal HTML/CSS class to add to the icon. Useful if you want to access the icon via JavaScript
   title      A HTML `title` attribute (hover text) to add to the icon. This is also used as arialabel, if you don't
              provide one explicitly.
   arialabel  A screenreader-only text to append to the icon. Please make sure, to provide one (or a title) for every
              semantically important icon in support of a11y. #}
{% macro make_icon(icon, aclass='', title='', arialabel='') -%}
    {% if title and not arialabel %}{% set arialabel = title %}{% endif -%}
    <span class="glyphicon glyphicon-{{ icon }} {{aclass }}"
            {%- if title %} title="{{ title }}"{% endif %} aria-hidden="true"></span>
    {%- if arialabel %}
        <span class="sr-only">{{ arialabel }}</span>
    {%- endif %}
{%- endmacro %}


{# ############## #
 # Layout helpers #
 # ############## #}

{% macro bootstrap_panel(title="", aclass="panel-default", icon="", anid="") %}
    <div class="panel {{ aclass }}"{% if anid %} id="{{ anid }}"{% endif %}>
        {%- if title or icon %}
            <div class="panel-heading">
                <h3 class="panel-title">{% if icon %}{{ make_icon(icon) }} {% endif %}{{ title }}</h3>
            </div>
        {%- endif %}
        <div class="panel-body">
            {{- caller() }}
        </div>
    </div>
{%- endmacro %}


{# ######################################## #
 # Special purpose links and element macros #
 # ######################################## #}

{# Macro to visually represent an immutable boolean value

   checked    The actual boolean value to show
   anid       The HTML id to add to the element. Useful for testing purposes.
   titles     An optional list/tuple of two elements: The HTML `title` attribute (hover text) for the False state and
              the title attribute for the True state. The title is also used as an screenreader-readable hidden text.
              If you don't provide `titles` and the icon is semantically important, please make sure to make the value
              accessible to screen readers by any other means. #}
{% macro deko_checkbox(checked, anid='', titles=[]) %}
    {%- if checked %}
        <span class="glyphicon glyphicon-ok-sign"{% if anid %} id="{{ anid }}"{% endif %} data-checked="True"
                {%- if titles[1] %} title="{{ titles[1] }}"{% endif %} aria-hidden="true"></span>{#-#}
        <span class="sr-only">{% if titles[1] %}{{ titles[1] }}{% endif %}</span>
    {%- elif checked is not none %}
        <span class="glyphicon glyphicon-remove-circle"{% if anid %} id="{{ anid }}"{% endif %} data-checked="False"
                {%- if titles[0] %} title="{{ titles[0] }}"{% endif %} aria-hidden="true"></span>{#-#}
        <span class="sr-only">{% if titles[0] %}{{ titles[0] }}{% endif %}</span>
    {%- endif %}
{%- endmacro %}

{% macro persona_anchor(persona, verbose=False, quote_me=False, event_id=None, ml_id=None) %}
    {%- if verbose -%}
        {{ href(show_user_link(persona['id'], quote_me, event_id=event_id, ml_id=ml_id), "{} {} {} {}".format(
              persona['title'], persona['given_names'],
              persona['family_name'], persona['name_supplement'])) }}
    {%- else -%}
        {{ href(show_user_link(persona['id'], quote_me, event_id=event_id, ml_id=ml_id), "{} {}".format(
              persona['given_names'], persona['family_name'])) }}
    {%- endif -%}
{% endmacro %}

{% macro output_given_displayname(given_names, display_name) %}
    {%- if display_name in given_names %}
        {%- if not display_name or display_name == given_names -%}
            {{ given_names }}
        {%- else -%}
            {{ '<em>{}</em>'.format(display_name|e).join((given_names|e).split(display_name|e))|s }}
        {%- endif %}
    {%- else -%}
        {{ given_names }} ({{ display_name }})
    {%- endif -%}
{% endmacro %}

{# Macro to generate breadcrumb links. Should be used like this in individual templates:

       {% block breadcrumb %}
            {{ super() }}
            {{ util.breadcrumb_link(cdedblink("realm/intermediate_endpoint"), "Intermediate label") }}
            {{ util.breadcrumb_link(cdedblink("realm/endpoint"), "Page link label", active=True) }}
       {% endblock %}

   Where the displayed link texts (`label`) directly correspond to the navigation links or button labels, the user has
   to follow to reach this page.

   The active=True parameter should be used exaclty for the link to the current page, which is alwas the las Breadcrumb
   link. The readonly=True parameters should be used for rare cases, in which an intermediate page – which is normally
   required to navigate to the currente page – is not accessible to the user (e.g. visible course listing of not yet
   published event, only reachable via direct link).

   An icon (given by its name – see comments of make_icon() macro) should exactly be used, when the Breadcrumb link
   represents a page of a dynamic object (e.g. a persona, an event, a course) and is labeled with this object's
   name/title. In this case the icon should represent the type of the named object. For a complex example, take a look
   at the event/change_course template.
  #}
{% macro breadcrumb_link(ref, label, icon="", active=False, readonly=False) %}
    {%- if active or readonly -%}
        <li {% if active %}class="active" aria-current="location"{% endif %}>
            {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ label -}}
        </li>
    {%- else -%}
        <li><a href="{{ ref }}">
                {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ label -}}
        </a></li>
    {%- endif -%}
{% endmacro %}

{# Helper macro to create a large, left-floated 'Help' button, linking to the off-page documentation as referenced by
   docurl(). #}
{% macro doclink(topic, anchor=None) %}
    <a href="{{ docurl(topic, anchor) }}" class="btn btn-info btn-lg pull-right" target="_blank">
        {{ make_icon('question-sign') }}
    {% trans -%}
        Help
    {%- endtrans %}
    <span class="sr-only">
        {% trans -%}
            for this site
        {%- endtrans %}
    </span>
    </a>
{%- endmacro %}


{# ########################################################################################### #
 # Macros to add additional information (infotext, validation errors, ...) around input fields #
 # ########################################################################################### #}

{% macro format_error(error) %}
    {%- if error.args|length == 1 %}
        {{- gettext(error.args[0]|string) }}<br />
    {%- elif error.args|length == 2 %}
        {{- gettext(error.args[0]|string)|format(**error.args[1]) }}<br />
    {%- elif error.args|length == 0 %}
        {#- Display nothing if no message was supplied. #}
    {%- else %}
        Nicht wohlgeformter Fehler.<br />
    {%- endif %}
{%- endmacro %}

{% macro output_info(info, link='') %}
    {%- if info %}
        <p class="help-block no-color">
	    {{ make_icon('info-sign') }} {{ info }}
	    {% if link %}
	        {{ link }}
	    {% endif %}
	</p>
    {%- endif %}
{%- endmacro %}

{% macro output_errors(name, displayerrors=True, wrapper=False) %}
    {%- if displayerrors and name in errors %}
        {%- if wrapper %}<div class="has-error">{% endif %}
        {%- for error in errors.get(name, []) if error %}
            {% if error.args %}
                <div class="help-block">
                    {{ make_icon('exclamation-sign') }}
                    {{ format_error(error) }}
                </div>
            {% endif %}
        {%- endfor %}
        {%- if wrapper %}</div>{% endif %}
    {%- endif %}
{%- endmacro %}


{# ################### #
 # (Form) input macros #
 # ################### #}

{# The input_* macros generate a blank input field of the given type. Note that some input types don't have an own macro
   but can be produced by passing an additional parameter to another macro:

   * password: input_text(..., type="password")
   * date etc.: input_text(..., type="date")
   * radio: input_checkbox(..., radio=True)

   The form_input_* wraps the specific input macro and adds some divs, label and error output. These macros are meant to
   be used inside an form.form-horizontal. (If you want to use it in a non-horizontal form, you may pass the
   horizontal=False parameter.) #}
{% macro input_hidden(name, value=None, defaultvalue='', anid='', aclass='') %}
    {%- if value is none -%}
        <input type="hidden" name="{{ name }}" value="{{ values.get(name, defaultvalue) }}"
          {%- if anid %} id="{{ anid }}" {% endif %} {%- if aclass %} class="{{ aclass }}"{% endif %} />
    {%- else -%}
        <input type="hidden" name="{{ name }}" value="{{ value }}" {%- if anid %} id="{{ anid }}" {% endif %}
          {%- if aclass %} class="{{ aclass }}"{% endif %} />
    {%- endif -%}
{% endmacro %}

{% macro form_input_general(name='', label='', anid='', small=False, info='', displayerrors=True,
        horizontal=True, labelid='', infolink='') %}
    <div class="form-group {% if name in errors %}has-error{% endif %}">
        {%- if label %}
            <label{% if labelid %} id="{{ labelid }}"{% endif %}{% if anid %} for="{{ anid }}"{% endif %} {# -#}
                    class="{% if horizontal %}{% if small %}col-sm-2{% else %}col-sm-4{% endif %}{% endif %} {# -#}
                           control-label">
                {{- label -}}
            </label>
        {%- endif %}
        <div {%- if horizontal %} class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}
                                       {%- if not label %}
                                           {%- if small %} col-sm-offset-2{% else %} col-sm-offset-4{% endif %}
                                       {%- endif %}"{% endif %}>
            {{- caller() }}
            {{- output_errors(name, displayerrors) }}
            {{- output_info(info, infolink) }}
        </div>
    </div>
{%- endmacro %}

{% macro input_text(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, type='text',
        placeholder='', arialabel='', attributes='') %}
    <input type="{{ type }}" {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {%- if placeholder %} placeholder="{{ placeholder }}"{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} {# -#}
            name="{{ name }}"
            {%- if type != 'password' %}
                {%- if type == 'date' %}
                    value="{{ values.get(name, defaultvalue)|date('%Y-%m-%d', passthrough=True) }}"
                {%- elif type == 'datetime-local' %}
                    value="{{ values.get(name, defaultvalue)|datetime('%Y-%m-%dT%H:%M:%S', passthrough=True) }}"
                {%- else %}
                    value="{{ values.get(name, defaultvalue) }}"
                {%- endif %}
            {%- endif %}
            {%- if readonly %} disabled="disabled"{% endif %} {{ attributes }} />
{%- endmacro %}

{% macro form_input_text(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
    maxlength=0, type='text', placeholder='', small=False, horizontal=True, aclass="", attributes='', infolink='') %}
    {%- if not anid %}{% set anid = "input-text-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink) %}
        {{- input_text(name, readonly, defaultvalue, anid, maxlength=maxlength, type=type, placeholder=placeholder,
                aclass="form-control " + aclass, attributes=attributes) }}
    {%- endcall %}
{%- endmacro %}

{% macro input_file(name, readonly=False, defaultvalue='', anid='', aclass='form-control', accept='', arialabel='') %}
    <input type="file" {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if accept %} class="{{ accept }}"{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} value="{{ values.get(name, defaultvalue) }}"{#-#}
            name="{{ name }}" {%- if readonly %} disabled="disabled"{% endif %} />
{%- endmacro %}

{% macro form_input_file(name, label='', info='', displayerrors=True, readonly=False, accept='', anid='',
        small=False, horizontal=True, infolink='') %}
    {%- if not anid %}{% set anid = "input-file-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink) %}
        {{- input_file(name, readonly, defaultvalue, anid, accept=accept) }}
    {%- endcall %}
{%- endmacro %}

{% macro input_textarea(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, rows=3,
                        arialabel='', attributes='') %}
    <textarea {% if aclass %} class="{{ aclass }}"{% endif %} rows="{{ rows }}"
            {%- if anid %} id="{{ anid }}"{% endif %} {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %} {# -#}
            name="{{ name }}" {% if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {%- if readonly %} disabled="disabled"{% endif %} {{ attributes }}>
        {{- values.get(name, defaultvalue) -}}
    </textarea>
{%- endmacro %}

{% macro form_input_textarea(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
        aclass='', small=False, maxlength=0, rows=3, horizontal=True, attributes='', infolink='') %}
    {%- if not anid %}{% set anid = "input-textarea-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink) %}
        {{- input_textarea(name, readonly, defaultvalue, anid, maxlength=maxlength, rows=rows, attributes=attributes,
                          aclass='form-control '+aclass) }}
    {%- endcall %}
{%- endmacro %}

{# list as default value is not supported yet #}
{% macro input_checkbox(name, label="", value=True, defaultvalue='', readonly=False, anid='', aclass='', inline=False,
        radio=False, arialabel='', attributes='') -%}
    <label{% if inline %} class="{% if radio %}radio{% else %}checkbox{% endif %}-inline"{% endif %}>
        <input type="{% if radio %}radio{% else %}checkbox{% endif %}" name="{{ name }}" value="{{ value }}"
            {%- if value|stringIn(values.getlist(name)) or (not name in values and value|string == defaultvalue) %} {# -#}
                checked="checked"
            {%- endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if readonly %} disabled="disabled"{% endif %} {%- if anid %} id="{{ anid }}"{% endif %}
            {%- if aclass %} class="{{ aclass }}"{% endif %} {{ attributes }} />
        {{ label -}}
    </label>
{%- endmacro %}

{% macro input_checkboxes(name, entries, readonly=False, defaultvalue='', inline=False, radio=False, aclass='',
        arialabeledby="") %}
    <div role="{% if radio %}radio{% endif %}group"
            {%- if arialabeledby %} aria-labeledby="{{ arialabeledby }}"{% endif %}>
        {%- if arialabel %}<legend class="sr-only">{{ arialabel }}</legend>{% endif %}
        {%- for entry_value, entry_label in entries %}
            {% if not inline -%}
                <div class="{% if radio %}radio{% else %}checkbox{% endif %}{% if readonly %} disabled{% endif %}">
            {%- endif -%}
                {{ input_checkbox(name, entry_label, entry_value, defaultvalue, readonly, inline=inline, radio=radio,
                                  aclass=aclass) }}
            {%- if not inline %}</div>{% endif %}
        {%- endfor %}
    </div>
{%- endmacro %}

{% macro form_input_checkbox(name, label="", value=True, info='', displayerrors=True, readonly=False, defaultvalue='',
        anid='', horizontal=True, small=False, attributes='', infolink='') %}
    {#- This is the version for a single checkbox as opposed to form_input_checkboxes(). #}
    {%- if not anid %}{% set anid = "input-checkbox-{}".format(name) %}{% endif %}
    <div class="form-group {% if name in errors %}has-error{% endif %}">
        <div {% if horizontal %}class="{% if small %}col-sm-6 col-sm-offset-2{% else -%}
                col-sm-8 col-sm-offset-4{% endif %}"{% endif %}>
            <div class="checkbox {% if readonly %}disabled{% endif %}">
                {{ input_checkbox(name, label, value, defaultvalue, readonly, anid, attributes=attributes) }}
            </div>
            {{- output_errors(name, displayerrors) }}
            {{- output_info(info, infolink) }}
        </div>
    </div>
{%- endmacro %}

{% macro form_input_checkboxes(name, entries, label='', info='', displayerrors=True, readonly=False, defaultvalue='',
        small=False, radio=False, horizontal=True, aclass='', labelid='', infolink='') %}
    {#- This is the version for multiple checkboxes as opposed to input_checkbox().
       entries is of type [(str, str)]. #}
    {%- if not labelid %}{% set labelid = "inputgroup-{}-label".format(name) %}{% endif %}
    {%- call form_input_general(name, label, '', small, info, displayerrors, horizontal, labelid, infolink=infolink) %}
        {{- input_checkboxes(name, entries, readonly=readonly, defaultvalue=defaultvalue, radio=radio, aclass=aclass,
                arialabeledby=labelid) }}
    {%- endcall %}
{%- endmacro %}


{% macro input_select(name, entries, readonly=False, defaultvalue=None, anid='', aclass='form-control',
        nulloption=None, arialabel='', attributes="") %}
    <select name="{{ name }}" {%- if anid %} id="{{ anid }}"{% endif %}
            {%- if aclass %} class="{{ aclass }}"{% endif %}{% if readonly %} disabled="disabled"{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %} {{ attributes }}>
        {%- if nulloption is not none %}
            <option value=""{% if values.get(name, defaultvalue) == None %} selected="selected"{% endif %}>
                {{- nulloption -}}
            </option>
        {%- endif %}
        {%- for value, label in entries %}
            <option value="{{ value }}"
              {%- if values.get(name, defaultvalue)|string == value|string %} selected="selected"{% endif %}>
                {{- label -}}
            </option>
        {%- endfor %}
    </select>
{%- endmacro %}

{% macro form_input_select(name, entries, label="", info='', displayerrors=True, readonly=False, defaultvalue=None,
        nulloption=None, anid='', small=False, horizontal=True, aclass="", attributes="", infolink="") %}
    {%- if not anid %}{% set anid = "input-select-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink) %}
        {{- input_select(name, entries, readonly, defaultvalue, anid, nulloption=nulloption,
                aclass="form-control " + aclass, attributes=attributes) }}
    {%- endcall %}
{%- endmacro%}

{% macro input_static(value, anid='') %}
    <div class="form-control-static"{% if anid %}id="{{ anid }}"{% endif %}>{{ value }}</div>
{%- endmacro %}
{% macro form_input_static(label="", info='', value='', anid='', small=False, horizontal=True, infolink='') %}
    {%- if caller %}{% set value=caller() %}{% endif %}
    {%- call form_input_general(None, label, anid, small, info, False, horizontal, infolink=infolink) %}
        <div class="form-control-static"{% if anid %}id="{{ anid }}"{% endif %}>{{ value }}</div>
    {%- endcall %}
{%- endmacro %}

{% macro input_submit(value="Save", name="submitform", anid='', aclass='btn btn-primary', icon="ok",
        readonly=False, title='', arialabel='') %}
    <button type="submit" name="{{ name }}" {%- if readonly %} disabled="disabled"{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if title %} title="{{ title }}"{% endif %} value="True"
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}>
            {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ value -}}</button>
{%- endmacro %}

{% macro form_input_submit(value="Save", name="submitform", readonly=False, anid='',
        aclass='btn btn-primary', icon="ok", cancellink='', cancelicon='remove', cancelvalue="Cancel",
        small=False, horizontal=True) %}
    <div class="form-group mosp">
        <div {% if horizontal %}class="{% if small %}col-sm-offset-2 col-sm-10{% else -%}
                col-sm-offset-4 col-sm-8{% endif %}"{% endif %}>
            {{- input_submit(gettext(value), name, anid, aclass, icon, readonly) }}
            {%- if cancellink %}
                &emsp; {{ href(cancellink, gettext(cancelvalue), icon=cancelicon, aclass="btn btn-default cancel") }}
            {%- endif %}
        </div>
    </div>
{%- endmacro %}


{# ############################ #
 # Special purpose input macros #
 # ############################ #}

{% macro form_input_from_to(name1, name2, label='', info='', type='number', small=False, displayerrors=True,
        horizontal=True, infolink='') %}
    <div class="form-group {% if name1 in errors or name2 in errors %}has-error{% endif %}">
        <label class="{% if horizontal %}{% if small %}col-sm-2{% else %}col-sm-4{% endif %}{% endif %} control-label">
            {{- label -}}
        </label>
        <div {% if horizontal %}class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}"{% endif %}>
            <div class="input-group">
                <span class="input-group-addon">{% trans -%}from{%- endtrans %}</span>
                {{ input_text(name=name1, type=type, arialabel=gettext('{} from').format(label)) }}
                <span class="input-group-addon">{% trans -%}to{%- endtrans %}</span>
                {{ input_text(name=name2, type=type, arialabel=gettext('{} to').format(label)) }}
            </div>
            {{- output_errors(name1, displayerrors) }}
            {{- output_errors(name2, displayerrors) }}
            {{- output_info(info, infolink) }}
        </div>
    </div>
{% endmacro %}

{% macro event_field_input(fields, name='', readonly=False, defaultvalue='', anid='') %}
    {%- if not name %}
        {%- set name = "fields.{}".format(fields['field_name']) %}
    {%- endif %}
    {%- if fields['entries'] %}
        {{- input_select(name=name, entries=fields['entries'], nulloption="",
                        readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
    {%- else %}
        {% set datatypes = enums['FieldDatatypes'] %}
        {%- if fields['kind'] == datatypes.bool %}
            <div class="checkbox">
                {{- input_checkbox(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, label=fields['field_name']) -}}
            </div>
        {%- elif fields['kind'] == datatypes.str %}
            {{- input_textarea(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, rows=3) }}
        {%- elif fields['kind'] == datatypes.int %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="number",
                          placeholder="0") }}
        {%- elif fields['kind'] == datatypes.decimal %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, placeholder="0.0") }}
        {%- elif fields['kind'] == datatypes.date %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="date",
                          placeholder="YYYY-MM-DD") }}
        {%- elif fields['kind'] == datatypes.datetime %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="datetime-local",
                          placeholder="YYYY-MM-DDThh:ii:ss") }}
        {%- else %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{% macro form_event_field_input(fields, name='', label=None, info='', displayerrors=True, readonly=False,
                                defaultvalue='', anid='', force_label=False, infolink='') %}
    {%- if label is none %}{% set label = fields['field_name'] %}{% endif %}
    {%- if not anid %}{% set anid = "event-input-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, (None if fields['kind'] == enums['FieldDatatypes'].bool and not force_label else label), anid, False,
                               info, displayerrors, True, infolink=infolink) %}
        {{- event_field_input(fields, name, readonly, defaultvalue, anid) }}
    {%- endcall %}
{%- endmacro %}

{# Generate an anti CSRF (Cross-Site Request Forgery) token and add it as hidden input to an HTML form.

   The frontend application checks the anti CSRF token for every called endpoint which is marked for this check, which
   is the default for every POST-enabled endpoint. It validates the hash and checks the value against the login user's
   persona_id. This should prevent people from performing an CSRF attack, as they are unable to reproduce the hashed
   token.

   For protection against replay attacks, we use the default timeout of config.PARAMETER_TIMEOUT #}
{% macro anti_csrf_token(target) %}
    {{ input_hidden(ANTI_CSRF_TOKEN_NAME, encode_parameter(target, ANTI_CSRF_TOKEN_NAME, user.persona_id)) }}
{% endmacro %}
