{# This template provides a set of standard macros which should be used to certain create html-elements. #}

{# Macro to load JavaScript files on a per-template basis. This macro should be used the following way in templates, to
   add the correct <script src="..."> tags to the HTML header:

       {% block scripts %}{{ util.cdedb_script('SCRIPTFILE') }}{% endblock %}

   This Macro takes care of including the correct dependencies (other script files (or CSS stylesheets) required for the
   target script) and including each script only once. #}
{% set script_files = [] %}
{% macro cdedb_script(script) %}
    {%- if not script in script_files %}
        {%- if script == 'cdedb_queryform.js' %}
            {{- cdedb_script('selectize/selectize.min.js') }}
        {%- elif script == 'selectize/selectize.min.js' %}
            <link rel="stylesheet" href="{{ staticurl("selectize/selectize.bootstrap3.css") }}" />
        {%- elif script == 'cdedb_searchpersona.js' %}
            {{- cdedb_script('selectize/selectize.min.js') }}
        {%- elif script == 'cdedb_manage_participants.js' %}
            {{- cdedb_script('selectize/selectize.min.js') }}
        {%- endif %}
        <script  src="{{ staticurl(script) }}"></script>
        {%- do script_files.append(script) %}
    {%- endif %}
{%- endmacro %}


{# ############################################ #
 # General helper macros for links, icons, etc. #
 # ############################################ #}

{# A really generic macro to generate <a href=""></a> tags.

   ref        The full URL to reference to
   label      The Link text. (Please consider to add some sr-only text, if this is empty, to maintain a11y.
   readonly   If True, a simple text instead of a link is added
   icon       If set, the icon is prepended to the link text. Must be the short icon name, as passed to make_icon()
   aclass     Additional HTML/CSS classes to be added to the link tag
   active     If this link is part of a navigation menu, the current active page/tag can be highlighted by setting this
              to True
   title      A HTML `title` attribute (hover text) to add to the link
   rel        Allows to set the rel attribute #}
{% macro href(ref, label, readonly=False, icon=None, aclass='', active=False, title='', rel='') -%}
{% if readonly %}<span {% else %}<a href="{{ ref }}" {% if rel %} rel="{{ rel }}" {% endif %}{% endif %}
{%- if aclass or active or readonly -%}
    class="{{ aclass }}{% if active %} active{% endif -%}
           {% if readonly %} {% if not 'btn' in aclass %}link-{% endif%}disabled{% endif %}"
{%- endif %}
{%- if active %} aria-current="page" {% endif %}{# We use the `active` attribute for navigation only #}
{%- if title %} title="{{ title }}"{% endif %}>
{%- if icon %}{{ make_icon(icon) }}&nbsp;{% endif %}{{ label }}
{%- if readonly %}</span>{%- else -%}</a>{% endif %}
{%- endmacro %}

{# Macro to place a Fontawesome icon

   icon       The icon's name. See https://fontawesome.com/icons for a list of available icons.
              Only the distinguishing part of the icon's CSS class is required (e.g. "ok" instead of "fas fa-ok").
              If the icon contains a space the full class is required. (e.g. "far fa-star")
   aclass     An additonal HTML/CSS class to add to the icon. Useful if you want to access the icon via JavaScript
   title      A HTML `title` attribute (hover text) to add to the icon.
              This is also used as arialabel, if you don't provide one explicitly.
   arialabel  A screenreader-only text to append to the icon.
              Please make sure, to provide one (or a title) for every semantically important icon in support of a11y. #}
{% macro make_icon(icon, fixed_width=True, aclass="", title=None, arialabel=None) -%}
    <span{{ dict(
        class=("fas fa-{}".format(icon) if " " not in icon else icon)
            + (" fa-fw" if fixed_width else "")
            + (" {}".format(aclass) if aclass else ""),
        title=title,
    )|xmlattr }} aria-hidden="true"></span>
    {%- if arialabel or title %}<span class="sr-only">{{ arialabel or title }}</span>{% endif %}
{%- endmacro%}


{# ############## #
 # Layout helpers #
 # ############## #}

{% macro bootstrap_panel(title="", aclass="panel-default", icon=None, anid="") %}
    <div class="panel {{ aclass }}"{% if anid %} id="{{ anid }}"{% endif %}>
        {%- if title or icon %}
            <div class="panel-heading">
                <h3 class="panel-title">{% if icon %}{{ make_icon(icon) }} {% endif %}{{ title }}</h3>
            </div>
        {%- endif %}
        <div class="panel-body">
            {{- caller() }}
        </div>
    </div>
{%- endmacro %}


{# ######################################## #
 # Special purpose links and element macros #
 # ######################################## #}

{# Macro to visually represent an immutable boolean value

   checked    The actual boolean value to show
   anid       The HTML id to add to the element. Useful for testing purposes.
   titles     An optional list/tuple of two elements: The HTML `title` attribute (hover text) for the False state and
              the title attribute for the True state. The title is also used as an screenreader-readable hidden text.
              If you don't provide `titles` and the icon is semantically important, please make sure to make the value
              accessible to screen readers by any other means. #}
{% macro deko_checkbox(checked, anid='', titles=[]) %}
    {%- if checked %}
        <span class="fas fa-check-circle"{% if anid %} id="{{ anid }}"{% endif %} data-checked="True"
                {%- if titles[1] %} title="{{ titles[1] }}"{% endif %} aria-hidden="true"></span>{#-#}
        <span class="sr-only">{% if titles[1] %}{{ titles[1] }}{% endif %}</span>
    {%- elif checked is not none %}
        <span class="far fa-times-circle"{% if anid %} id="{{ anid }}"{% endif %} data-checked="False"
                {%- if titles[0] %} title="{{ titles[0] }}"{% endif %} aria-hidden="true"></span>{#-#}
        <span class="sr-only">{% if titles[0] %}{{ titles[0] }}{% endif %}</span>
    {%- endif %}
{%- endmacro %}

{% macro persona_anchor(persona, verbose=False, quote_me=False, event_id=None, ml_id=None) %}
    {%- if verbose -%}
        {{ href(show_user_link(persona['id'], quote_me, event_id=event_id, ml_id=ml_id), "{} {} {} {}".format(
              persona['title'], persona['given_names'],
              persona['family_name'], persona['name_supplement'])) }}
    {%- else -%}
        {{ href(show_user_link(persona['id'], quote_me, event_id=event_id, ml_id=ml_id), "{} {}".format(
              persona['given_names'], persona['family_name'])) }}
    {%- endif -%}
{% endmacro %}

{% macro output_given_displayname(given_names, display_name) %}
    {%- if display_name in given_names %}
        {%- if not display_name or display_name == given_names -%}
            {{ given_names }}
        {%- else -%}
            {{ '<em>{}</em>'.format(display_name|e).join((given_names|e).split(display_name|e))|s }}
        {%- endif %}
    {%- else -%}
        {{ given_names }} ({{ display_name }})
    {%- endif -%}
{% endmacro %}

{% macro tel_link(phonenumber) %}
    {% set linknumber = phonenumber|replace(" ", "")|replace("(", "")|replace(")", "")|replace("/", "") %}
    {%- if linknumber[0] == "+" -%}
        {{ util.href('tel:%s'|format(linknumber), phonenumber) }}
    {%- elif linknumber[0] == "0" -%}
        {{ util.href('tel:%s'|format(linknumber|replace("0", "+49", 1)), phonenumber) }}
    {%- endif -%}
{% endmacro %}

{% macro web_link(weblink) %}
    {%- if weblink[0:4] == "http" -%}
        {{ util.href(weblink, weblink) }}
    {%- else -%}
        {{ util.href('https://%s'|format(weblink), weblink) }}
    {%- endif -%}
{% endmacro %}

{# Macro to generate breadcrumb links. Should be used like this in individual templates:

       {% block breadcrumb %}
            {{ super() }}
            {{ util.breadcrumb_link(cdedblink("realm/intermediate_endpoint"), "Intermediate label") }}
            {{ util.breadcrumb_link(cdedblink("realm/endpoint"), "Page link label", active=True) }}
       {% endblock %}

   Where the displayed link texts (`label`) directly correspond to the navigation links or button labels, the user has
   to follow to reach this page.

   The active=True parameter should be used exaclty for the link to the current page, which is alwas the las Breadcrumb
   link. The readonly=True parameters should be used for rare cases, in which an intermediate page – which is normally
   required to navigate to the currente page – is not accessible to the user (e.g. visible course listing of not yet
   published event, only reachable via direct link).

   An icon (given by its name – see comments of make_icon() macro) should exactly be used, when the Breadcrumb link
   represents a page of a dynamic object (e.g. a persona, an event, a course) and is labeled with this object's
   name/title. In this case the icon should represent the type of the named object. For a complex example, take a look
   at the event/change_course template.
  #}
{% macro breadcrumb_link(ref, label, icon=None, active=False, readonly=False) %}
    {%- if active or readonly -%}
        <li {% if active %}class="active" aria-current="location"{% endif %}>
            {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ label -}}
        </li>
    {%- else -%}
        <li><a href="{{ ref }}">
                {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ label -}}
        </a></li>
    {%- endif -%}
{% endmacro %}

{# Helper macro to create a large, left-floated 'Help' button, linking to the off-page documentation as referenced by
   docurl(). #}
{% macro doclink(topic, anchor=None) %}
    <a href="{{ docurl(topic, anchor) }}" class="btn btn-info btn-lg pull-right" target="_blank">
        {{ make_icon('question-circle') }}
    {% trans %}
        Help
    {% endtrans %}
    <span class="sr-only">
        {% trans %}
            for this site
        {% endtrans %}
    </span>
    </a>
{%- endmacro %}


{# ########################################################################################### #
 # Macros to add additional information (infotext, validation errors, ...) around input fields #
 # ########################################################################################### #}

{% macro format_error(error) %}
    {%- if error.args|length == 1 %}
        {{- gettext(error.args[0]|string) }}<br />
    {%- elif error.args|length == 2 %}
        {{- gettext(error.args[0]|string)|format(**error.args[1]) }}<br />
    {%- elif error.args|length == 0 %}
        {#- Display nothing if no message was supplied. #}
    {%- else %}
        Nicht wohlgeformter Fehler.<br />
    {%- endif %}
{%- endmacro %}

{% macro output_info(info, link='') %}
    {%- if info %}
        <p class="help-block no-color">
	    {{ make_icon('info-circle') }} {{ info }}
	    {% if link %}
	        {{ link }}
	    {% endif %}
	</p>
    {%- endif %}
{%- endmacro %}

{% macro output_errors(name, displayerrors=True, wrapper=False, differentiate_warnings=True) %}
    {%- if displayerrors and name in errors %}
        {%- if wrapper %}
            <div class=" {% if differentiate_warnings and is_warning(name) %}
                             has-warning
                         {% else %}
                             has-error
                         {% endif %}">
        {% endif %}
        {# TODO sort #}
        {%- for error in errors.get(name, []) if error %}
            {% if error.args %}
                <div class="help-block">
                    {{ make_icon('exclamation-circle') }}
                    {{ format_error(error) }}
                </div>
            {% endif %}
        {%- endfor %}
        {%- if wrapper %}</div>{% endif %}
    {%- endif %}
{%- endmacro %}


{# ################### #
 # (Form) input macros #
 # ################### #}

{# The input_* macros generate a blank input field of the given type. Note that some input types don't have an own macro
   but can be produced by passing an additional parameter to another macro:

   * password: input_text(..., type="password")
   * date etc.: input_text(..., type="date")
   * radio: input_checkbox(..., radio=True)

   The form_input_* wraps the specific input macro and adds some divs, label and error output. These macros are meant to
   be used inside an form.form-horizontal. (If you want to use it in a non-horizontal form, you may pass the
   horizontal=False parameter.) #}
{% macro input_hidden(name, value=None, defaultvalue='', anid='', aclass='') %}
    {%- if value is none -%}
        <input type="hidden" name="{{ name }}" value="{{ values.get(name, defaultvalue) }}"
          {%- if anid %} id="{{ anid }}" {% endif %} {%- if aclass %} class="{{ aclass }}"{% endif %} />
    {%- else -%}
        <input type="hidden" name="{{ name }}" value="{{ value }}" {%- if anid %} id="{{ anid }}" {% endif %}
          {%- if aclass %} class="{{ aclass }}"{% endif %} />
    {%- endif -%}
{% endmacro %}

{% macro form_input_general(name='', label='', anid='', small=False, info='', displayerrors=True,
        horizontal=True, labelid='', infolink='', addon='', differentiate_warnings=True) %}
    <div class="form-group {% if name in errors %}
                               {% if differentiate_warnings and is_warning(name) %}
                                   has-warning
                               {% else %}
                                   has-error
                               {% endif %}
                           {% endif %}">
        {%- if label %}
            <label{% if labelid %} id="{{ labelid }}"{% endif %}{% if anid %} for="{{ anid }}"{% endif %} {# -#}
                    class="{% if horizontal %}{% if small %}col-sm-2{% else %}col-sm-4{% endif %}{% endif %} {# -#}
                           control-label">
                {{- label -}}
            </label>
        {%- endif %}
        {%- if horizontal %}<div class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}
                                       {%- if not label %}
                                           {%- if small %} col-sm-offset-2{% else %} col-sm-offset-4{% endif %}
                                       {%- endif %}">{% endif %}
        {% if addon %}
            <div class="input-group">
        {% endif %}

            {{- caller() }}

        {% if addon %}
                <span class="input-group-addon">
                    {{ addon }}
                </span>
            </div>
        {% endif %}
            {{- output_errors(name, displayerrors, differentiate_warnings=differentiate_warnings) }}
            {{- output_info(info, infolink) }}
        {%- if horizontal %}</div>{% endif %}
    </div>
{%- endmacro %}

{% macro input_text(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, type='text',
        placeholder='', arialabel='', attributes='') %}
    <input type="{{ type }}" {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {%- if placeholder %} placeholder="{{ placeholder }}"{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} {# -#}
            name="{{ name }}"
            {%- if type != 'password' %}
                {%- if type == 'date' %}
                    value="{{ values.get(name, defaultvalue)|date('%Y-%m-%d', passthrough=True) }}"
                {%- elif type == 'datetime-local' %}
                    value="{{ values.get(name, defaultvalue)|datetime('%Y-%m-%dT%H:%M:%S', passthrough=True) }}"
                {%- else %}
                    value="{{ values.get(name, defaultvalue) }}"
                {%- endif %}
            {%- endif %}
            {%- if readonly %} disabled{% endif %} {{ attributes }} />
            {# TODO use actual readonly and bootstrap styles #}
{%- endmacro %}

{% macro form_input_text(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
    maxlength=0, type='text', placeholder='', small=False, horizontal=True, aclass="", attributes='', infolink='', addon='',
    differentiate_warnings=True) %}
    {%- if not anid %}{% set anid = "input-text-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink, addon=addon,
                                differentiate_warnings=differentiate_warnings) %}
        {{- input_text(name, readonly, defaultvalue, anid, maxlength=maxlength, type=type, placeholder=placeholder,
                aclass="form-control " + aclass, attributes=attributes) }}
    {%- endcall %}
{%- endmacro %}

{% macro input_file(name, readonly=False, defaultvalue='', anid='', aclass='form-control', accept='', arialabel='') %}
    <input type="file" {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if accept %} accept="{{ accept }}"{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} {# -#}
            name="{{ name }}" {%- if readonly %} disabled{% endif %} />
{%- endmacro %}

{% macro form_input_file(name, label='', info='', displayerrors=True, readonly=False, accept='', anid='',
        aclass="", small=False, horizontal=True, infolink='', differentiate_warnings=True) %}
    {%- if not anid %}{% set anid = "input-file-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink,
                                differentiate_warnings=differentiate_warnings) %}
        {{- input_file(name, readonly, defaultvalue, anid, accept=accept, aclass='form-control ' + aclass) }}
    {%- endcall %}
{%- endmacro %}

{% macro input_textarea(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, rows=3,
                        arialabel='', attributes='') %}
    <textarea {% if aclass %} class="{{ aclass }}"{% endif %} rows="{{ rows }}"
            {%- if anid %} id="{{ anid }}"{% endif %} {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %} {# -#}
            name="{{ name }}" {% if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {%- if readonly %} disabled{% endif %} {{ attributes }}>
    {#- TODO sort if this is a list -#}
        {{- values.get(name, defaultvalue) -}}
    </textarea>
{%- endmacro %}

{% macro form_input_textarea(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
        aclass='', small=False, maxlength=0, rows=3, horizontal=True, attributes='', infolink='', differentiate_warnings=True) %}
    {%- if not anid %}{% set anid = "input-textarea-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink,
                                differentiate_warnings=differentiate_warnings) %}
        {{- input_textarea(name, readonly, defaultvalue, anid, maxlength=maxlength, rows=rows, attributes=attributes,
                          aclass='form-control '+aclass) }}
    {%- endcall %}
{%- endmacro %}

{# list as default value is not supported yet #}
{% macro input_checkbox(name, label="", value=True, defaultvalue='', readonly=False, anid='', aclass='', inline=False,
        radio=False, arialabel='', attributes='') -%}
    <label{% if inline %} class="{% if radio %}radio{% else %}checkbox{% endif %}-inline"{% endif %}>
        <input type="{% if radio %}radio{% else %}checkbox{% endif %}" name="{{ name }}" value="{{ value }}"
            {%- if value|stringIn(values.getlist(name)) or (not name in values and value|string == defaultvalue) %} {# -#}
                checked
            {%- endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}
            {%- if readonly %} disabled{% endif %} {%- if anid %} id="{{ anid }}"{% endif %}
            {%- if aclass %} class="{{ aclass }}"{% endif %} {{ attributes }} />
        {{ label -}}
    </label>
{%- endmacro %}

{% macro input_checkboxes(name, entries, readonly=False, defaultvalue='', inline=False, radio=False, aclass='',
        arialabeledby="", sort=False) %}
    <div role="{% if radio %}radio{% endif %}group"
            {%- if arialabeledby %} aria-labelledby="{{ arialabeledby }}"{% endif %}>
        {%- if arialabel %}<legend class="sr-only">{{ arialabel }}</legend>{% endif %}
        {% set entries = entries|sort(attribute=1) if sort else entries %}
        {%- for entry_value, entry_label in entries %}
            {% if not inline -%}
                <div class="{% if radio %}radio{% else %}checkbox{% endif %}{% if readonly %} disabled{% endif %}">
            {%- endif -%}
                {{ input_checkbox(name, entry_label, entry_value, defaultvalue, readonly, inline=inline, radio=radio,
                                  aclass=aclass) }}
            {%- if not inline %}</div>{% endif %}
        {%- endfor %}
    </div>
{%- endmacro %}

{% macro form_input_checkbox(name, label="", value=True, info='', displayerrors=True, readonly=False, defaultvalue='',
        anid='', horizontal=True, small=False, attributes='', infolink='', differentiate_warnings=True) %}
    {#- This is the version for a single checkbox as opposed to form_input_checkboxes(). #}
    {%- if not anid %}{% set anid = "input-checkbox-{}".format(name) %}{% endif %}
    <div class="form-group {% if name in errors %}
                           {% if differentiate_warnings and is_warning(name) %}
                               has-warning
                           {% else %}
                               has-error
                           {% endif %}
                       {% endif %}">
        <div {% if horizontal %}class="{% if small %}col-sm-6 col-sm-offset-2{% else -%}
                col-sm-8 col-sm-offset-4{% endif %}"{% endif %}>
            <div class="checkbox {% if readonly %}disabled{% endif %}">
                {{ input_checkbox(name, label, value, defaultvalue, readonly, anid, attributes=attributes) }}
            </div>
            {{- output_errors(name, displayerrors) }}
            {{- output_info(info, infolink) }}
        </div>
    </div>
{%- endmacro %}

{% macro form_input_checkboxes(name, entries, label='', info='', displayerrors=True, readonly=False, defaultvalue='',
        small=False, radio=False, horizontal=True, aclass='', labelid='', infolink='', differentiate_warnings=True, sort=False) %}
    {#- This is the version for multiple checkboxes as opposed to input_checkbox().
       entries is of type [(str, str)]. #}
    {%- if not labelid %}{% set labelid = "inputgroup-{}-label".format(name) %}{% endif %}
    {%- call form_input_general(name, label, '', small, info, displayerrors, horizontal, labelid, infolink=infolink,
                                differentiate_warnings=differentiate_warnings) %}
        {{- input_checkboxes(name, entries, readonly=readonly, defaultvalue=defaultvalue, radio=radio, aclass=aclass,
                arialabeledby=labelid, sort=sort) }}
    {%- endcall %}
{%- endmacro %}


{% macro input_select(name, entries, readonly=False, defaultvalue=None, anid='', aclass='form-control',
        nulloption=None, arialabel='', attributes="", sort=False) %}
    <select name="{{ name }}" {%- if anid %} id="{{ anid }}"{% endif %}
            {%- if aclass %} class="{{ aclass }}"{% endif %}{% if readonly %} disabled{% endif %}
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %} {{ attributes }}>
        {%- if nulloption is not none %}
            <option value=""{% if values.get(name, defaultvalue) == None %} selected{% endif %}>
                {{- nulloption -}}
            </option>
        {%- endif %}
        {% set entries = entries|sort(attribute=1) if sort else entries %}
        {%- for value, label in entries %}
            <option value="{{ value }}"
              {%- if values.get(name, defaultvalue)|string == value|string %} selected{% endif %}>
                {{- label -}}
            </option>
        {%- endfor %}
    </select>
{%- endmacro %}

{% macro form_input_select(name, entries, label="", info='', displayerrors=True, readonly=False, defaultvalue=None,
        nulloption=None, anid='', small=False, horizontal=True, aclass="", attributes="", infolink="", differentiate_warnings=True,
        sort=False) %}
    {%- if not anid %}{% set anid = "input-select-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, label, anid, small, info, displayerrors, horizontal, infolink=infolink,
                                differentiate_warnings=differentiate_warnings) %}
        {{- input_select(name, entries, readonly, defaultvalue, anid, nulloption=nulloption,
                aclass="form-control " + aclass, attributes=attributes, sort=sort) }}
    {%- endcall %}
{%- endmacro%}

{% macro input_static(value, anid='') %}
    <div class="form-control-static"{% if anid %}id="{{ anid }}"{% endif %}>{{ value }}</div>
{%- endmacro %}
{% macro form_input_static(label="", info='', value='', anid='', small=False, horizontal=True, aclass='',
        infolink='', icon=None, differentiate_warnings=True) %}
    {%- if caller %}{% set value=caller() %}{% endif %}
    {%- call form_input_general(None, label, anid, small, info, False, horizontal, infolink=infolink,
                                differentiate_warnings=differentiate_warnings) %}
        <div class="form-control-static {{ aclass }}"{% if anid %}id="{{ anid }}"{% endif %}>
            {%- if icon %}{{ make_icon(icon) }} {% endif %}
            {{- value -}}
        </div>
    {%- endcall %}
{%- endmacro %}

{% macro input_submit(value="Save", name="submitform", anid='', aclass='btn btn-primary', icon="check",
        readonly=False, title='', arialabel='') %}
    <button type="submit" name="{{ name }}" {%- if readonly %} disabled{% endif %}
            {%- if anid %} id="{{ anid }}"{% endif %} {%- if aclass %} class="{{ aclass }}"{% endif %}
            {%- if title %} title="{{ title }}"{% endif %} value="True"
            {%- if arialabel %} aria-label="{{ arialabel }}"{% endif %}>
            {%- if icon %}{{ make_icon(icon) }} {% endif %}{{ value -}}</button>
{%- endmacro %}

{% macro form_input_submit(value="Save", name="submitform", readonly=False, anid='',
        aclass='btn btn-primary', icon="check", cancellink='', cancelvalue="Cancel",
        small=False, horizontal=True, differentiate_warnings=False) %}
    <div class="form-group mosp">
        <div {% if horizontal %}class="{% if small %}col-sm-offset-2 col-sm-10{% else -%}
                col-sm-offset-4 col-sm-8{% endif %}"{% endif %}>
            {{- input_submit(gettext(value), name, anid, aclass, icon, readonly) }}
            {% if differentiate_warnings and has_warnings() %}
                {{ input_submit(gettext("Ignore Warnings"), name="ignore_warnings", anid=anid, aclass=aclass, icon=icon, readonly=readonly) }}
            {% endif %}
            {%- if cancellink %}
                &emsp; {{ href(cancellink, gettext(cancelvalue), icon="times", aclass="btn btn-default cancel") }}
            {%- endif %}
        </div>
    </div>
{%- endmacro %}


{# ############################ #
 # Special purpose input macros #
 # ############################ #}

{% macro form_input_from_to(name1, name2, label='', info='', type='number', small=False, displayerrors=True,
        horizontal=True, infolink='') %}
    <div class="form-group {% if name1 in errors or name2 in errors %}has-error{% endif %}">
        <label class="{% if horizontal %}{% if small %}col-sm-2{% else %}col-sm-4{% endif %}{% endif %} control-label">
            {{- label -}}
        </label>
        <div {% if horizontal %}class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}"{% endif %}>
            <div class="input-group">
                <span class="input-group-addon">{% trans %}from{% endtrans %}</span>
                {{ input_text(name=name1, type=type, arialabel=gettext('%s from')|format(label)) }}
                <span class="input-group-addon">{% trans %}to{% endtrans %}</span>
                {{ input_text(name=name2, type=type, arialabel=gettext('%s to')|format(label)) }}
            </div>
            {{- output_errors(name1, displayerrors) }}
            {{- output_errors(name2, displayerrors) }}
            {{- output_info(info, infolink) }}
        </div>
    </div>
{% endmacro %}

{% macro event_field_input(fields, name='', readonly=False, defaultvalue='', anid='') %}
    {%- if not name %}
        {%- set name = "fields.{}".format(fields['field_name']) %}
    {%- endif %}
    {%- if fields['entries'] %}
        {{- input_select(name=name, entries=fields['entries'], nulloption="&nbsp;"|s,
                        readonly=readonly, defaultvalue=defaultvalue, anid=anid, sort=True) }}
    {%- else %}
        {% set datatypes = enums['FieldDatatypes'] %}
        {%- if fields['kind'] == datatypes.bool %}
            <div class="checkbox">
                {{- input_checkbox(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, label=fields['field_name']) -}}
            </div>
        {%- elif fields['kind'] == datatypes.str %}
            {{- input_textarea(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, rows=3) }}
        {%- elif fields['kind'] == datatypes.int %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="number",
                          placeholder="0") }}
        {%- elif fields['kind'] == datatypes.float %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, placeholder="0.0") }}
        {%- elif fields['kind'] == datatypes.date %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="date",
                          placeholder="YYYY-MM-DD") }}
        {%- elif fields['kind'] == datatypes.datetime %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid, type="datetime-local",
                          placeholder="YYYY-MM-DD hh:ii:ss") }}
        {%- else %}
            {{- input_text(name=name, readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{% macro form_event_field_input(fields, name='', label=None, info='', displayerrors=True, readonly=False,
                                defaultvalue='', anid='', force_label=False, infolink='') %}
    {%- if not name %}
        {%- set name = "fields.{}".format(fields['field_name']) %}
    {%- endif %}
    {%- if label is none %}{% set label = fields['field_name'] %}{% endif %}
    {%- if not anid %}{% set anid = "event-input-{}".format(name) %}{% endif %}
    {%- call form_input_general(name, (None if fields['kind'] == enums['FieldDatatypes'].bool and not force_label else label), anid, False,
                               info, displayerrors, True, infolink=infolink) %}
        {{- event_field_input(fields, name, readonly, defaultvalue, anid) }}
    {%- endcall %}
{%- endmacro %}

{# Macro for a general row, used in a dynamic row table.

   non-deletable rows have a disabled 'delete'-checkbox,
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro dynamic_row(id, tablename, columns, deletable, aclass="", newrow=False) %}
    <tr class="{{ aclass }}" role="group" aria-label="{{ tablename }} {{ id }}">
        {% for column in columns %}
            {% set func = column['func'] %}
            {% set name = '{}_{}'.format(column['name'], id) %}
            <td {% if name in errors %}class="has-error"{% endif %}>
                {# TODO set the remaining items of colum as attributes to func #}
                {# this is a call for a generic util.input_* macro specified by the caller #}
                {{ func(name=name,
                        aclass='drow-input form-control',
                        attributes=('data-basename="{}_"'.format(column['name'])|s if newrow else ''),
                        arialabel=gettext(column['label'])
                        ) }}
                {{ util.output_errors(name) }}
            </td>
        {% endfor %}

        <td>
            <span class="drow-buttonspace">
                {% if newrow %}
                    {{ util.input_checkbox("create_{}".format(id), label=gettext("Add"),
                                           attributes='data-basename="create_"'|s,
                                           aclass='drow-indicator') }}
                {% else %}
                    {{ util.input_checkbox("delete_{}".format(id), label=gettext("Delete"),
                                           readonly=not deletable, aclass='drow-indicator') }}
                {% endif %}
            </span>
        </td>
    </tr>
{% endmacro %}

{# This macro creates a table which entries can be added, deleted and modified by the user.

   name:     the name of the table
   columns:  List of dicts. Each dict must contain a 'func' key, specifing the util.input_* macro for this column,
             the 'name' (mapping the input to a db field) and a 'label'.
   existing: a dict of already existing entries.
   locked:   iterable which contains all id of existing entries which must not be modified or deleted by the user
   sortkey:  to sort existing #}
{% macro dynamic_row_table(name, columns, existing, locked=[], sortkey=None) %}
    <table class="table table-condensed" id="drow-table">
        <thead>
            <tr>
                {% for column in columns %}
                    <th>{% trans title=column['label']%}{{ title }}{% endtrans %}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% set sorted_existing = existing|keydictsort(sortkey) if sortkey else existing|dictsort %}
            {# Old items, already stored in the database #}
            {% for id, entry in sorted_existing %}
                {{ dynamic_row(id, name, columns, id not in locked, 'drow-row') }}
            {% endfor %}
            {# Items that were added by the user but failed validation. They are still new and have no official id. #}
            {% for i in range(1, values.get('create_last_index', 0) + 1) %}
                {{ dynamic_row(-i, name, columns, False, 'drow-new', newrow=True) }}
            {% endfor %}
            {# Prototype row. For non-JS users: an empty row with 'create'-checkbox, for JS: prototype for new rows. #}
            {{ dynamic_row(-values.get('create_last_index', 0) - 1, name, columns, False, 'drow-prototype', newrow=True) }}
        </tbody>
    </table>
    <p>
        <button type="button" class="btn btn-success softhide pull-right" id="drow-addbutton">
            {{ util.make_icon('plus') }} {% trans %}Add {{ name }}{% endtrans %}
        </button>
    </p>
{% endmacro %}

{# Generate an anti CSRF (Cross-Site Request Forgery) token and add it as hidden input to an HTML form.

   The frontend application checks the anti CSRF token for every called endpoint which is marked for this check, which
   is the default for every POST-enabled endpoint. It validates the hash and checks the value against the login user's
   persona_id. This should prevent people from performing an CSRF attack, as they are unable to reproduce the hashed
   token.

   For protection against replay attacks, we use the default timeout of config.PARAMETER_TIMEOUT #}
{% macro anti_csrf_token(target) %}
    {{ input_hidden(ANTI_CSRF_TOKEN_NAME, encode_parameter(target, ANTI_CSRF_TOKEN_NAME, user.persona_id)) }}
{% endmacro %}


{% macro print_questionnaire_entry(entry) %}
    {# Field entry #}
    {% if entry['field_id'] %}
        {% with FIELD = ambience['event']['fields'][entry['field_id']],
                readonly = entry['readonly'] or is_locked or ambience['event']['is_archived'] %}
            <div id="questionnaire_field_entry_{{ FIELD['field_name'] }}">
            {% if FIELD['entries'] %}
                {{ util.form_input_select(name=FIELD['field_name'], entries=FIELD['entries'],
                                          label=entry['title'], info=entry['info'],
                                          readonly=readonly,
                                          defaultvalue=entry['default_value'] if not readonly else "") }}
            {% else %}
                {% set datatypes = enums['FieldDatatypes'] %}
                {% if FIELD['kind'] == datatypes.bool %}
                    {{ util.form_input_checkbox(
                        name=FIELD['field_name'], label=entry['title'], info=entry['info'],
                        readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "") }}
                {% elif FIELD['kind'] == datatypes.str  %}
                    {% if entry['input_size'] %}
                        {{ util.form_input_textarea(
                            name=FIELD['field_name'], label=entry['title'], info=entry['info'],
                            readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "",
                            rows=(1+entry['input_size']*2)) }}
                    {% else %}
                        {{ util.form_input_text(
                            name=FIELD['field_name'], label=entry['title'], info=entry['info'],
                            readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "") }}
                    {% endif %}
                {% else %}
                    {{ util.form_event_field_input(
                        FIELD, name=FIELD['field_name'], label=entry['title'], info=entry['info'],
                        readonly=readonly, defaultvalue=entry['default_value'] if not readonly else "") }}
                {% endif %}
            {% endif %}
            </div>
        {% endwith %}

    {# Text-only entry #}
    {% else %}
        {% if entry['title'] %}
            <h3 class="heading-underline">{{ entry['title'] }}</h3>
        {% endif %}
        {% if entry['info'] %}
            {{ entry['info']|md }}
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro print_questionnaire_result(entry, registration) %}
    {% if entry['field_id'] %}
        {% with FIELD = ambience['event']['fields'][entry['field_id']] %}
            <div id="questionnaire_field_result_{{ FIELD['field_name'] }}">
                <dt>{{ entry['title'] }}</dt>
                <dd>
                    {% if FIELD['kind'] == enums['FieldDatatypes'].bool %}
                        {{ deko_checkbox(
                            checked=registration['fields'].get(FIELD['field_name'])) }}
                    {% elif FIELD['kind'] == enums['FieldDatatypes'].date %}
                        {{ registration['fields'].get(FIELD['field_name'])
                           |date(lang=lang, passthrough=True) }}
                    {% elif FIELD['kind'] == enums['FieldDatatypes'].datetime %}
                        {{ registration['fields'].get(FIELD['field_name'])
                           |datetime(lang=lang, passthrough=True) }}
                    {% elif FIELD['kind'] == enums['FieldDatatypes'].float %}
                        {{ registration['fields'].get(FIELD['field_name'])|decimal(lang=lang) }}
                    {% else %}
                        {{ registration['fields'].get(FIELD['field_name'])|linebreaks }}
                    {% endif %}
                </dd>
            </div>
        {% endwith %}
    {% endif %}
{% endmacro %}

{# Macro for a general questionnaire part, that can have each role in the DynamicRow workflow.
   aclass is used to pass classes to the row, such as drow-row, drow-prototype, drow-new
   newrow rows will have 'create' instead of 'delete' checkbox and have 'data-basename' attributes #}
{% macro print_questionnaire_config(part_id, kind, aclass="", newrow=False) %}
    <div class="panel panel-default {{ aclass }}">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    {{ util.form_input_text(name="title_{}".format(part_id), label=gettext("Title"),
                                            attributes=('data-basename="title_"'|s if newrow else ''),
                                            aclass='input-title drow-input', horizontal=false) }}
                    {{ util.form_input_textarea(name="info_{}".format(part_id), label=gettext("Text"),
                                                attributes=('data-basename="info_"'|s if newrow else ''),
                                                aclass='input-info drow-input', horizontal=false,
                                                info=gettext("Supports %(infolink)s for “Text-Only” fields.")|format(
                                                    infolink=util.href(docurl("Handbuch_Markdown"),
                                                                       gettext("Markdown"),
                                                                       title=gettext("Short Markdown summary")))|s) }}
                </div>
                <div class="col-md-6">
                    {{ util.form_input_select("field_id_{}".format(part_id), label=gettext("Query"),
                                              entries=registration_fields|keydictsort(EntitySorter.event_field)|dict_entries('id', 'field_name'),
                                              nulloption=gettext("— Only Text —"),
                                              attributes=('data-basename="field_id_"'|s if newrow else ''),
                                              aclass='input-field drow-input', horizontal=False) }}
                    {{ util.form_input_select(
                        "input_size_{}".format(part_id), label=gettext("Input Size"), entries=(
                            (0, gettext("singleline")), (1, gettext("multiline")),
                            (2, gettext("multiline") + "+"), (3, gettext("multiline") + "++")),
                        attributes=('data-basename="input_size_"'|s if newrow else ''),
                        aclass='input-inputsize drow-input', horizontal=False) }}
                    {{ util.form_input_textarea(
                        "default_value_{}".format(part_id), label=gettext("Default Value"), rows=2,
                        attributes=('data-basename="default_value_"'|s if newrow else ''),
                        aclass='input-defaultvalue drow-input', horizontal=False) }}
                    <div class="form-group row">
                        <div class="col-sm-8">
                            <div class="checkbox">
                                {{ util.input_checkbox("readonly_{}".format(part_id), label=gettext("read-only"),
                                                       attributes=('data-basename="readonly_"'|s if newrow else ''),
                                                       aclass='input-readonly drow-input',
                                                       readonly=(not values["readonly_{}".format(part_id)]
                                                                 and (kind and not kind.allow_readonly()))) }}
                                {{ util.output_errors("readonly_{}".format(part_id), wrapper=True) }}
                            </div>
                        </div>
                        <div class="col-sm-4 text-right">
                            <span class="drow-buttonspace">
                                {% if newrow %}
                                    {{ util.input_checkbox("create_{}".format(part_id), label=gettext("Add"),
                                                           attributes='data-basename="create_"'|s,
                                                           aclass='drow-indicator') }}
                                {% else %}
                                    {{ util.input_checkbox("delete_{}".format(part_id), label=gettext("Remove"),
                                                           aclass='drow-indicator') }}
                                {% endif %}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}

{# Generate a list of admin view toggle buttons. Should be used in the navigation sidebar.

   The properties of the individual buttons are specified through the `views` argument, which is an iterable of
   3-tuples. Each tuple defines (label, view_names, relevant_views) of one button:
     * `label` (1st tuple entry) defines the caption of the button. Should be internationalized.
     * `view_names` (2nd tuple entry) defines a list of admin_views to be toggled by this button together.
     * `relevant_views` (3rd tuple entry) defines a list of views, which are the subset of `view_names` that is relevant
       in the current page's context. The button is only displayed, if one of those views is available to the user.
       For convenience, `relevant_views` may be set to None, in which case all `view_names` are considered relevant.
       Example: A button in the Core realm may toggle all user admin views (`core_user`, `cde_user, `event_user`, ...),
       but should only be shown to core admins, i.e. users who have the `core_user` view available.
 #}
{% macro admin_views_toggle(views) %}
    {% set inner = _admin_views_toggle_inner(views) %}
    {% if inner %}
        <hr />
        <form action="{{ cdedblink('core/modify_active_admin_views') }}" method="post" id="adminviewstoggleform">
            {% if original_request and original_request.url %}
                {{ input_hidden("wants", encode_parameter("core/modify_active_admin_views", "wants",
                                                          original_request.url, timeout=None)) }}
            {% endif %}
            <div class="list-group tear-down">
                {{ inner }}
            </div>
        </form>
    {% endif %}
{% endmacro %}

{# Un-inlined part of admin_views_toggle() to allow detection of empty list of views with the limited capabilities of
   jinja #}
{% macro _admin_views_toggle_inner(views) -%}
    {% for label, view_names, relevant_views in views -%}
        {% set relevant_views = relevant_views if relevant_views is not none else view_names -%}
        {% if (relevant_views|set).intersection(user.available_admin_views) %}
            {# The button is "deactivated" as long as there are more "relevant views" which are available for the
               user but are not enabled yet. #}
            {% set active = not (relevant_views|set).intersection(user.available_admin_views - user.admin_views) -%}
            <button type="submit"
                    name="view_specifier"
                    value="{% if active %}-{% else %}+{% endif %}{{ view_names|join(',') }}"
                    class="list-group-item list-group-item-info {% if active %}active{% endif %}"
                    title="{{ (gettext("Hide %(label)s") if active else gettext("Show %(label)s"))|format(label=label) }}">
                {{- make_icon('wrench') }} {{ label -}}
                {% if active %} <span class="sr-only">{% trans %}(enabled){% endtrans %}</span>{% endif -%}
            </button>
        {% endif -%}
    {% endfor -%}
{% endmacro %}

{#
    Creates a HTML compliant mailto: link (though not neccessarily RFC compliant)
    Additional header such as to, subject, body, cc, or bcc can be passed as kwargs
#}
{% macro mailto(address, name) -%}
mailto:
{%- if name is defined %}{{ "{}%3C{}%3E".format(name|urlencode, address) }}{% else %}{{ address }}{% endif %}
{%- if kwargs %}?{{ kwargs|urlencode }}{% endif %}
{%- endmacro %}

{% macro username_mailto(persona, prefix="") -%}
{{ href(
    mailto(
        address=persona.get("{}username".format(prefix), ""),
        name="{} {}".format(
            persona.get("{}given_names".format(prefix), ""),
            persona.get("{}family_name".format(prefix), "")
        )
    ),
    persona.get("{}username".format(prefix), "")
) }}
{%- endmacro %}

{% macro meta_info_banner(fieldname) %}
    {% if meta_info.get(fieldname) %}
        {% call util.bootstrap_panel() %}
            {{ meta_info.get(fieldname)|md }}
        {% endcall %}
    {% endif %}
{% endmacro %}

{% macro format_ml_entry(mailinglist_id, title, management) %}
    {% set ml = mailinglist_infos[mailinglist_id] %}
    <div class="row list-group-item{% if not ml['is_active'] %} list-group-item-muted{% endif %}">
        <div class="col-sm-3">
            {% if management %}
                {{ util.href(cdedblink("ml/management", {'mailinglist_id': mailinglist_id}), title) }}
            {% else %}
                {{ util.href(cdedblink("ml/show_mailinglist", {'mailinglist_id': mailinglist_id}), title) }}
            {% endif %}
            {% if mailinglist_id in subscriptions %}
                {{ util.make_icon('check-circle', title=gettext("subscribed")) }}
            {% endif %}<br />
            {% if not ml['is_active'] %}
                <span class="small">{% trans %}inactive{% endtrans %}</span>
            {% endif %}
        </div>
        <div class="col-sm-6 small">
            {{ gettext( enums['MailinglistTypes'](ml['ml_type'])|string) -}}
            {% if ml['event_id'] -%}
                {%- if events[ml['event_id']]['is_visible'] -%}
                    {% set link = util.href(cdedblink('event/show_event',{'event_id': ml['event_id']}),
                                            events[ml['event_id']]['title'], icon='chalkboard-teacher') %}
                {%- else -%}
                    {% set link = "%s %s"|s|format(util.make_icon('bullhorn'), events[ml['event_id']]['title']) %}
                {%- endif -%}
                {% trans link=link -%}
                    ; linked with {{ link }}
                {% endtrans %}
            {%- elif ml['assembly_id'] -%}
                {%- if assemblies[ml['assembly_id']]['is_visible'] -%}
                    {% set link = util.href(cdedblink('assembly/show_assembly',{'assembly_id':ml['assembly_id']}),
                                            assemblies[ml['assembly_id']]['title'], icon='bullhorn') %}
                {%- else -%}
                    {% set link = "%s %s"|s|format(util.make_icon('bullhorn'), assemblies[ml['assembly_id']]['title']) %}
                {%- endif -%}
                {% trans link=link -%}
                    ; linked with {{ link }}
                {% endtrans %}
            {%- endif %}
        </div>
        <div class="col-sm-3 small">
            {% trans count=ml['num_subscribers'] %}
                {{ count }} subscriber.
            {%- pluralize count -%}
                {{ count }} subscribers.
            {% endtrans %}
            {% trans count=ml['moderators']|length %}
                {{ count }} moderator.
            {%- pluralize count -%}
                {{ count }} moderators.
            {% endtrans %}
        </div>
    </div>
{% endmacro %}