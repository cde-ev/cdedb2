{# This template provides a set of standard macros which should be used to
   create html-elements. #}

{% macro jquery_preamble() %}
    <script type="text/javascript">
        cdedb_javascript = true;
    </script>
    <script type="text/javascript" src="{{ staticurl("jquery-2.min.js")|e }}"></script>
{% endmacro %}

{% macro jquery_with_ui_preamble() %}
    <script type="text/javascript">
        cdedb_javascript = true;
    </script>
    <script type="text/javascript" src="{{ staticurl("jquery.js")|e }}"></script>
    <script type="text/javascript" src="{{ staticurl("jquery-ui/jquery-ui.js")|e }}"></script>
    <link rel="stylesheet" type="text/css" href="{{ staticurl("jquery-ui/jquery-ui.css")|e }}">
{% endmacro %}

{% macro javascript_hint() %}
    <noscript>
        <div class="jsDeleted">
            Diese Seite funktioniert besser mit Javascript.
        </div>
    </noscript>
{% endmacro %}

{% macro deko_checkbox(checked, anid='', aclass='') %}
    <input type="checkbox" {% if checked %} checked="checked"{% endif %} disabled="disabled"{% if anid %}
        id="{{ anid|e }}"{% endif %}{% if aclass %} class="{{ aclass|e }}"{% endif %} />
{% endmacro %}

{# FIXME does the readonly parameted actually do something?? I see no effect. #}
{% macro href(ref, label, readonly=False, icon="", aclass='', active=False) -%}
<a href="{{ ref|e }}" {% if readonly %}disabled="disabled"{% endif %}
{% if aclass or active %}class="{{ aclass }}{% if active %} active{% endif %}"{% endif %}>
{%- if icon %}<span class="glyphicon glyphicon-{{ icon|e }}"></span> {% endif %}{{ label|e }}</a>
{%- endmacro %}

{% macro output_errors(name, displayerrors=True) %}
    {% if displayerrors and name in errors %}
        <div class="input-error-block">
            {% for error in errors.get(name, []) %}
                {% if error %}
                    {{ i18n(error|string)|e }}<br />
                {% endif %}
            {% endfor %}
        </div>
    {% endif %}
{% endmacro %}

{% macro output_info(info) %}
    {% if info %}
        <p class="help-block"><span class="glyphicon glyphicon-info-sign"></span> {{ info|e }}</p>
    {% endif %}
{% endmacro %}

{% macro persona_anchor(persona_data, verbose=False) %}
    {% if verbose %}
        {{ href(show_user_link(persona_data['id']), "{} {} {} {}".format(
              persona_data['title'], persona_data['given_names'],
              persona_data['family_name'], persona_data['name_supplement'])) }}
    {% else %}
        {{ href(show_user_link(persona_data['id']), "{} {}".format(
              persona_data['given_names'], persona_data['family_name'])) }}
    {% endif %}
{% endmacro %}

{# ################### #
 # (Form) input macros #
 # ################### #}

{# The input_* macro generates a blank input field of the given type. Note that some input types don't have an own macro
   but can be produced by passing an additional parameter to another macro:

   * password: input_text(..., type="password")
   * date etc.: input_text(..., type="date")
   * radio: input_checkbox(..., radio=True)

   The form_input_* wraps the specific input macro and adds some divs, label and error output. These macros are meant to
   be used inside an form.form-horizontal.
#}
{% macro input_hidden(name, value=None, defaultvalue='', anid='', aclass='') %}
    {% if value is none %}
        <input type="hidden" name="{{ name|e }}" value="{{ values.get(name, defaultvalue)|e }}"
          {% if anid %} id="{{ anid|e }}" {% endif %} {% if aclass %} class="{{ aclass|e }}" {% endif %}>
    {% else %}
        <input type="hidden" name="{{ name|e }}" value="{{ value|e }}" {% if anid %} id="{{ anid|e }}" {% endif %}
          {% if aclass %} class="{{ aclass|e }}" {% endif %}>
    {% endif %}
{% endmacro %}

{% macro form_input_general(input_code, label='', anid='', small=False, info='', displayerrors=True) %}
    <div class="form-group {% if name in errors %}has-error{% endif %}">
        <label{% if anid %} for="{{ anid|e }}"{% endif %}
                class="{% if small %}col-sm-2{% else %}col-sm-4{% endif %} control-label">
            {{ label|e }}
        </label>
        <div class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}">
            {{ input_code }}
            {{ output_errors(name, displayerrors) }}
            {{ output_info(info) }}
        </div>
    </div>
{% endmacro %}

{% macro input_text(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, type='text',
        placeholder='') %}
    <input type="{{ type|e }}" {% if aclass %} class="{{ aclass|e }}"{% endif %}
            {% if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {% if placeholder %} placeholder="{{ placeholder|e }}"{% endif %}
            {% if anid %} id="{{ anid|e }}"{% endif %} value="{{ values.get(name, defaultvalue)|e }}"
            name="{{ name|e }}" {% if readonly %}disabled="disabled"{% endif %} />
{% endmacro %}
{% macro form_input_text(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
    maxlength=0, type='text', placeholder='', small=False) %}
    {{ form_input_general(
            input_text(name, readonly, defaultvalue, anid, maxlength=maxlength, type=type, placeholder=placeholder),
            label, anid, small, info, displayerrors) }}
{% endmacro %}


{% macro input_file(name, readonly=False, defaultvalue='', anid='', aclass='form-control', accept='') %}
    <input type="file" {% if aclass %} class="{{ aclass|e }}"{% endif %}
            {% if accept %} class="{{ accept|e }}"{% endif %}
            {% if anid %} id="{{ anid|e }}"{% endif %} value="{{ values.get(name, defaultvalue)|e }}"
            name="{{ name|e }}" {% if readonly %}disabled="disabled"{% endif %} />
{% endmacro %}

{% macro form_input_file(name, label='', info='', displayerrors=True, readonly=False, accept='', anid='',
        small=False) %}
    {{ form_input_general(
            input_file(name, readonly, defaultvalue, anid, accept=accept),
            label, anid, small, info, displayerrors) }}
{% endmacro %}

{% macro input_textarea(name, readonly=False, defaultvalue='', anid='', aclass='form-control', maxlength=0, rows=3) %}
    <textarea {% if aclass %} class="{{ aclass|e }}"{% endif %} rows="{{ rows }}"
            {% if anid %} id="{{ anid|e }}"{% endif %} name="{{ name|e }}"
            {% if maxlength %} maxlength="{{ maxlength }}"{% endif %}
            {% if readonly %}disabled="disabled"{% endif %}>{{ values.get(name, defaultvalue)|e }}</textarea>
{% endmacro %}

{% macro form_input_textarea(name, label='', info='', displayerrors=True, readonly=False, defaultvalue='', anid='',
        small=False, maxlength=0, rows=3) %}
    {{ form_input_general(
            input_textarea(name, readonly, defaultvalue, anid, maxlength=maxlength, rows=rows),
            label, anid, small, info, displayerrors) }}
{% endmacro %}


{% macro input_checkbox(name, label="", value=True, defaultvalue='', readonly=False, anid='', aclass='', inline=False,
        radio=False) %}
    {% if label %}
        <label{% if inline %} class="{% if radio %}radio{% else %}checkbox{% endif %}-inline"{% endif %}>
    {% endif %}
        <input type="{% if radio %}radio{% else %}checkbox{% endif %}" name="{{ name|e }}" value="{{ value|e }}"
            {# TODO checkboxes don't support defaultvalues yet #}
            {% if value|stringIn(values.getlist(name)) or (not name in values and value|string == defaultvalue)  %}
                checked="checked"
            {% endif %}
            {% if readonly %} disabled="disabled" {% endif %} {% if anid %} id="{{ anid|e }}" {% endif %}
            {% if aclass %} class="{{ aclass|e }}"{% endif %} />
        {{ label|e }}
    {% if label %}</label>{% endif %}
{% endmacro %}

{% macro input_checkboxes(name, entries, readonly=False, defaultvalue='', inline=False, radio=False) %}
    {% for entry_value, entry_label in entries %}
        {% if not inline %}
            <div class="{% if radio %}radio{% else %}checkbox{% endif %} {% if readonly %}disabled{% endif %}">
        {% endif %}
            {{ input_checkbox(name, entry_label, entry_value, defaultvalue, readonly, inline=inline, radio=radio) }}
        {% if not inline %}</div>{% endif %}
    {% endfor %}
{% endmacro %}

{% macro form_input_checkbox(name, label="", value=True, info='', displayerrors=True, readonly=False, defaultvalue='',
        anid='') %}
    {# This is the version for a single checkbox as opposed to form_input_checkboxes(). #}
    <div class="form-group {% if name in errors %}has-error{% endif %}">
        <div class="{% if small %}col-sm-6 col-sm-offset-2{% else %}col-sm-8 col-sm-offset-4{% endif %}">
            <div class="checkbox {% if readonly %}disabled{% endif %}">
                {{ input_checkbox(name, label, value, defaultvalue, readonly, anid) }}
            </div>
            {{ output_errors(name, displayerrors) }}
            {{ output_info(info) }}
        </div>
    </div>
{% endmacro %}

{% macro form_input_checkboxes(name, entries, label='', info='', displayerrors=True, readonly=False, defaultvalue='',
        small=False, radio=False) %}
    {# This is the version for multiple checkboxes as opposed to input_checkbox().
       entries is of type [(str, str)]. #}
    {{ form_input_general(
            input_checkboxes(name, entries, readonly=readonly, defaultvalue=defaultvalue, radio=radio),
            label, '', small, info, displayerrors) }}
{% endmacro %}


{% macro input_select(name, entries, readonly=False, defaultvalue=None, anid='', aclass='form-control',
        nulloption=False) %}
    <select name="{{ name|e }}" {% if anid %} id="{{ anid|e }}" {% endif %}
      {% if aclass %} class="{{ aclass|e }}" {% endif %}{% if readonly %}disabled="disabled"{% endif %}>
        {% if nulloption %}
             <option value=""> </option>
        {% endif %}
        {% for value, label in entries %}
            <option value="{{ value|e }}"
              {% if values.get(name, defaultvalue)|string == value|string %} selected="selected" {% endif %}>
                {{ label|e }}
            </option>
        {% endfor %}
    </select>
{% endmacro %}

{% macro form_input_select(name, entries, label="", info='', displayerrors=True, readonly=False, defaultvalue=None,
        nulloption=False, anid='', small=False) %}
    {{ form_input_general(
            input_select(name, entries, readonly, defaultvalue, anid, nulloption=nulloption),
            label, anid, small, info, displayerrors) }}
{% endmacro%}

{% macro input_static(value) %}
    <p class="form-control-static">{{ value|e }}</p>
{% endmacro %}
{% macro form_input_static(label="", info='', value='', small=False) %}
    {{ form_input_general(
        input_static(value),
        label, '', small, info) }}
{% endmacro %}

{% macro form_input_submit(value='Speichern', name="submitform", info='', readonly=False, anid='',
        aclass='btn btn-primary', icon="ok", cancellink='', cancelicon='remove', cancelvalue='Abbrechen',
        small=False) %}
    <div class="form-group">
        <div class="{% if small %}col-sm-offset-2 col-sm-10{% else %}col-sm-offset-4 col-sm-8{% endif %}">
            <button type="submit" name="{{ name|e }}" {% if readonly %} disabled="disabled"{% endif %} {% if anid %}
            id="{{ anid|e }}"{% endif %} {% if aclass %} class="{{ aclass|e }}"{% endif %}>
            {% if icon %}<span class="glyphicon glyphicon-{{ icon|e }}"></span> {% endif %}{{ value|e }}</button>
            {% if cancellink %}
                &emsp; {{ href(cancellink, cancelvalue, icon=cancelicon, aclass="btn btn-default") }}
            {% endif %}
            {% if info %}<div class="control-label">{{ info_hover(info) }}</div>{% endif %}
        </div>
    </div>
{% endmacro %}

{% macro form_input_from_to(name1, name2, label='', info='', type='number', small=False, displayerrors=True) %}
    <div class="form-group {% if name1 in errors or name2 in errors %}has-error{% endif %}">
        <label class="{% if small %}col-sm-2{% else %}col-sm-4{% endif %} control-label">
            {{ label|e }}
        </label>
        <div class="{% if small %}col-sm-6{% else %}col-sm-8{% endif %}">
            <div class="input-group">
                <span class="input-group-addon">von</span>
                {{ input_text(name=name1, type=type) }}
                <span class="input-group-addon">bis</span>
                {{ input_text(name=name2, type=type) }}
            </div>
            {{ output_errors('start', displayerrors) }}
            {{ output_errors('stop', displayerrors) }}
            {{ output_info(info) }}
        </div>
    </div>
{% endmacro %}



{% macro format_query(spec, titles, choices, output_selection=True, selection_blacklist=[]) %}
    <!--<script type="text/javascript">
        // adjust input element to the selected operator
        // this should be called from the corresponding change trigger
        function update_choices(field, choices, validator) {
            var esc_field = field.replace(".", "\\.") // escape dot for selectors
            var previous = $("#qinput_" + esc_field).val();
            $("#qinput_" + esc_field).remove();
            // NOTE cdedb.query.QueryOperator values are embedded
            if ($('#qop_' + esc_field).val() == "0" || $('#qop_' + esc_field).val() == "1") {
                // do nothing
            } else if ($('#qop_' + esc_field).val() == "2") {
                if (!$.isEmptyObject(choices)) {
                    $("#qspan_" + esc_field).append($("<select>", {"name": "qval_" + field, "id": "qinput_" + field}));
                    $("#qinput_" + esc_field).append($("<option>", {"value": ""}));
                    for (var key in choices) {
                        if (choices.hasOwnProperty(key)) {
                            $("#qinput_" + esc_field).append($("<option>", {"value": key, "html": choices[key],
                                                                            "selected": (String(key) == previous)}));
                        }
                    }
                } else {
                    if (validator == "bool") {
                        $("#qspan_" + esc_field).append($("<select>", {"name": "qval_" + field,
                                                                       "id": "qinput_" + field}));
                        $("#qinput_" + esc_field).append($("<option>", {"value": ""}));
                        var bool_choices = {"True": "wahr", "False": "falsch"};
                        for (var key in bool_choices) {
                            $("#qinput_" + esc_field).append($("<option>", {"value": key, "html": bool_choices[key],
                                                                            "selected": (key == previous)}));
                        }
                    } else {
                        $("#qspan_" + esc_field).append($("<input>", {
                            "name": "qval_" + field, "id": "qinput_" + field, "type": "text", "value": previous}));
                    }
                }
            } else {
                $("#qspan_" + esc_field).append($("<input>", {"name": "qval_" + field, "id": "qinput_" + field,
                                                              "type": "text", "value": previous}));
            }
        }
    </script>-->
    {% with OPERATOR_LABELS = {0: "leer",
                               1: "nichtleer",
                               2: "gleich",
                               3: "eines aus",
                               4: "ähnlich",
                               5: "regex",
                               6: "enthält alle",
                               10: "kleiner",
                               11: "kleinergleich",
                               12: "zwischen",
                               13: "größergleich",
                               14: "größer",} %}

        {{ input_hidden(name="is_search", value=True) }}
        <p>
            <button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-search"></span> Suche</button>
            <button type="submit" class="btn btn-default" name="CSV">
                <span class="glyphicon glyphicon-download"></span> CSV-Datei
            </button>
        </p>
        <div class="row">
            <div class="col-lg-7">
                <table class="query-form-cols table table-superdense">
                    <thead>
                        <tr>
                            <th><span class="glyphicon glyphicon-eye-open"></span></th>
                            <th>Felder</th>
                            <th colspan="2">Filter</th>
                        </tr>
                    </thead>
                    <tbody>
                    {% for field in spec %}
                        <tr class="query_field {% if field in errors %}errorInput{% endif %}" data-type="{{ spec[field]|e }}">
                            <td>
                                {# multi-fields are not reliably selectable, so we disable selection #}
                                {% if ',' not in field and field not in selection_blacklist %}
                                    {% with name = "qsel_{}".format(field) %}
                                        {% if output_selection %}
                                            {{ input_checkbox(name, aclass='outputSelector', value=True) }}
                                        {% else %}
                                            {{ input_hidden(name, value=True) }}
                                        {% endif %}
                                    {% endwith %}
                                {% endif %}
                            </td>
                            <td class="name">{{ titles.get(field, field)|e }}</td>
                            <td>
                                {% with name = "qop_{}".format(field) %}
                                    {% with theid = "qop_{}".format(field) %}
                                        {# jinja does not support list comprehension ... #}
                                        {% set myentries = [] %}
                                        {% for op in query_mod.VALID_QUERY_OPERATORS[spec[field]] %}
                                            {% if field not in choices or op in query_mod.SELECTION_VALUE_OPERATORS %}
                                                {{ myentries.append((op.value, OPERATOR_LABELS[op.value]))|e }}
                                            {% endif %}
                                        {% endfor %}
                                        {{ input_select(name, entries=myentries, aclass='form-control input-sm',
                                                        defaultvalue=myentries[0][0], anid=theid) }}
                                        <!--<script type="text/javascript">
                                            $(document).ready(function(){
                                                $("#{{ theid.replace('.', '\\\\.')|e }}").change(function (){
                                                    update_choices("{{ field|e }}", {{ choices.get(field, '')|json }},
                                                                   "{{ spec[field]|e }}") });
                                                $("#{{ theid.replace('.', '\\\\.')|e }}").trigger('change');
                                            });
                                        </script>-->
                                    {% endwith %}
                                {% endwith %}
                            </td>
                            <td>
                                {% if spec[field] == 'bool' %}
                                    {# Boolean fields are the only ones that don't need a text input field, for none of their
                                        filter operators. So we can provide a select box for none-javascript users. #}
                                    {{ input_select("qval_{}".format(field), anid="qinput_{}".format(field),
                                            aclass='form-control input-sm',
                                            entries=(('',''),(True, 'ja'),(False, 'nein'))) }}
                                {% else %}
                                    {{ input_text("qval_{}".format(field), anid="qinput_{}".format(field),
                                            aclass='form-control input-sm') }}
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <div class="col-lg-5">
                <table class="query-form-sort table table-superdense">
                    <thead>
                        <tr><th colspan="3">Sortierung</th></tr>
                    </thead>
                    <tbody>
                    {% for title, name in (("1.", "qord_primary"), ("2.", "qord_secondary"),
                                           ("3.", "qord_tertiary"))%}
                        <tr>
                            <td> {{ title|e }} </td>
                            <td>
                                {# jinja does not support list comprehension ... #}
                                {% set myentries = [] %}
                                {% for field in spec %}
                                    {% if ',' not in field %}
                                        {{ myentries.append((field, titles.get(field,field)))|e }}
                                    {% endif %}
                                {% endfor %}
                                {{ input_select(name, entries=myentries, nulloption=True, aclass="form-control input-sm" )}}
                            </td>
                            <td>
                                {{ input_select(name + "_ascending", defaultvalue=True, aclass="form-control input-sm",
                                                entries=((True, "A→Z"), (False, "Z→A"))) }}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
        <p>
            <button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-search"></span> Suche</button>
            <button type="submit" class="btn btn-default" name="CSV">
                <span class="glyphicon glyphicon-download"></span> CSV-Datei
            </button>
        </p>
    {% endwith %}
{% endmacro %}

{% macro place_default_queries(target, queries, titles) %}
{# TODO make this a multicolumn thing for more efficient space usage #}
    {% if queries %}
        <ul>
            {% for query in queries %}
                <li>{{ href(cdedblink(target, queries[query]|querytoparams), titles.get(query, query)) }}</li>
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{% macro display_query_result(result, query, titles, choices) %}
    {% if not result|length %}
        Keine Ergebnisse!
    {% else %}
        {# TODO add fancy js to table #}
        <table class="checkeredTable">
            <tr>
                <th></th>
                {% for csvfield in query.fields_of_interest %}
                    {% for field in csvfield.split(',') %}
                        <th>{{ titles.get(field, field)|e }}</th>
                    {% endfor %}
                {% endfor %}
            </tr>
            {% for row in result %}
                {% set outerloopindex = loop.index0 %}
                <tr>
                    <td>
                        {{ input_checkbox("row_{}".format(outerloopindex), anid="row_{}".format(outerloopindex),
                                          aclass="rowSelector") }}
                    </td>
                    {% for csvfield in query.fields_of_interest %}
                        {% for field in csvfield.split(',') %}
                            {# NOTE that we split off any possible schema specification since they're not preserved
                                    by the query #}
                            {% with afield = field.split('.')[-1] %}
                                <td>
                                    {% if field == "personas.id" %}
                                        {{ href(show_user_link(row[afield]), row[afield]|cdedbid) }}
                                    {% elif field == "reg.id" %}
                                        {# This should occur only if the context allows the following link. #}
                                        {{ href(cdedblink("event/show_registration", {'registration_id': row[afield]}),
                                             row[afield]) }}
                                    {% elif query.spec[csvfield] == "bool" %}
                                        {{ deko_checkbox(row.get(afield)) }}
                                    {% else %}
                                        {{ choices.get(csvfield, {}).get(row.get(afield),
                                                                         row.get(afield, "UNDEFINED"))|e }}
                                    {% endif %}
                                    {{ input_hidden("row_{}_{}".format(outerloopindex, afield), row.get(afield),
                                                    anid="row_{}_{}".format(outerloopindex, afield)) }}
                                </td>
                            {% endwith %}
                        {% endfor %}
                    {% endfor %}
                </tr>
            {% endfor %}
        </table>
    {% endif %}
{% endmacro %}

{% macro event_field_input(field_data, name='', label='', info='', displayerrors=True, readonly=False, defaultvalue='',
                           anid='') %}
    {% if not name %}
        {% set name = "fields.{}".format(field_data['field_name']) %}
    {% endif %}
    {% if not label %}
        {% set label = field_data['field_name'] %}
    {% endif %}
    {% if field_data['entries'] %}
        {# jinja does not support list comprehension ... #}
        {% set myentries = [] %}
        {% for value, description in field_data['entries'] %}
            {{ myentries.append((value, description))|e }}
        {% endfor %}
        {{ form_input_select(name=name, title=label, entries=myentries, nulloption=True,
                        readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
   {% else %}
        {% if field_data['kind'] == "bool" %}
            {{ form_input_checkbox(name=name, label=label, readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
        {% elif field_data['kind'] == "str" %}
            {{ form_input_textarea(name=name, label=label, displayerrors=displayerrors, readonly=readonly,
                              defaultvalue=defaultvalue, anid=anid, rows=5) }}
        {% else %}
            {{ form_input_text(name=name, label=label, displayerrors=displayerrors, readonly=readonly,
                          defaultvalue=defaultvalue, anid=anid) }}
        {% endif %}
   {% endif %}
{% endmacro %}

{% macro tab_event_field_input(field_data, name='', label='', info='', displayerrors=True, readonly=False,
                               defaultvalue='', anid='') %}
    {% if not name %}
        {% set name = "fields.{}".format(field_data['field_name']) %}
    {% endif %}
    {% if not label %}
        {% set label = field_data['field_name'] %}
    {% endif %}
    {% if field_data['entries'] %}
        {# jinja does not support list comprehension ... #}
        {% set myentries = [] %}
        {% for value, description in field_data['entries'] %}
            {{ myentries.append((value, description))|e }}
        {% endfor %}
        {{ form_input_select(name=name, label=label, entries=myentries, nulloption=True,
                            readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
   {% else %}
        {% if field_data['kind'] == "bool" %}
            {{ form_input_checkbox(name=name, label=label, readonly=readonly, defaultvalue=defaultvalue, anid=anid) }}
        {% elif field_data['kind'] == "str" %}
            {{ form_input_textarea(name=name, label=label, displayerrors=displayerrors, readonly=readonly,
                                  defaultvalue=defaultvalue, anid=anid, rows=5) }}
        {% else %}
            {{ form_input_text(name=name, label=label, displayerrors=displayerrors, readonly=readonly,
                              defaultvalue=defaultvalue, anid=anid) }}
        {% endif %}
   {% endif %}
{% endmacro %}

{% macro display_csv_query_result(result, query, choices) -%}
{{ ";".join(query.fields_of_interest).replace(',', ';') }}
{% for row in result -%}
{% for csvfield in query.fields_of_interest -%}
{% for field in csvfield.split(',') -%}
{% with afield = field.split('.')[-1] -%}
{% if row.get(afield) is not none -%}
{{ (choices.get(csvfield, {}).get(row[afield], row[afield])|linebreaks(replacement="        ")).replace(';', ',') -}}
{# else we print nothing -#}
{% endif -%}
{% endwith -%}
{% if not loop.last %};{% endif -%}
{% endfor -%}
{% if not loop.last %};{% endif -%}
{% endfor %}
{% endfor -%}
{% endmacro %}

{% macro breadcrumb_begin() %}
<ol class="breadcrumb breadcrumb-small">
{% endmacro %}

{% macro breadcrumb_end() %}
</ol>
{% endmacro %}

{% macro breadcrumb_link(ref, label, icon="", active=False) %}
	{% if active %}
		<li class="active">
                    {% if icon %}<span class="glyphicon glyphicon-{{ icon|e }}"></span> {% endif %}{{ label|e }}
                </li>
	{% else %}
		<li>
                    <a href="{{ ref|e }}">
                        {% if icon %}<span class="glyphicon glyphicon-{{ icon|e }}"></span> {% endif %}{{ label|e }}
                    </a>
                </li>
	{% endif %}
{% endmacro %}


{% macro box_filter_begin(title='Filter') %}
<div class="panel panel-primary">
    <div class="panel-heading"><h3 class="panel-title">{{ title|e }}</h3></div>
    <div class="panel-body">
{% endmacro %}

{% macro box_filter_end() %}
    </div>
</div>
{% endmacro %}
