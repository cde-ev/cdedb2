{% set sidenav_active='ml_change' %}
{% extends "web/ml/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% block scripts %}
    {{ util.cdedb_script('cdedb_helper.js') }}
    {{ util.cdedb_script('cdedb_change_mailinglist.js') }}
{% endblock %}
{% set jshint='weak' %}
{% block title %}
    {% trans title=ambience['mailinglist']['title'] %}
        {{ title }} – Configuration
    {% endtrans %}
{% endblock %}
{% block breadcrumb %}
    {{ super() }}
    {% if is_admin %}
        {{ util.breadcrumb_link(cdedblink("ml/list_mailinglists"), gettext("All Mailinglists")) }}
    {% endif %}
    {{ util.breadcrumb_link(cdedblink("ml/show_mailinglist"), ambience['mailinglist']['title'], icon="envelope") }}
    {{ util.breadcrumb_link(cdedblink("ml/change_mailinglist"), gettext("Configuration"), active=True) }}
{% endblock %}
{% block heading %}
    {{ util.context_heading(gettext("Configuration"), ambience['mailinglist']['title'],
                            'envelope', gettext("Mailinglist")) }}
{% endblock %}
{% block static_notifications %}
    {% if restricted %}
        {% call util.notification('info') %}
            {% trans link = util.href(docurl("Handbuch_Moderator", anchor="eingeschränkte-moderatoren"),
                                      gettext("restricted moderator access"))|s %}
                You only have %(link)s and may not change subscriptions.
            {% endtrans %}
            {% trans %}
                Some fields may only be changed by admins.
            {% endtrans %}
        {% endcall %}
    {% elif not is_relative_admin %}
        {% call util.notification('info') %}
            {% trans %}
                Some fields may only be changed by admins.
            {% endtrans %}
        {% endcall %}
    {% endif %}
{% endblock %}
{% block content %}
    <script nonce="{{ csp_nonce }}">
        $(function() {
            $('#changelistform').cdedbProtectChanges().cdedbChangeMailinglist();
        });
    </script>
     <p class="text-info">
        {{ util.make_icon('info-circle') }}
        {% trans %}
            Note that every change can take up to 15 minutes to take effect.
        {% endtrans %}
    </p>
    {% set readonly = not ambience['mailinglist'].has_management_view(user) %}
    <form action="{{ cdedblink('ml/change_mailinglist') }}" method="POST" id="changelistform" class="form-horizontal">
        {{ util.anti_csrf_token('ml/change_mailinglist') }}
    <h4 class="heading-underline">{% trans %}Meta{% endtrans %}</h4>
        {{ util.form_input_checkbox(name="is_active", label=gettext("Active"), actualreadonly=readonly) }}
        {{ util.form_input_text(name="title", label=gettext("Title_[[name of an entity]]"), actualreadonly=readonly) }}
        {{ util.form_input_text(name="local_part", label=gettext("Address"), actualreadonly=readonly,
                                addon='@' + enums['MailinglistDomain'](ambience['mailinglist']['domain']).display_str()) }}
        {{ util.form_input_select(
                name="domain", label=gettext("Domain"), actualreadonly=readonly,
                defaultvalue=ambience['mailinglist']['domain'].value,
                entries=ambience["mailinglist"].available_domains|enum_entries(prefix="@")) }}
        <script nonce="{{ csp_nonce }}">
            domain_inp = $("#changelistform [name='domain']");
            function update_domain() {
                $("#changelistform [name='local_part'] ~ .input-group-addon")
                    .text(domain_inp[0].options[domain_inp[0].selectedIndex].innerHTML);
            }
            domain_inp.on('input', update_domain);
            update_domain();
        </script>
        {{ util.form_input_textarea(name="description", label=gettext("Description"), rows="5", markdown=True) }}
        {{ util.form_input_textarea(name="notes", label=gettext("Admin Notes"), rows="5", markdown=True) }}

    <h4 class="heading-underline">{% trans %}Moderation & Subscribers{% endtrans %}</h4>
        {{ util.form_input_select(name="mod_policy", label=gettext("Moderation"),
                entries=enums['ModerationPolicy']|enum_entries(processing=gettext)) }}
        {# Needed for the javascript stuff to work #}
        {{ util.input_hidden(name="ml_type", value=ambience["mailinglist"].ml_type) }}
        {% if readonly %}
            {{ util.form_input_static(label=gettext("Mailinglist Type"),
                    value=(gettext( enums['MailinglistTypes'](ambience['mailinglist']['ml_type'])|string ))) }}
        {% else %}
            {{ util.form_input_static(label=gettext("Mailinglist Type"),
                    value=(gettext( enums['MailinglistTypes'](ambience['mailinglist']['ml_type'])|string ) + (' ')
                        + util.href(cdedblink('ml/change_ml_type'), gettext("Change Type"),
                                    aclass="btn btn-warning btn-xs", icon="pen"))) }}
        {% endif %}
        {{ util.form_input_select(name="roster_visibility", label=gettext("Roster Visibility"),
                entries=enums["MailinglistRosterVisibility"]|enum_entries(processing=gettext), actualreadonly=readonly) }}
        {% if 'event_id' in additional_fields %}
            {{ util.form_input_select(name="event_id", label=gettext("Event"), nulloption=nbsp,
                    entries=event_entries, actualreadonly=readonly, info=gettext("The participants of this event will be "
                        "subscribers of this mailinglist. (Opt-Out)")) }}
        {% endif %}
        {% if 'registration_stati' in additional_fields %}
            {{ util.form_input_checkboxes(name="registration_stati", label=gettext("Event Audience"),
                    entries=enums['RegistrationPartStati']|enum_entries(processing=gettext), actualreadonly=restricted) }}
        {% endif %}
        {% if 'assembly_id' in additional_fields %}
            {{ util.form_input_select(name="assembly_id", label=gettext("Assembly"), nulloption=nbsp,
                actualreadonly=readonly, entries=assembly_entries, info=gettext("The participants of this assembly will "
                    "be subscribers of this mailinglist. (Opt-Out)")) }}
        {% endif %}

    <h4 class="heading-underline">{% trans %}Mails{% endtrans %}</h4>
        {{ util.form_input_text(name="subject_prefix", label=gettext("Subject Prefix"),
                info=gettext("Example: If the subject prefix is set to \"info\" and a user sends a Mail with "
                            "subject \"Invitation to PfingstAka\", the mail will be sent to the recipients as "
                            "\"[info] Invitation to PfingstAka\".")) }}
        <script nonce="{{ csp_nonce }}">
            var sp_inp = $('#changelistform').find("[name='subject_prefix']");
            function build_preview() {
                if (Boolean(sp_inp.val())===true) // if no subject_prefix is given, mailman also won't add any braces
                    var repl = "[" + escapeHtml(sp_inp.val()) +  "] ";
                else var repl = "";
                sp_inp.siblings("p.help-block").html('{{ util.make_icon('info-circle') }} ' +
                    "{{ gettext("Preview: %(prefix)sMail'sSubjectHere") }}"
                        .replace('%(prefix)s', repl));
            }
            sp_inp.on("input", build_preview);
            build_preview();
        </script>
        {{ util.form_input_select(name="attachment_policy", label=gettext("MIME filter / Attachments"),
                entries=enums['AttachmentPolicy']|enum_entries(processing=gettext)) }}
        {{ util.form_input_checkbox(name="convert_html",
                label=gettext("Automatically convert HTML emails to plaintext"),
                info=gettext("Disable this in cases of lists with external correspondence (e.g. business emails)"
                             " as there are actors causing problems with malformed emails.")) }}
        {{ util.form_input_text(name="maxsize", label=gettext("max. message size (in kB)"), type="number",
                info=gettext("Larger messages will be held for moderation.")) }}
        {{ util.form_input_textarea(name="additional_footer", label=gettext("Additional Footer"), rows="5") }}
        {{ util.form_input_submit(label=gettext("Save"), cancellink=cdedblink('ml/show_mailinglist')) }}
    </form>
{% endblock %}
