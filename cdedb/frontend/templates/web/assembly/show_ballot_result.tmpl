{% set sidenav_active='assembly_ballots' %}
{% extends "web/assembly/base.tmpl" %}
{% import "web/util.tmpl" as util with context %}
{% import "web/assembly/_ballot_tallied.tmpl" as ballot_tallied with context %}
{% import "web/assembly/_ballot_meta.tmpl" as ballot_meta with context %}

{% block title %}
    {% trans title=ambience['assembly']['title'] + "/" + ambience['ballot']['title'] %}
        Result ({{ title }})
    {% endtrans %}
{% endblock %}

{% block heading %}
    {{ util.context_heading(gettext("Detailed Results"), ambience['ballot']['title'], 'thumbs-up', gettext("Ballot"),
                            doclink='Realm_Assembly_Voting-Procedere') }}
{% endblock %}

{% block breadcrumb %}
    {{ super() }}
    {{ util.breadcrumb_link(cdedblink("assembly/show_assembly"), ambience['assembly']['title'], icon="bullhorn") }}
    {{ util.breadcrumb_link(cdedblink("assembly/list_ballots"), gettext("Ballots")) }}
    {{ util.breadcrumb_link(cdedblink("assembly/show_ballot"), ambience['ballot']['title'], icon="thumbs-up") }}
    {{ util.breadcrumb_link(cdedblink("assembly/show_ballot_result"), gettext("Detailed Results"), active=True) }}
{% endblock %}

{% macro print_vote(votestring) %}
    {%- for candidate_level in votestring.split(">") -%}
        {%- for candidate in candidate_level.split("=") -%}
            {{- candidates[candidate] -}}
            {%- if not loop.last -%}
                {{ nbsp }}<span class="result-separator">=</span>{{ nbsp }}
            {%- endif -%}
        {%- endfor -%}
        {%- if not loop.last -%}
            {{ nbsp }}<span class="result-separator">></span>{{ nbsp }}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block content %}

    {% set classical = ambience['ballot']['votes'] %}
    {% set preferential = not ambience['ballot']['votes'] %}

    <p>
        {% trans %}
            On this page, we provide some further details about the tallied ballot mentioned above.
            Everybody participating at the assembly or who is an active member can view this page.
        {% endtrans %}
    </p>

    <p>
        {% trans %}
            After evaluating all given votes, we obtain the following combined preference list of all participants:
        {% endtrans %}
    </p>

    <pre class="result" id="combined-preference">
        {{- print_vote(result['result']) -}}
    </pre>

    <p>
        {% trans  gt="<code class=result-separator >></code>"|s, eq="<code class=result-separator >=</code>"|s %}
            The greater-than character {{ gt }} means that the candidate, represented by their
            shortname, on the left has higher overall preference than the one on the right.
            The equals character {{ eq }} means that two or more candidates have the same overall
            preference across all participants.
        {% endtrans %}
    </p>

    {% if ambience['ballot']['use_bar'] %}
        <p>
            {% trans abm="<code class=result >%(abm)s</code>"|s|format(abm=candidates[ASSEMBLY_BAR_SHORTNAME]) %}
                Additionally the shortname {{ abm }} shows where in the election the rejection limit was ranked.
            {% endtrans %}
        </p>
    {% endif %}


    <h2 class="mosp">{% trans %}Verify the result{% endtrans %}</h2>

        <p>
            {% trans %}
                We allow you to verify every voting which has taken place in the CdEDB. For this, we offer you a
                download JSON file containing every information about a tallied ballot which is stored in the DB.
            {% endtrans %}
        </p>
        <p>
            {% trans name=gettext("<code>Result Verification</code>")|s, method=gettext("<a href='https://en.wikipedia.org/w/index.php?curid=680729'>Schulze method</a>")|s %}
                With our provided {{ name }} Script, you can check that the result displayed in the DB is
                actually correct. To obtain the result from the votes, we apply the {{ method }} internally.
            {% endtrans %}
        </p>
         <p>
            {% if has_voted %}
                {% trans name=gettext("<code>Own Vote Verification</code>")|s %}
                    With the {{ name }} Script, you can verify the correct count of your vote.
                    Additionally, you need the personal secret you received per mail when registering for this assembly.
                {% endtrans %}
            {% else %}
                {% trans name=gettext("<code>Own Vote Verification</code>")|s %}
                    Voters of this ballot can verify their vote using the {{ name }} Script
                    and the personal secret they received per mail when registering for this assembly.
                {% endtrans %}
            {% endif %}
         </p>


    <p>{{ util.href(cdedblink("assembly/get_result"), gettext("Download Results"), icon="download") }}</p>
    <p>{{ util.href(staticurl("verify_result.py"), gettext("Download Result Verification Script"), icon="download") }}</p>
    <p>{{ util.href(staticurl("verify_vote.py"), gettext("Download Own Vote Verification Script"), icon="download") }}</p>


    <h2 class="mosp">{% trans %}Result file hash{% endtrans %}</h2>

        <p>
            {% if ambience['assembly']['presider_address'] %}
                {% trans presider=util.href(util.mailto(ambience['assembly']['presider_address']), ambience['assembly']['presider_address']),
                         tally=util.href(util.mailto(BALLOT_TALLY_ADDRESS), BALLOT_TALLY_ADDRESS),
                         subscribe=util.href(BALLOT_TALLY_MAILINGLIST_URL, gettext("subscribe")) %}
                    After a ballot has been tallied, the generated result file and its hash will be sent to
                    {{ presider }} and {{ tally }}. To the latter mailinglist, everyone can {{ subscribe }}.
                {% endtrans %}
            {% else %}
                {% trans tally=util.href(util.mailto(BALLOT_TALLY_ADDRESS), BALLOT_TALLY_ADDRESS),
                         subscribe=util.href(BALLOT_TALLY_MAILINGLIST_URL, gettext("subscribe")) %}
                    After a ballot has been tallied, the generated result file and its hash
                    will be sent to {{ tally }}. To this mailinglist, everyone can {{ subscribe }}.
                {% endtrans %}
            {% endif %}
        </p>
        <p>
            {% trans algorithm="<code>SHA512</code>"|s %}
                To ensure that the result file has not been modified on the CdE server,
                we show the hash of the stored result file here, so you can compare those two.
                Of course, you can also download the result file and calculate the
                {{ algorithm }} hash by yourself.
            {% endtrans %}
        </p>
        <pre>{{ result_hash }}</pre>


    <h2 class="mosp">{% trans %}Votes{% endtrans %}</h2>

        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="col-sm-11">{% trans %}Vote_[[on a voting paper]]{% endtrans %}</th>
                    <th class="col-sm-push-1 text-right">{% trans %}Count{% endtrans %}</th>
                </tr>
            </thead>
            <tbody>
                {% for votestring, count in vote_counts|dictsort(by="value", reverse=True) %}
                    <tr id="vote-{{ loop.index }}">
                        <td>
                            {% if vote == MAGIC_ABSTAIN %}
                                {% trans %}Abstained{% endtrans %}
                            {% else %}
                                <code class="result">{{ print_vote(votestring) }}</code>
                            {% endif %}
                        </td>
                        <td class="text-right">
                            {{ count }}
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>


    <h2 class="mosp">{% trans %}Your Vote{% endtrans %}</h2>

    <div id="own-vote">
        {% if not attends %}
            {% trans %}You are not participating in this assembly.{% endtrans %}
        {% elif not has_voted %}
                {% trans %}You did not vote.{% endtrans %}
        {% elif own_vote %}
            {% if own_vote == MAGIC_ABSTAIN %}
                <p>{% trans %}You abstained.{% endtrans %}</p>
            {% elif own_vote == ASSEMBLY_BAR_SHORTNAME %}
                <p>{% trans %}You voted against all candidates.{% endtrans %}</p>
            {% else %}
                {% if classical %}
                    <p>{% trans %}You voted for the following candidates:{% endtrans %}</p>
                {% else %}
                    <p>{% trans %}You voted in the following preference:{% endtrans %}</p>
                {% endif %}
                <pre class="result">{{ print_vote(own_vote) }}</pre>
            {% endif %}
        {% else %}
            <p>
                {% trans %}The assembly concluded. The votes of specific users can no longer be extracted from the database in any way.{% endtrans %}
                {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
            </p>
            <form action="{{ cdedblink("assembly/show_old_vote") }}" id="showoldvoteform" method="POST">
                {{ util.anti_csrf_token("assembly/show_old_vote") }}
                <div class="input-group">
                    <span class="input-group-addon"><label for="input-secret">
                        {% trans %}Secret{% endtrans %}
                    </label></span>
                    {{ util.input_text(name="secret", anid="input-secret") }}
                    <div class="input-group-btn">
                        {{ util.input_submit(label=gettext("Show Vote"), aclass="btn btn-success", icon="lock") }}
                    </div>
                </div>
                {{ util.output_errors('secret', wrapper=True) }}
            </form>
        {% endif %}
    </div>


    <h2 class="mosp">{% trans %}Voters{% endtrans %}</h2>

        <div class="row" id="voters-list">
            {% for list in result['voters'] | slice((3 if result['voters']|length > 20 else 2)
                                                       if result['voters']|length > 10 else 1) %}
                <div class="col-sm-4">
                    <ul class="slim nosp">
                        {% for voter in list %}
                            <li>{{ voter }}</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endfor %}
        </div>

    {{ ballot_meta.show_navigation(page_name="assembly/show_ballot_result") }}

{% endblock %}
