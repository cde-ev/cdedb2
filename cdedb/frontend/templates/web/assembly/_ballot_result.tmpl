{% macro show_result(ballot, result, short=False) -%}
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th class="col-md-10">
                    {% trans %}Candidates{% endtrans %}
                </th>
                <th class="col-md-1">
                    {{ util.make_icon('plus', title=gettext("Pro-Votes")) }}
                </th>
                <th class="col-md-1">
                    {{ util.make_icon('minus', title=gettext("Contra-Votes")) }}
                </th>
            </tr>
        </thead>
    <tbody>
        {% set count = namespace(value=0) %}
        {% if result['winners'] %}
            {% for candidate_ids in result['winners'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_moniker = ballot['candidates'][candidate_id]['moniker'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {{ count.value }}.
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['description'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_moniker -}}
                                </span>
                            {% endif %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_moniker in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_moniker in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        {% if not loop.last %}
                            <br /><span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}

        {% if ballot['use_bar'] %}
            <tr
                {% for level in result['counts'] %}
                    {# it is possible that a candidate is equal to bar. This candidate will be in the winner section.
                       So, if bar is a winner and not the only winner, we must not print a new level number.
                       This has to check nonetherless for bar not in level[winner] and not in level[looser], think
                       of a vote without losers.#}
                    {% if ASSEMBLY_BAR_MONIKER in level['winner'] and level['winner']|length != 1
                       or ASSEMBLY_BAR_MONIKER in level['loser'] and level['loser']|length != 1 %}
                        class="no-upper-border"
                    {% endif %}
                {% endfor %}
            >
                <td>
                    {% for level in result['counts'] %}
                        {# it is possible that a candidate is equal to bar. This candidate will be in the winner section.
                           So, if bar is a winner and not the only winner, we must not increase the level number #}
                        {% if ASSEMBLY_BAR_MONIKER in level['winner'] and level['winner']|length == 1 %}
                            {% set count.value = count.value + 1 %}
                        {% endif %}
                    {% endfor %}
                    {{ count.value }}.
                </td>
                <td class="text-info">
                    {% if not short %}
                        {% if ballot['votes'] %}
                            {% trans abm="<code>%(abm)s</code>"|s|format(abm=ASSEMBLY_BAR_MONIKER) %}
                                The following candidates have less votes than the "Against all Candidates" ({{ abm }}) choice.
                            {% endtrans %}
                        {% else %}
                            {% trans abm="<code>%(abm)s</code>"|s|format(abm=ASSEMBLY_BAR_MONIKER) %}
                                The following candidates lost against the bar ({{ abm }}).
                            {% endtrans %}
                        {% endif %}
                    {% else %}
                        {% trans abm="<code>%(abm)s</code>"|s|format(abm=ASSEMBLY_BAR_MONIKER) %}
                            The bar option {{ abm }}.
                        {% endtrans %}
                    {% endif %}
                </td>
                <td>
                    {% for level in result['counts'] %}
                        {# see above for a detailed explanation #}
                        {% if ASSEMBLY_BAR_MONIKER in level['winner'] and level['winner']|length == 1 %}
                            {{ level['pro_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
                <td>
                    {% for level in result['counts'] %}
                        {# see above for a detailed explanation #}
                        {% if ASSEMBLY_BAR_MONIKER in level['winner'] and level['winner']|length == 1 %}
                            {{ level['contra_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
            </tr>
        {% endif %}

        {% if result['losers'] %}
            {% for candidate_ids in result['losers'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_moniker = ballot['candidates'][candidate_id]['moniker'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {{ count.value }}.
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['description'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_moniker -}}
                                </span>
                            {% endif %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_moniker in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_moniker in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        {% if not loop.last %}
                            <br /><span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}
    </tbody>
    </table>
{%- endmacro %}

{% macro explain_result() %}
    {% call util.bootstrap_panel(title=gettext("Help"), icon='info-sign', aclass='panel-default mosp') %}
        <p>
            Die Pro (a) und Kontra (b) Stimmen gelten f√ºr die jeweilige Platzierung (x) und beziehen sich relativ
            auf die darunter liegende Platzierung (y).
        </p>
        <p>
            Also: Option x gewinnt gegen Option y mit a Pro und b Kontra Stimmen.
        </p>
    {% endcall %}
{% endmacro %}

{% macro show_summary() -%}
    <pre style="max-width: 500px;">{{ result['result'] }}</pre>

    {# info box for preferential votes #}
    {% call util.bootstrap_panel(title=gettext("Help"), icon='info-sign', aclass='panel-default mosp') %}
        <p>
            {% trans link=gettext("<a href='https://en.wikipedia.org/w/index.php?title=Schulze_method&oldid=904460701'>Schulze method</a>")|s %}
                This vote was a preferential vote. Voters arranged the candidates according to their preference.
                The preferences of all participants were evaluated using the {{ link }},
                to determine the winner.
            {% endtrans %}
        </p>
        <p>
            {% trans  gt="<code>></code>"|s, eq="<code>=</code>"|s %}
                The summary shows the combined preference list of all participant.
                The greater-than character {{ gt }} means that the candidate, represented by their
                shortname, on the left has higher overall preference than the one on the right.
                The equals character {{ eq }} means that two or more candidates have the same overall
                preference across all participants.
            {% endtrans %}
        </p>
        {% if ambience['ballot']['use_bar'] %}
            <p>
                {% trans abm="<code>%(abm)s</code>"|s|format(abm=ASSEMBLY_BAR_MONIKER) %}
                    Additionally the moniker {{ abm }} shows where in the rejection bar was ranked in the
                    overall preference list.
                    Should no candidate have won against the bar, the board may take additional measures.
                {% endtrans %}
            </p>
        {% endif %}
    {% endcall %}
{%- endmacro %}

{% macro show_own_vote() -%}
    <h3>{% trans %}Your Vote{% endtrans %}</h3>
    <div id="own-vote">
        {% set is_active = ambience["assembly"]["is_active"] %}
        {% if not attends %}
            {% trans %}You are not participating in this assembly.{% endtrans %}
        {% elif not is_active and not own_vote %}
            {% if not has_voted %}
                {% trans %}You did not vote.{% endtrans %}
            {% else %}
                {% if not secret %}
                    <p>
                        {{ util.make_icon('info-sign') }}
                        {% trans %}The assembly concluded and the votes got encrypted.{% endtrans %}
                        {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
                    </p>
                {% else %}
                    <p>
                        {{ util.make_icon('info-sign') }}
                        {% trans %}You entered an invalid secret.{% endtrans %}
                        {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
                    </p>
                {% endif %}
                <form action="{{ cdedblink("assembly/show_old_vote") }}" id="showoldvoteform" method="POST">
                    {{ util.anti_csrf_token("assembly/show_old_vote") }}
                    <div class="input-group">
                        <span class="input-group-addon"><label for="input-secret">
                            {% trans %}Secret{% endtrans %}
                        </label></span>
                        {{ util.input_text(name="secret", anid="input-secret") }}
                        <div class="input-group-btn">
                            {{ util.input_submit(value=gettext("Show Vote"), aclass="btn btn-success", icon="lock") }}
                        </div>
                    </div>
                    {{ util.output_errors('secret', wrapper=True) }}
                </form>
            {% endif %}
        {% elif not own_vote %}
            {% if ambience['ballot']['is_voting'] %}
                {% trans %}You have not voted yet.{% endtrans %}
            {% else %}
                {% trans %}You did not vote.{% endtrans %}
            {% endif %}
        {% elif ambience['ballot']['votes'] %}
            {# Show own vote under result: Classical vote #}
            {% if split_vote|length == 1 %}
                {% trans %}You abstained.{% endtrans %}
            {% elif split_vote|length == 2 and split_vote[0] == [ASSEMBLY_BAR_MONIKER] %}
                {% trans %}You voted against all candidates.{% endtrans %}
            {% else %}
                {% trans %}You voted for the following candidates:{% endtrans %}<br />
                {% for vote in split_vote[0] %}
                    {{ candidates[vote]['description'] }}{% if not loop.last %},{% endif %}
                {% endfor %}
            {% endif %}
        {% else %}
            {# Show own vote under result: Preferential vote #}
            {%- trans vote="<code>%(vote)s</code>"|s|format(vote=own_vote) %}
                You voted {{ vote }}.
            {% endtrans -%}
        {% endif %}
    </div>
{%- endmacro %}
