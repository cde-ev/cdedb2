{% macro show_result(ballot, result, short=False) -%}
    {% set is_classical = ballot['votes'] %}
    <table class="table table-condensed table-hover">
        <thead>
            <tr>
                <th class="col-sm-1">
                    {{ util.make_icon('sort-amount-down-alt', title=gettext("Ranking"), fixed_width=False) }}
                </th>
                <th class="col-sm-{% if is_classical %}10{% else %}9{% endif %}">
                    {% trans %}Candidates{% endtrans %}
                </th>
                <th class="col-sm-1">
                    {{ util.make_icon('plus', title=gettext("Pro-Votes"), fixed_width=False) }}
                </th>
            {% if not is_classical %}
                <th class="col-sm-1">
                    {{ util.make_icon('minus', title=gettext("Contra-Votes"), fixed_width=False) }}
                </th>
            {% endif %}
            </tr>
        </thead>
    <tbody>
        {% set count = namespace(value=0) %}
        {% if result['winners'] %}
            {% for candidate_ids in result['winners'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_shortname -}}
                                </span>
                            {% endif %}
                        </td>
                    {% if is_classical %}
                        <td>
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}

        {% if ballot['use_bar'] %}
            <tr
                {% for level in result['counts'] %}
                    {# it is possible that a candidate is equal to bar. This candidate will be in the winner section.
                       So, if bar is a winner and not the only winner, we must not print an upper boarder.
                       This has to check nonetherless for bar not in level[winner] and not in level[looser], think
                       of a vote without losers.#}
                    {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length != 1
                       or ASSEMBLY_BAR_SHORTNAME in level['loser'] and level['loser']|length != 1 %}
                        class="no-upper-border"
                    {% endif %}
                {% endfor %}
            >
                <td>
                    {# We do not count bar as candidate, imagine bar to be an infinitisimal border between candidates. #}
                </td>
                <td class="text-info">
                    {% if is_classical %}
                        {% trans %}
                            Against all Candidates.
                        {% endtrans %}
                    {% else %}
                        {% trans %}
                            Rejection limit.
                        {% endtrans %}
                    {% endif %}
                </td>
            {% if is_classical %}
                {# this are the votes for the 'against all' choice #}
                <td>
                    {{ result['counts'][ASSEMBLY_BAR_SHORTNAME] }}
                </td>
            {% else %}
                <td>
                    {% for level in result['counts'] %}
                        {# It is possible that a candidate is equal to bar. This candidate will be in the winner section.
                           So, if bar is a winner and not the only winner, we do not show the votes. #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length == 1 %}
                            {{ level['pro_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
                <td>
                    {% for level in result['counts'] %}
                        {# see above for a detailed explanation #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length == 1 %}
                            {{ level['contra_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
            {% endif %}
            </tr>
        {% endif %}

        {% if result['losers'] %}
            {% for candidate_ids in result['losers'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_shortname -}}
                                </span>
                            {% endif %}
                        </td>
                    {% if is_classical %}
                        <td>
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <br /><span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}
    </tbody>
    </table>
    {% trans abstentions=result['abstentions'] %}
        {{ abstentions }} voters had abstained.
    {% endtrans %}
{%- endmacro %}



{# Print an explanation text for the result. If both classical and preferential is given, both are printed. #}
{% macro explain_result(classical=false, preferential=false, use_bar=false) %}
    {% call util.bootstrap_panel(title=gettext("Help for tallying"), icon='info-circle', aclass='panel-default panel-condensed mosp') %}

        {% if classical and preferential %}
            <b>{% trans %}Classical vote{% endtrans %}</b><br />
        {% endif %}

        {% if classical %}
            <p>
                {% trans %}
                    Pro votes are the sum of all votes in favor of this candidate. Votes against candidates are not
                    possible in this voting system.
                {% endtrans %}
            </p>
            {% if use_bar %}
                <p>
                    {% trans %}
                        Using the "Against all candidates" option it is possible to vote against all candidates.
                        This option can only be exclusively chosen, potential other votes expire.
                    {% endtrans %}
                </p>
            {% endif %}
        {% endif %}

        {% if classical and preferential %}
            <b>{% trans %}Preferential vote{% endtrans %}</b><br />
        {% endif %}

        {% if preferential %}
            <p>
                {% trans %}
                    Pro votes (i.e. 5) and Contra votes (i.e. 2) are valid for the given position and are relative to
                    the next lower position (i.e. 3.). Multiple candidates can share the same position in the ranking.
                {% endtrans %}
            </p>
            <p>
                {% trans %}
                    Therefore, all candidates on 3rd place win against all candidates on fourth place with 5 Pro votes
                    and 2 Contra votes.
                {% endtrans %}
            </p>
        {% endif %}

    {% endcall %}
{% endmacro %}



{% macro show_summary() -%}
    {% set is_preferential = ambience['ballot']['votes'] %}

    <pre style="max-width: 500px;">{{ result['result'] }}</pre>

    <p>
        {% if is_preferential %}
            {% trans link=gettext("<a href='https://en.wikipedia.org/w/index.php?title=Schulze_method&oldid=904460701'>Schulze method</a>")|s %}
                This vote was a preferential vote. Voters arranged the candidates according to their preference.
                The preferences of all participants were evaluated using the {{ link }},
                to determine the winner.
            {% endtrans %}
        {% else %}
            {% trans link=gettext("<a href='https://en.wikipedia.org/w/index.php?title=Schulze_method&oldid=904460701'>Schulze method</a>")|s %}
                This vote was a classical vote. The result was obtained by using the {{ link }}.
            {% endtrans %}
        {% endif %}
    </p>

    <p>
        {% trans  gt="<code>></code>"|s, eq="<code>=</code>"|s %}
            The summary shows the combined preference list of all participant.
            The greater-than character {{ gt }} means that the candidate, represented by their
            shortname, on the left has higher overall preference than the one on the right.
            The equals character {{ eq }} means that two or more candidates have the same overall
            preference across all participants.
        {% endtrans %}
    </p>

    {% if ambience['ballot']['use_bar'] %}
        <p>
            {% trans abm="<code>%(abm)s</code>"|s|format(abm=ASSEMBLY_BAR_SHORTNAME) %}
                Additionally the shortname {{ abm }} shows where in the election the rejection limit was ranked.
                Should no candidate have won against the rejection limit, the board may take additional measures.
            {% endtrans %}
        </p>
    {% endif %}

{%- endmacro %}



{% macro show_own_vote() -%}
    <div id="own-vote">
        {% if not attends %}
            {% trans %}You are not participating in this assembly.{% endtrans %}
        {% elif not has_voted %}
                {% trans %}You did not vote.{% endtrans %}
        {% elif own_vote %}
            {# Show own vote under result: Classical vote #}
            {% if ambience['ballot']['votes'] %}
                {% if split_vote|length == 1 %}
                    {% trans %}You abstained.{% endtrans %}
                {% elif split_vote|length == 2 and split_vote[0] == [ASSEMBLY_BAR_SHORTNAME] %}
                    {% trans %}You voted against all candidates.{% endtrans %}
                {% else %}
                    {% trans %}You voted for the following candidates:{% endtrans %}<br />
                    {% for vote in split_vote[0] %}
                        {{ candidates[vote]['title'] }}{% if not loop.last %},{% endif %}
                    {% endfor %}
                {% endif %}
            {# Show own vote under result: Preferential vote #}
            {% else %}
                {%- trans vote="<code>%(vote)s</code>"|s|format(vote=own_vote) %}
                    You voted {{ vote }}.
                {% endtrans -%}
            {% endif %}
        {% else %}
            {% if secret %}
                <p>
                    {{ util.make_icon('info-circle') }}
                    {% trans %}You entered an invalid secret.{% endtrans %}
                    {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
                </p>
            {% else %}
                <p>
                    {{ util.make_icon('info-circle') }}
                    {% trans %}The assembly concluded. The votes of specific users can no longer be extracted from the database in any way.{% endtrans %}
                    {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
                </p>
            {% endif %}
            <form action="{{ cdedblink("assembly/show_old_vote") }}" id="showoldvoteform" method="POST">
                {{ util.anti_csrf_token("assembly/show_old_vote") }}
                <div class="input-group">
                    <span class="input-group-addon"><label for="input-secret">
                        {% trans %}Secret{% endtrans %}
                    </label></span>
                    {{ util.input_text(name="secret", anid="input-secret") }}
                    <div class="input-group-btn">
                        {{ util.input_submit(value=gettext("Show Vote"), aclass="btn btn-success", icon="lock") }}
                    </div>
                </div>
                {{ util.output_errors('secret', wrapper=True) }}
            </form>
        {% endif %}
    </div>
{%- endmacro %}
