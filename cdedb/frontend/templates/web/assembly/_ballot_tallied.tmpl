{% macro show_result(ballot, result, short=False) -%}
    {% set is_classical = ballot['votes'] %}
    <table class="table table-condensed table-hover">
        <thead>
            <tr>
                <th class="col-sm-1">
                    {{ util.make_icon('sort-amount-down-alt', title=gettext("Ranking"), fixed_width=False) }}
                </th>
                <th class="col-sm-{% if is_classical %}10{% else %}9{% endif %}">
                    {% trans %}Candidates{% endtrans %}
                </th>
                <th class="col-sm-1">
                    {{ util.make_icon('plus', title=gettext("Pro-Votes"), fixed_width=False) }}
                </th>
            {% if not is_classical %}
                <th class="col-sm-1">
                    {{ util.make_icon('minus', title=gettext("Contra-Votes"), fixed_width=False) }}
                </th>
            {% endif %}
            </tr>
        </thead>
    <tbody>
        {% set count = namespace(value=0) %}
        {% if result['winners'] %}
            {% for candidate_ids in result['winners'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_shortname -}}
                                </span>
                            {% endif %}
                        </td>
                    {% if is_classical %}
                        <td>
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}

        {% if ballot['use_bar'] %}
            <tr
                {% for level in result['counts'] %}
                    {# it is possible that a candidate is equal to bar. This candidate will be in the winner section.
                       So, if bar is a winner and not the only winner, we must not print an upper boarder.
                       This has to check nonetherless for bar not in level[winner] and not in level[looser], think
                       of a vote without losers.#}
                    {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length != 1
                       or ASSEMBLY_BAR_SHORTNAME in level['loser'] and level['loser']|length != 1 %}
                        class="no-upper-border"
                    {% endif %}
                {% endfor %}
            >
                <td>
                    {# We do not count bar as candidate, imagine bar to be an infinitisimal border between candidates. #}
                </td>
                <td class="text-info">
                    {% if is_classical %}
                        {% trans %}
                            Against all Candidates.
                        {% endtrans %}
                    {% else %}
                        {% trans %}
                            Rejection limit.
                        {% endtrans %}
                    {% endif %}
                </td>
            {% if is_classical %}
                {# this are the votes for the 'against all' choice #}
                <td>
                    {{ result['counts'][ASSEMBLY_BAR_SHORTNAME] }}
                </td>
            {% else %}
                <td>
                    {% for level in result['counts'] %}
                        {# It is possible that a candidate is equal to bar. This candidate will be in the winner section.
                           So, if bar is a winner and not the only winner, we do not show the votes. #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length == 1 %}
                            {{ level['pro_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
                <td>
                    {% for level in result['counts'] %}
                        {# see above for a detailed explanation #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['winner'] and level['winner']|length == 1 %}
                            {{ level['contra_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
            {% endif %}
            </tr>
        {% endif %}

        {% if result['losers'] %}
            {% for candidate_ids in result['losers'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                            {% if not ballot['votes'] and not short %}
                                <span class="label label-primary">
                                    {{- candidate_shortname -}}
                                </span>
                            {% endif %}
                        </td>
                    {% if is_classical %}
                        <td>
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['winner'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <br /><span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}
    </tbody>
    </table>
    {% trans abstentions=result['abstentions'] %}
        {{ abstentions }} voters had abstained.
    {% endtrans %}
{%- endmacro %}



{# Print an explanation text for the result. If both classical and preferential is given, both are printed. #}
{% macro explain_result(classical=false, preferential=false, use_bar=false) %}
    {% call util.bootstrap_panel(title=gettext("Help for tallying"), icon='info-circle', aclass='panel-default panel-condensed mosp') %}

        {% if classical and preferential %}
            <b>{% trans %}Classical vote{% endtrans %}</b><br />
        {% endif %}

        {% if classical %}
            <p>
                {% trans %}
                    Pro votes are the sum of all votes in favor of this candidate.
                    Votes against single candidates are not possible in this voting system.
                {% endtrans %}
            </p>
            {% if use_bar %}
                <p>
                    {% trans %}
                        Using the "Against all candidates" option it is possible to vote against all candidates.
                        This option can only be exclusively chosen, potential other votes expire.
                    {% endtrans %}
                </p>
            {% endif %}
        {% endif %}

        {% if classical and preferential %}
            <b>{% trans %}Preferential vote{% endtrans %}</b><br />
        {% endif %}

        {% if preferential %}
            <p>
                {% trans %}
                    Pro votes and Contra votes are valid for the given position and are relative to
                    the next lower position. Multiple candidates can share the same position in the ranking.
                {% endtrans %}
            </p>
        {% endif %}

    {% endcall %}
{% endmacro %}



{% macro show_own_vote() -%}
    <div id="own-vote">
        {% if not attends %}
            {% trans %}You are not participating in this assembly.{% endtrans %}
        {% elif not has_voted %}
                {% trans %}You did not vote.{% endtrans %}
        {% elif own_vote %}
            {# Show own vote under result: Classical vote #}
            {% if ambience['ballot']['votes'] %}
                {% if own_vote == MAGIC_ABSTAIN %}
                    <p>{% trans %}You abstained.{% endtrans %}</p>
                {% elif own_vote == ASSEMBLY_BAR_SHORTNAME %}
                    <p>{% trans %}You voted against all candidates.{% endtrans %}</p>
                {% else %}
                    <p>{% trans %}You voted for the following candidates:{% endtrans %}</p>
                    <pre class="result">
                        {%- for vote in own_vote -%}
                            {{ vote }}{% if not loop.last %},{{ nbsp }}{% endif %}
                        {%- endfor -%}
                    </pre>
                {% endif %}
            {# Show own vote under result: Preferential vote #}
            {% else %}
                <p>{% trans %}You voted in the following preference:{% endtrans %}</p>
                    <pre class="result">{{ own_vote }}</pre>
            {% endif %}
        {% else %}
            <p>
                {% trans %}The assembly concluded. The votes of specific users can no longer be extracted from the database in any way.{% endtrans %}
                {% trans %}To show your vote, enter the secret you were sent when registering for the assembly.{% endtrans %}
            </p>
            <form action="{{ cdedblink("assembly/show_old_vote") }}" id="showoldvoteform" method="POST">
                {{ util.anti_csrf_token("assembly/show_old_vote") }}
                <div class="input-group">
                    <span class="input-group-addon"><label for="input-secret">
                        {% trans %}Secret{% endtrans %}
                    </label></span>
                    {{ util.input_text(name="secret", anid="input-secret") }}
                    <div class="input-group-btn">
                        {{ util.input_submit(value=gettext("Show Vote"), aclass="btn btn-success", icon="lock") }}
                    </div>
                </div>
                {{ util.output_errors('secret', wrapper=True) }}
            </form>
        {% endif %}
    </div>
{%- endmacro %}
