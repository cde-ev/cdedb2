{% macro show_result(ballot, result, short=False) -%}
    {% set is_classical = ballot['votes'] %}
    <table class="table table-condensed table-hover">
        <thead>
            <tr>
                <th class="col-sm-1">
                    {{ util.make_icon('sort-amount-down-alt', title=gettext("Ranking"), fixed_width=False) }}
                </th>
                <th class="col-sm-{% if is_classical %}10{% else %}9{% endif %}">
                    {% trans %}Candidates{% endtrans %}
                </th>
                <th class="col-sm-1 text-right">
                    {{ util.make_icon('plus', title=gettext("Pro-Votes"), fixed_width=False) }}
                </th>
            {% if not is_classical %}
                <th class="col-sm-1 text-right">
                    {{ util.make_icon('minus', title=gettext("Contra-Votes"), fixed_width=False) }}
                </th>
            {% endif %}
            </tr>
        </thead>
    <tbody>
        {% set count = namespace(value=0) %}
        {% if result['preferred'] %}
            {% for candidate_ids in result['preferred'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                        </td>
                    {% if is_classical %}
                        <td class="text-right">
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td class="text-right">
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['preferred'] and first_candidate %}
                                    {# We do some simplification since we show only the support for one candidate of
                                       the current level (they may differ for each candidate combination from this and
                                       level and the level below). However, since dict sorting is stable, its always
                                       the same number. #}
                                    {{ level['support'].values()|first }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td class="text-right">
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['preferred'] and first_candidate %}
                                    {# See above for explanation. #}
                                    {{ level['opposition'].values()|first }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}

        {% if ballot['use_bar'] %}
            <tr
                {% for level in result['counts'] %}
                    {# It is possible that a candidate is equal to the bar. If this is the case, the candidate
                       needs to be printed above the bar, in the 'preferred' section. Therefore, if the bar is
                       in level['preferred'] and there are also other candidates in level['prefered'], we do not
                       print an upper border.
                       The same is true if there are no candidates below the bar, so we apply the same logic to
                       'rejected'. #}
                    {% if ASSEMBLY_BAR_SHORTNAME in level['preferred'] and level['preferred']|length != 1
                       or ASSEMBLY_BAR_SHORTNAME in level['rejected'] and level['rejected']|length != 1 %}
                        class="no-upper-border"
                    {% endif %}
                {% endfor %}
            >
                <td>
                    {# We do not count bar as candidate, imagine bar to be an infinitisimal border between candidates. #}
                </td>
                <td class="text-info">
                    {% if is_classical %}
                        {% trans %}
                            Against all Candidates.
                        {% endtrans %}
                    {% else %}
                        {% trans %}
                            Rejection limit.
                        {% endtrans %}
                    {% endif %}
                </td>
            {% if is_classical %}
                {# this are the votes for the 'against all' choice #}
                <td class="text-right">
                    {{ result['counts'][ASSEMBLY_BAR_SHORTNAME] }}
                </td>
            {% else %}
                <td class="text-right">
                    {% for level in result['counts'] %}
                        {# It is possible that a candidate is equal to bar. This candidate will be in the preferred section.
                           So, if preferred and not the only preferred candidate, we do not show the votes. #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['preferred'] and level['preferred']|length == 1 %}
                            {{ level['pro_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
                <td class="text-right">
                    {% for level in result['counts'] %}
                        {# see above for a detailed explanation #}
                        {% if ASSEMBLY_BAR_SHORTNAME in level['preferred'] and level['preferred']|length == 1 %}
                            {{ level['contra_votes'] }}
                        {% endif %}
                    {% endfor %}
                </td>
            {% endif %}
            </tr>
        {% endif %}

        {% if result['rejected'] %}
            {% for candidate_ids in result['rejected'] %}
                {% set count.value = count.value + 1 %}
                {% for candidate_id in candidate_ids %}
                    {% set candidate_shortname = ballot['candidates'][candidate_id]['shortname'] %}
                    {% set first_candidate = loop.first %}
                    <tr{% if not loop.first %} class="no-upper-border"{% endif %}>
                        <td>
                            {% if loop.first %}
                                {{ count.value }}.
                            {% endif %}
                        </td>
                        <td>
                            {{ ballot['candidates'][candidate_id]['title'] }}
                        </td>
                    {% if is_classical %}
                        <td class="text-right">
                            {% if first_candidate %}
                                {{ result['counts'][candidate_shortname] }}
                            {% endif %}
                        </td>
                    {% else %}
                        <td class="text-right">
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['preferred'] and first_candidate %}
                                    {{ level['pro_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td class="text-right">
                            {% for level in result['counts'] %}
                                {% if candidate_shortname in level['preferred'] and first_candidate %}
                                    {{ level['contra_votes'] }}
                                {% endif %}
                            {% endfor %}
                        </td>
                    {% endif %}
                        {% if not loop.last %}
                            <br /><span class="sr-only">{% trans %}and{% endtrans %}</span>
                        {% endif %}
                    </tr>
                {% endfor %}
            {% endfor %}
        {% endif %}
    </tbody>
    </table>
    <p>
        {% trans abstentions=result['abstentions'] %}
            {{ abstentions }} voters had abstained.
        {% endtrans %}
    </p>
{%- endmacro %}



{# Print an explanation text for the result. If both classical and preferential is given, both are printed. #}
{% macro explain_result(classical=false, preferential=false, use_bar=false) %}
    {% call util.bootstrap_panel(title=gettext("Help for tallying"), icon='info-circle', aclass='panel-default panel-condensed mosp') %}

        {% if classical and preferential %}
            <b>{% trans %}Classical vote{% endtrans %}</b><br />
        {% endif %}

        {% if classical %}
            <p>
                {% trans %}
                    Pro votes are the sum of all votes in favor of this candidate.
                    Votes against single candidates are not possible in this voting system.
                {% endtrans %}
            </p>
            {% if use_bar %}
                <p>
                    {% trans %}
                        Using the "Against all candidates" option it is possible to vote against all candidates.
                        This option can only be exclusively chosen, potential other votes expire.
                    {% endtrans %}
                </p>
            {% endif %}
        {% endif %}

        {% if classical and preferential %}
            <b>{% trans %}Preferential vote{% endtrans %}</b><br />
        {% endif %}

        {% if preferential %}
            <p>
                {% trans %}
                    Pro votes and Contra votes are valid for the given position and are relative to
                    the next lower position. Multiple candidates can share the same position in the ranking.
                {% endtrans %}
            </p>
        {% endif %}

    {% endcall %}
{% endmacro %}
