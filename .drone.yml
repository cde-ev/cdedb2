kind: pipeline
type: docker
name: default

workspace:
  base: /cdedb2
  path: .

clone:
  disable: true

steps:
- name: clone
  image: docker:20.10-git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  # make use of our custom po file merge driver
  - apk add --no-cache gettext
  - |
    echo '''[merge "pomerge"]
        name = Gettext merge driver
        driver = i18n/git-merge-po.sh %O %A %B
    ''' >> ./.git/config
  - git fetch origin $DRONE_TARGET_BRANCH
  - git checkout $DRONE_TARGET_BRANCH
  - git fetch origin $DRONE_COMMIT
  - git merge $DRONE_COMMIT || (git merge --abort && git checkout $DRONE_COMMIT)
- name: build images
  image: docker:20.10
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  depends_on:
  - clone
  commands:
  # we do not tag a version as this would create many images
  # which would not be cleared from docker cache
  - docker build --file related/docker/Dockerfile-postgres --tag cdepostgres .
  - docker build --file related/docker/Dockerfile-cdedb --tag cdedb:20210705 .
  - docker build --file related/docker/Dockerfile-ldap --tag ldap:20210705 .
- name: cdb # is used as the hostname for the container
  image: cdepostgres
  pull: never # do not try to pull image from docker hub
  detach: true # detach to keep running for the following steps
  environment:
    POSTGRES_PASSWORD: passwd
  volumes:
  - name: database
    path: /var/lib/postgresql/data
  depends_on:
  - build images
- name: evolution-trial
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
    - cdb
  commands:
    - sleep 5
    - make i18n-compile # needed for sample-data creation in evolution-trial.sh
    - make sql-initial # add the postgres user
    - bin/evolution-trial.sh origin/$DRONE_TARGET_BRANCH $DRONE_COMMIT
- name: mypy
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
    - failure
    - success
  commands:
    - make mypy
- name: lint
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
    - failure
    - success
  commands:
    - make lint
- name: testsuite-setup
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
      - failure
      - success
  commands:
  - sleep 5
  - pg_isready --host=cdb --timeout=10 # wait for database to come online
  - make i18n-compile # required for sample-data target
  - make sample-data # this creates the sql schema and copies the localconfig.py
  - make sql DATABASE_NAME=cdb_test # create the test database for ldap
- name: ldap # is used as the hostname for the container
  image: ldap:20210705
  pull: never # do not try to pull image from docker hub
  detach: true # detach to keep running for the following steps
  depends_on:
  - testsuite-setup
  when:
    status:
      - failure
      - success
  environment:
    # we use the database without a name as only readonly access is required
    # and this will work regardless of the id the testing container gets
    DATABASE_NAME: cdb_test
- name: frontend tests a-d
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
  - bin/check.py --verbose --first # everything before event
- name: frontend tests e-z
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
  - bin/check.py --verbose --second # event and following
- name: non-frontend tests
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
  - bin/check.py --verbose --third
- name: ldap tests
  image: cdedb:20210705
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
  - sleep 10
  - bin/check.py --verbose --no-application --all-ldap
- name: xss
  image: cdedb:20210705
  pull: never
  depends_on:
    - testsuite-setup
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
    - bin/check.py --verbose --no-application --xss
- name: check for merge conflicts
  image: docker:20.10-git
  pull: never # do not try to pull image from docker hub
  depends_on:
  - frontend tests a-d
  - frontend tests e-z
  - non-frontend tests
  - ldap tests
  - xss
  when:
    status:
    - failure
    - success
  commands:
  # let the pipeline fail if merge caused conflicts
  - apk add --no-cache gettext
  - git checkout $DRONE_TARGET_BRANCH
  - git merge $DRONE_COMMIT

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock
- name: database
  temp:
    medium: memory
- name: tmp_dir
  temp: {}

trigger:
  branch:
  - master
  - stable
  - ci/*
