kind: pipeline
type: docker
name: default

workspace:
  base: /cdedb2
  path: .

clone:
  disable: true

steps:
- name: clone
  image: docker:20.10-git
  commands:
  - git clone $DRONE_GIT_HTTP_URL .
  # make use of our custom po file merge driver
  - apk add --no-cache gettext
  - |
    echo '''[merge "pomerge"]
        name = Gettext merge driver
        driver = i18n/git-merge-po.sh %O %A %B
    ''' >> ./.git/config
  - git fetch origin $DRONE_TARGET_BRANCH
  - git checkout $DRONE_TARGET_BRANCH
  - git fetch origin $DRONE_COMMIT
  - git merge $DRONE_COMMIT || (git merge --abort && git checkout $DRONE_COMMIT)
  - git tag --force --message "Git state upon which all ci steps work." ci/workdir
- name: build images
  image: docker:20.10
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  depends_on:
  - clone
  commands:
  # we do not tag a version as this would create many images
  # which would not be cleared from docker cache
  - docker build --file related/docker/Dockerfile-postgres --tag cdepostgres .
  - docker build --file related/docker/Dockerfile-cdedb --tag cdedb .
  - docker build --file related/docker/Dockerfile-ldaptor --tag ldaptor .
- name: cdb # is used as the hostname for the container
  image: cdepostgres
  pull: never # do not try to pull image from docker hub
  detach: true # detach to keep running for the following steps
  environment:
    POSTGRES_PASSWORD: passwd
  volumes:
  - name: database
    path: /var/lib/postgresql/data
  depends_on:
  - build images
- name: evolution-trial
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
    - cdb
  environment:
    CDEDB_CONFIGPATH: tests/config/test_1.py
    POSTGRES_PASSWORD: passwd
  commands:
    - make i18n-compile # needed for sample-data creation in evolution-trial.sh
    - python3 -m cdedb filesystem log create # TODO needed during dependencies of script.py
    - sleep 3 # wait for posgres container to start up
    - pg_isready --host=cdb --timeout=15 # wait for database to come online
    - python3 -m cdedb db create-users # basic setup of the database for all following tests
    - bin/evolution-trial.sh origin/$DRONE_TARGET_BRANCH ci/workdir || (git checkout ci/workdir && exit 1)
    - git checkout ci/workdir
- name: mypy
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
    - failure
    - success
  commands:
    - make mypy
- name: lint
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
    - failure
    - success
  commands:
    - make --keep-going lint
- name: testsuite-setup
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
    - evolution-trial # wait for all git operations to be done
  when:
    status:
      - failure
      - success
  environment:
    CDEDB_CONFIGPATH: tests/config/test_ldap.py
  commands:
  - make i18n-compile # required for sample-data target
  - pg_isready --host=cdb --timeout=15 # wait for database to come online
  - python3 -m cdedb filesystem log create
  - python3 -m cdedb db create # create the test database for ldap ...
  - python3 -m cdedb dev compile-sample-data-sql --outfile - > tests/ancillary_files/sample_data.sql
  - python3 -m cdedb db populate # ... and populates it
- name: ldap # is used as the hostname for the container
  image: ldaptor
  pull: never # do not try to pull image from docker hub
  detach: true # detach to keep running for the following steps
  depends_on:
  - testsuite-setup
  when:
    status:
      - failure
      - success
  environment:
    CDEDB_CONFIGPATH: tests/config/test_ldap.py
- name: frontend tests a-d
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  - name: coverage
    path: /coverage
  commands:
  - COVERAGE_FILE=/coverage/.coverage.1 python3 -m coverage run -p bin/check.py --verbose --first # everything before event
- name: frontend tests e-z
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  - name: coverage
    path: /coverage
  commands:
  - COVERAGE_FILE=/coverage/.coverage.2 python3 -m coverage run -p bin/check.py --verbose --second # event and following
- name: non-frontend tests
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  - name: coverage
    path: /coverage
  commands:
  - COVERAGE_FILE=/coverage/.coverage.3 python3 -m coverage run -p bin/check.py --verbose --third
- name: ldap tests
  image: cdedb
  pull: never # do not try to pull image from docker hub
  depends_on:
  - testsuite-setup
  - ldap
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  - name: coverage
    path: /coverage
  commands:
  - sleep 10 # wait until the ldap server comes online
  - COVERAGE_FILE=/coverage/.coverage.4 python3 -m coverage run -p bin/check.py --verbose --all-ldap
- name: coverage
  image: cdedb
  pull: never
  depends_on:
  - frontend tests a-d
  - frontend tests e-z
  - non-frontend tests
  - ldap tests
  when:
    status:
      - failure
      - success
  volumes:
  - name: coverage
    path: /coverage
  commands:
  - python3 -m coverage combine /coverage/
  - python3 -m coverage report --include 'cdedb/*' --show-missing --fail-under=92
- name: xss
  image: cdedb
  pull: never
  depends_on:
    - testsuite-setup
  when:
    status:
      - failure
      - success
  volumes:
  - name: tmp_dir
    path: /tmp
  commands:
    - bin/check.py --verbose --parts xss
- name: check sample data consistency
  image: cdedb
  pull: never
  depends_on:
    - ldap tests
  when:
    status:
      - failure
      - success
  volumes:
    - name: tmp_dir
      path: /tmp
  environment:
    CDEDB_CONFIGPATH: tests/config/test_ldap.py
  commands:
    - python3 -m cdedb dev apply-sample-data
    - python3 -m cdedb dev compile-sample-data-json
    - diff -u tests/ancillary_files/sample_data.json /tmp/sample_data.json
- name: check for merge conflicts
  image: docker:20.10-git
  pull: never # do not try to pull image from docker hub
  depends_on:
  - frontend tests a-d
  - frontend tests e-z
  - non-frontend tests
  - ldap tests
  - xss
  when:
    status:
    - failure
    - success
  commands:
  # let the pipeline fail if merge caused conflicts
  - apk add --no-cache gettext
  - git checkout $DRONE_TARGET_BRANCH
  - git merge $DRONE_COMMIT

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock
- name: database
  temp:
    medium: memory
- name: tmp_dir
  temp: {}
- name: coverage
  temp: {}


trigger:
  branch:
  - master
  - stable
  - ci/*
